/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Classification, ExtendedPlacement, Status, StatusTags } from "./common/commonTypes.module";
import { LogRow } from "./components/rux-log/rux-log.model";
import { RangeItem } from "./components/rux-monitoring-progress-icon/rux-monitoring-progress-icon";
import { SegmentedButton } from "./components/rux-segmented-button/rux-segmented-button.model";
export namespace Components {
    interface RuxAccordion {
        /**
          * If present, sets a disabled state on the accordion, indicating that no part of it can be manipulated by user action.
         */
        "disabled": boolean;
        /**
          * ***** toggles disallow muiltiple - default false ********
         */
        "disallowMultiple": boolean;
    }
    interface RuxAccordionItem {
        /**
          * If present, sets a disabled state on this accordion item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, sets the initial state on this accordion item to open, displaying the accordion content.
         */
        "expanded": boolean;
    }
    interface RuxBreadcrumb {
    }
    interface RuxBreadcrumbItem {
        /**
          * The href property of the breadcrumb item link
         */
        "href"?: string;
    }
    interface RuxButton {
        /**
          * Changes button style from solid to borderless by setting the rux-button--borderless class
         */
        "borderless": boolean;
        /**
          * Toggles disabled attribute on the button
         */
        "disabled": boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * Changes button style from solid to secondary by setting the rux-button--secondary class
         */
        "secondary": boolean;
        /**
          * Changes size of a button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type. Use 'submit' to submit native form data.
         */
        "type": 'submit' | 'button';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign": 'left' | 'center' | 'right';
    }
    interface RuxCard {
    }
    interface RuxCheckbox {
        /**
          * Toggles checked state of a checkbox
         */
        "checked": boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
         */
        "indeterminate": boolean;
        /**
          * The checkbox label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name": string;
        /**
          * The checkbox value
         */
        "value": string;
    }
    interface RuxCheckboxGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Checkbox Group as invalid.
         */
        "invalid": boolean;
        /**
          * The label of the checkbox group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Marks that a selection from the checkbox group is requried.
         */
        "required": boolean;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification": Classification;
        /**
          * Allows additional text labels to be added to the marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag": boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: string;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), sets the time and date of the clock.
         */
        "dateIn"?: string;
        /**
          * Hides the day of the year.
         */
        "hideDate": boolean;
        /**
          * Hides all of the labels.
         */
        "hideLabels": boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone": boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small": boolean;
        "static": boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxContainer {
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date": Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for era
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12": boolean;
        /**
          * The locale
         */
        "locale": string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for weekday
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxDialog {
        /**
          * Allows dialog to close when clicking off it
         */
        "clickToClose": boolean;
        /**
          * Text for confirmation button
         */
        "confirmText": string;
        /**
          * Text for close button
         */
        "denyText": string;
        /**
          * Dialog header title
         */
        "header"?: string;
        /**
          * Dialog body message
         */
        "message"?: string;
        /**
          * Shows and hides dialog
         */
        "open": boolean;
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Declares what text will render and whether the app-state component will be shown in the app-meta slot
         */
        "appState"?: string;
        /**
          * Declares the color of the the app-state component background
         */
        "appStateColor"?: 'tag1' | 'tag2' | 'tag3' | 'tag4';
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the menu-icon will be shown in the left-side slot
         */
        "includeIcon": boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon": string;
        /**
          * Declares what text will render and whether the username component will be shown in the app-meta slot
         */
        "username"?: string;
    }
    interface RuxIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIndeterminateProgress {
    }
    interface RuxInput {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Input Field as invalid.
         */
        "invalid": boolean;
        /**
          * The input label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input max attribute
         */
        "max"?: string;
        /**
          * The input min attribute
         */
        "min"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The input placeholder text
         */
        "placeholder"?: string;
        /**
          * The inputs readonly attribute
         */
        "readonly": boolean;
        /**
          * Sets the input as required
         */
        "required": boolean;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Control the padding around the input field
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's spellcheck attribute
         */
        "spellcheck": boolean;
        /**
          * The input step attribute
         */
        "step"?: string;
        /**
          * The input type
         */
        "type": | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'search'
        | 'password'
        | 'date'
        | 'datetime-local'
        | 'time'
        | 'tel';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data": LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxMenu {
    }
    interface RuxMenuItem {
        /**
          * sets the menu item as disabled
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * sets the menu item as selected
         */
        "selected": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * the value returned when item is selected.
         */
        "value"?: string;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon": string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications": number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status": Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max": number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min": number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress": number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Prevents the user from dismissing the notification. Hides the `actions` slot.
         */
        "hideClose": boolean;
        /**
          * Message for the notification banner.
         */
        "message": string;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open": boolean;
        /**
          * Changes the size of the banner to a small variant.
         */
        "small": boolean;
        /**
          * The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: Status;
    }
    interface RuxOption {
        /**
          * Sets the option as disabled
         */
        "disabled": boolean;
        /**
          * The option label
         */
        "label": string;
        /**
          * The option value
         */
        "value": string;
    }
    interface RuxOptionGroup {
        /**
          * The option group label
         */
        "label"?: string;
    }
    interface RuxPopUp {
        /**
          * When provided, will close the pop-up when a single selection is made.
         */
        "closeOnSelect": boolean;
        /**
          * Turns autoUpdate on or off which makes the pop-up move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * watches for trigger movements and replace the popup if movement is detected.
         */
        "enableAnimationFrame": boolean;
        /**
          * Closes the pop up and returns false.
         */
        "hide": () => Promise<false>;
        /**
          * Determines if the pop up is open or closed
         */
        "open": boolean;
        /**
          * The placement of the pop up relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the pop up and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the popup, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxProgress {
        /**
          * Hides the progress label
         */
        "hideLabel": boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max": number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked": boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * The label of the push button.
         */
        "label": string;
        /**
          * The name of the push button.
         */
        "name": string;
        /**
          * Changes size of a push button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the push button.
         */
        "value": string;
    }
    interface RuxRadio {
        /**
          * Toggles checked state of a radio
         */
        "checked": boolean;
        /**
          * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The radio label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The radio name
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * The radio value
         */
        "value": string;
    }
    interface RuxRadioGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Radio Group as invalid.
         */
        "invalid": boolean;
        /**
          * The label of the radio group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
         */
        "name": string;
        /**
          * Marks that a selection from the radio-group is requried.
         */
        "required": boolean;
        /**
          * The value of the current selected radio in the group. Changing this will also mark that radio as checked in the UI.
         */
        "value"?: any | null;
    }
    interface RuxRuler {
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data": SegmentedButton[];
        /**
          * Sets the disabled attribute.
         */
        "disabled": boolean;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected": string;
        /**
          * Changes size of segmented button from small to medium or large.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface RuxSelect {
        /**
          * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Id for the Select Input
         */
        "inputId"?: string;
        /**
          * Presentational only. Renders the Select Menu as invalid.
         */
        "invalid": boolean;
        /**
          * The select label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Id for the Label
         */
        "labelId"?: string;
        /**
          * Enables multiselect
         */
        "multiple": boolean;
        /**
          * Sets the Name of the Input Element
         */
        "name": string;
        /**
          * Sets the field as required
         */
        "required": boolean;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The size of rux-select
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the selected option. If multiple is true, this is an array.
         */
        "value"?: string | string[];
    }
    interface RuxSlider {
        /**
          * Shows tick marks and labels in the order provided and aligns evenly based on the length.
         */
        "axisLabels": string[];
        /**
          * Determines if the slider is disabled.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * The slider label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Max value of slider.
         */
        "max": number;
        /**
          * Min value of the slider.
         */
        "min": number;
        /**
          * Name of the Input Field for Form Submission
         */
        "name": string;
        /**
          * Step amount of slider value.
         */
        "step": number;
        /**
          * Hides labels and only shows tick marks if axis-labels is provided.
         */
        "ticksOnly": boolean;
        /**
          * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
         */
        "value": number;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Toggles checked state of a switch
         */
        "checked": boolean;
        /**
          * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The switch label. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The switch name
         */
        "name": string;
        /**
          * The switch value
         */
        "value": string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected": boolean;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small": boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected": boolean;
    }
    interface RuxTabs {
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTag {
        /**
          * Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.
         */
        "status"?: StatusTags;
    }
    interface RuxTextarea {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The  or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Textarea as invalid.
         */
        "invalid": boolean;
        /**
          * The textarea label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input maxLength attribute
         */
        "maxLength"?: string;
        /**
          * The input minLength attribute
         */
        "minLength"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The textarea placeholder text
         */
        "placeholder"?: string;
        /**
          * Sets the input as disabled
         */
        "required": boolean;
        /**
          * The input rows attribute
         */
        "rows"?: number;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Styles the input element size between small, medium and large. The default styling is medium.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxTimeRegion {
        /**
          * The end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * Optionally hide the bottom right timestamp.
         */
        "hideTimestamp": boolean;
        /**
          * Visually indicates a partial time regions. Partial time regions are time regions that start or end outside of the current range of the timeline.
         */
        "partial": 'none' | 'start' | 'end' | 'ongoing';
        /**
          * Visually displays the selected state
         */
        "selected": boolean;
        /**
          * The start date. Must be an ISO string "2021-02-02T05:00:00Z".
         */
        "start": string;
        /**
          * Short hand attribute for displaying a Status icon and appropriate border color.
         */
        "status"?: Status;
        "timezone": string;
    }
    interface RuxTimeline {
        /**
          * The timeline's end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * The timeline's date time interval
         */
        "interval": 'hour' | 'day';
        /**
          * The timeline's playhead date time. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "playhead"?: string;
        /**
          * The timeline's start date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "start": string;
        /**
          * Controls the timezone that the timeline is localized to. Must be an IANA time zone name ("America/New_York") or an offset string.
         */
        "timezone": string;
        /**
          * The timeline's zoom level.
         */
        "zoom": number;
    }
    interface RuxTooltip {
        /**
          * How long it takes the tooltip to appear in milliseconds, default = 800, Overrides the css custom property --delay.
         */
        "delay": number;
        /**
          * Turns disableAutoUpdate on or off which makes the tooltip move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * Closes the tooltip and returns false.
         */
        "hide": () => Promise<boolean>;
        /**
          * The tooltip's content.
         */
        "message": string;
        /**
          * Pixel offset from trigger, default = 8
         */
        "offset": number;
        /**
          * Whether or not the tooltip is open
         */
        "open": boolean;
        /**
          * The placement of the tooltip relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the tooltip and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the tooltip, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxTrack {
        "columns": number;
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
        "width": number;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded": boolean;
        /**
          * Sets the selected state
         */
        "selected": boolean;
        /**
          * Sets the expanded state
          * @param value
         */
        "setExpanded": (value: boolean) => Promise<void>;
        /**
          * Sets the selected state
          * @param value
         */
        "setSelected": (value: boolean) => Promise<void>;
    }
}
export interface RuxAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxAccordionItemElement;
}
export interface RuxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxCheckboxElement;
}
export interface RuxDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxDialogElement;
}
export interface RuxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxInputElement;
}
export interface RuxMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxMenuElement;
}
export interface RuxNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxNotificationElement;
}
export interface RuxOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionElement;
}
export interface RuxOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionGroupElement;
}
export interface RuxPopUpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPopUpElement;
}
export interface RuxPushButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPushButtonElement;
}
export interface RuxRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioElement;
}
export interface RuxRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioGroupElement;
}
export interface RuxSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSegmentedButtonElement;
}
export interface RuxSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSelectElement;
}
export interface RuxSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSliderElement;
}
export interface RuxSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSwitchElement;
}
export interface RuxTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabElement;
}
export interface RuxTabPanelsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabPanelsElement;
}
export interface RuxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabsElement;
}
export interface RuxTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTextareaElement;
}
export interface RuxTimeRegionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTimeRegionElement;
}
export interface RuxTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTooltipElement;
}
export interface RuxTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTreeNodeElement;
}
declare global {
    interface HTMLRuxAccordionElement extends Components.RuxAccordion, HTMLStencilElement {
    }
    var HTMLRuxAccordionElement: {
        prototype: HTMLRuxAccordionElement;
        new (): HTMLRuxAccordionElement;
    };
    interface HTMLRuxAccordionItemElement extends Components.RuxAccordionItem, HTMLStencilElement {
    }
    var HTMLRuxAccordionItemElement: {
        prototype: HTMLRuxAccordionItemElement;
        new (): HTMLRuxAccordionItemElement;
    };
    interface HTMLRuxBreadcrumbElement extends Components.RuxBreadcrumb, HTMLStencilElement {
    }
    var HTMLRuxBreadcrumbElement: {
        prototype: HTMLRuxBreadcrumbElement;
        new (): HTMLRuxBreadcrumbElement;
    };
    interface HTMLRuxBreadcrumbItemElement extends Components.RuxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLRuxBreadcrumbItemElement: {
        prototype: HTMLRuxBreadcrumbItemElement;
        new (): HTMLRuxBreadcrumbItemElement;
    };
    interface HTMLRuxButtonElement extends Components.RuxButton, HTMLStencilElement {
    }
    var HTMLRuxButtonElement: {
        prototype: HTMLRuxButtonElement;
        new (): HTMLRuxButtonElement;
    };
    interface HTMLRuxButtonGroupElement extends Components.RuxButtonGroup, HTMLStencilElement {
    }
    var HTMLRuxButtonGroupElement: {
        prototype: HTMLRuxButtonGroupElement;
        new (): HTMLRuxButtonGroupElement;
    };
    interface HTMLRuxCardElement extends Components.RuxCard, HTMLStencilElement {
    }
    var HTMLRuxCardElement: {
        prototype: HTMLRuxCardElement;
        new (): HTMLRuxCardElement;
    };
    interface HTMLRuxCheckboxElement extends Components.RuxCheckbox, HTMLStencilElement {
    }
    var HTMLRuxCheckboxElement: {
        prototype: HTMLRuxCheckboxElement;
        new (): HTMLRuxCheckboxElement;
    };
    interface HTMLRuxCheckboxGroupElement extends Components.RuxCheckboxGroup, HTMLStencilElement {
    }
    var HTMLRuxCheckboxGroupElement: {
        prototype: HTMLRuxCheckboxGroupElement;
        new (): HTMLRuxCheckboxGroupElement;
    };
    interface HTMLRuxClassificationMarkingElement extends Components.RuxClassificationMarking, HTMLStencilElement {
    }
    var HTMLRuxClassificationMarkingElement: {
        prototype: HTMLRuxClassificationMarkingElement;
        new (): HTMLRuxClassificationMarkingElement;
    };
    interface HTMLRuxClockElement extends Components.RuxClock, HTMLStencilElement {
    }
    var HTMLRuxClockElement: {
        prototype: HTMLRuxClockElement;
        new (): HTMLRuxClockElement;
    };
    interface HTMLRuxContainerElement extends Components.RuxContainer, HTMLStencilElement {
    }
    var HTMLRuxContainerElement: {
        prototype: HTMLRuxContainerElement;
        new (): HTMLRuxContainerElement;
    };
    interface HTMLRuxDatetimeElement extends Components.RuxDatetime, HTMLStencilElement {
    }
    var HTMLRuxDatetimeElement: {
        prototype: HTMLRuxDatetimeElement;
        new (): HTMLRuxDatetimeElement;
    };
    interface HTMLRuxDialogElement extends Components.RuxDialog, HTMLStencilElement {
    }
    var HTMLRuxDialogElement: {
        prototype: HTMLRuxDialogElement;
        new (): HTMLRuxDialogElement;
    };
    interface HTMLRuxGlobalStatusBarElement extends Components.RuxGlobalStatusBar, HTMLStencilElement {
    }
    var HTMLRuxGlobalStatusBarElement: {
        prototype: HTMLRuxGlobalStatusBarElement;
        new (): HTMLRuxGlobalStatusBarElement;
    };
    interface HTMLRuxIconElement extends Components.RuxIcon, HTMLStencilElement {
    }
    var HTMLRuxIconElement: {
        prototype: HTMLRuxIconElement;
        new (): HTMLRuxIconElement;
    };
    interface HTMLRuxIndeterminateProgressElement extends Components.RuxIndeterminateProgress, HTMLStencilElement {
    }
    var HTMLRuxIndeterminateProgressElement: {
        prototype: HTMLRuxIndeterminateProgressElement;
        new (): HTMLRuxIndeterminateProgressElement;
    };
    interface HTMLRuxInputElement extends Components.RuxInput, HTMLStencilElement {
    }
    var HTMLRuxInputElement: {
        prototype: HTMLRuxInputElement;
        new (): HTMLRuxInputElement;
    };
    interface HTMLRuxLogElement extends Components.RuxLog, HTMLStencilElement {
    }
    var HTMLRuxLogElement: {
        prototype: HTMLRuxLogElement;
        new (): HTMLRuxLogElement;
    };
    interface HTMLRuxMenuElement extends Components.RuxMenu, HTMLStencilElement {
    }
    var HTMLRuxMenuElement: {
        prototype: HTMLRuxMenuElement;
        new (): HTMLRuxMenuElement;
    };
    interface HTMLRuxMenuItemElement extends Components.RuxMenuItem, HTMLStencilElement {
    }
    var HTMLRuxMenuItemElement: {
        prototype: HTMLRuxMenuItemElement;
        new (): HTMLRuxMenuItemElement;
    };
    interface HTMLRuxMenuItemDividerElement extends Components.RuxMenuItemDivider, HTMLStencilElement {
    }
    var HTMLRuxMenuItemDividerElement: {
        prototype: HTMLRuxMenuItemDividerElement;
        new (): HTMLRuxMenuItemDividerElement;
    };
    interface HTMLRuxMonitoringIconElement extends Components.RuxMonitoringIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringIconElement: {
        prototype: HTMLRuxMonitoringIconElement;
        new (): HTMLRuxMonitoringIconElement;
    };
    interface HTMLRuxMonitoringProgressIconElement extends Components.RuxMonitoringProgressIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringProgressIconElement: {
        prototype: HTMLRuxMonitoringProgressIconElement;
        new (): HTMLRuxMonitoringProgressIconElement;
    };
    interface HTMLRuxNotificationElement extends Components.RuxNotification, HTMLStencilElement {
    }
    var HTMLRuxNotificationElement: {
        prototype: HTMLRuxNotificationElement;
        new (): HTMLRuxNotificationElement;
    };
    interface HTMLRuxOptionElement extends Components.RuxOption, HTMLStencilElement {
    }
    var HTMLRuxOptionElement: {
        prototype: HTMLRuxOptionElement;
        new (): HTMLRuxOptionElement;
    };
    interface HTMLRuxOptionGroupElement extends Components.RuxOptionGroup, HTMLStencilElement {
    }
    var HTMLRuxOptionGroupElement: {
        prototype: HTMLRuxOptionGroupElement;
        new (): HTMLRuxOptionGroupElement;
    };
    interface HTMLRuxPopUpElement extends Components.RuxPopUp, HTMLStencilElement {
    }
    var HTMLRuxPopUpElement: {
        prototype: HTMLRuxPopUpElement;
        new (): HTMLRuxPopUpElement;
    };
    interface HTMLRuxProgressElement extends Components.RuxProgress, HTMLStencilElement {
    }
    var HTMLRuxProgressElement: {
        prototype: HTMLRuxProgressElement;
        new (): HTMLRuxProgressElement;
    };
    interface HTMLRuxPushButtonElement extends Components.RuxPushButton, HTMLStencilElement {
    }
    var HTMLRuxPushButtonElement: {
        prototype: HTMLRuxPushButtonElement;
        new (): HTMLRuxPushButtonElement;
    };
    interface HTMLRuxRadioElement extends Components.RuxRadio, HTMLStencilElement {
    }
    var HTMLRuxRadioElement: {
        prototype: HTMLRuxRadioElement;
        new (): HTMLRuxRadioElement;
    };
    interface HTMLRuxRadioGroupElement extends Components.RuxRadioGroup, HTMLStencilElement {
    }
    var HTMLRuxRadioGroupElement: {
        prototype: HTMLRuxRadioGroupElement;
        new (): HTMLRuxRadioGroupElement;
    };
    interface HTMLRuxRulerElement extends Components.RuxRuler, HTMLStencilElement {
    }
    var HTMLRuxRulerElement: {
        prototype: HTMLRuxRulerElement;
        new (): HTMLRuxRulerElement;
    };
    interface HTMLRuxSegmentedButtonElement extends Components.RuxSegmentedButton, HTMLStencilElement {
    }
    var HTMLRuxSegmentedButtonElement: {
        prototype: HTMLRuxSegmentedButtonElement;
        new (): HTMLRuxSegmentedButtonElement;
    };
    interface HTMLRuxSelectElement extends Components.RuxSelect, HTMLStencilElement {
    }
    var HTMLRuxSelectElement: {
        prototype: HTMLRuxSelectElement;
        new (): HTMLRuxSelectElement;
    };
    interface HTMLRuxSliderElement extends Components.RuxSlider, HTMLStencilElement {
    }
    var HTMLRuxSliderElement: {
        prototype: HTMLRuxSliderElement;
        new (): HTMLRuxSliderElement;
    };
    interface HTMLRuxStatusElement extends Components.RuxStatus, HTMLStencilElement {
    }
    var HTMLRuxStatusElement: {
        prototype: HTMLRuxStatusElement;
        new (): HTMLRuxStatusElement;
    };
    interface HTMLRuxSwitchElement extends Components.RuxSwitch, HTMLStencilElement {
    }
    var HTMLRuxSwitchElement: {
        prototype: HTMLRuxSwitchElement;
        new (): HTMLRuxSwitchElement;
    };
    interface HTMLRuxTabElement extends Components.RuxTab, HTMLStencilElement {
    }
    var HTMLRuxTabElement: {
        prototype: HTMLRuxTabElement;
        new (): HTMLRuxTabElement;
    };
    interface HTMLRuxTabPanelElement extends Components.RuxTabPanel, HTMLStencilElement {
    }
    var HTMLRuxTabPanelElement: {
        prototype: HTMLRuxTabPanelElement;
        new (): HTMLRuxTabPanelElement;
    };
    interface HTMLRuxTabPanelsElement extends Components.RuxTabPanels, HTMLStencilElement {
    }
    var HTMLRuxTabPanelsElement: {
        prototype: HTMLRuxTabPanelsElement;
        new (): HTMLRuxTabPanelsElement;
    };
    interface HTMLRuxTableElement extends Components.RuxTable, HTMLStencilElement {
    }
    var HTMLRuxTableElement: {
        prototype: HTMLRuxTableElement;
        new (): HTMLRuxTableElement;
    };
    interface HTMLRuxTableBodyElement extends Components.RuxTableBody, HTMLStencilElement {
    }
    var HTMLRuxTableBodyElement: {
        prototype: HTMLRuxTableBodyElement;
        new (): HTMLRuxTableBodyElement;
    };
    interface HTMLRuxTableCellElement extends Components.RuxTableCell, HTMLStencilElement {
    }
    var HTMLRuxTableCellElement: {
        prototype: HTMLRuxTableCellElement;
        new (): HTMLRuxTableCellElement;
    };
    interface HTMLRuxTableHeaderElement extends Components.RuxTableHeader, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderElement: {
        prototype: HTMLRuxTableHeaderElement;
        new (): HTMLRuxTableHeaderElement;
    };
    interface HTMLRuxTableHeaderCellElement extends Components.RuxTableHeaderCell, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderCellElement: {
        prototype: HTMLRuxTableHeaderCellElement;
        new (): HTMLRuxTableHeaderCellElement;
    };
    interface HTMLRuxTableHeaderRowElement extends Components.RuxTableHeaderRow, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderRowElement: {
        prototype: HTMLRuxTableHeaderRowElement;
        new (): HTMLRuxTableHeaderRowElement;
    };
    interface HTMLRuxTableRowElement extends Components.RuxTableRow, HTMLStencilElement {
    }
    var HTMLRuxTableRowElement: {
        prototype: HTMLRuxTableRowElement;
        new (): HTMLRuxTableRowElement;
    };
    interface HTMLRuxTabsElement extends Components.RuxTabs, HTMLStencilElement {
    }
    var HTMLRuxTabsElement: {
        prototype: HTMLRuxTabsElement;
        new (): HTMLRuxTabsElement;
    };
    interface HTMLRuxTagElement extends Components.RuxTag, HTMLStencilElement {
    }
    var HTMLRuxTagElement: {
        prototype: HTMLRuxTagElement;
        new (): HTMLRuxTagElement;
    };
    interface HTMLRuxTextareaElement extends Components.RuxTextarea, HTMLStencilElement {
    }
    var HTMLRuxTextareaElement: {
        prototype: HTMLRuxTextareaElement;
        new (): HTMLRuxTextareaElement;
    };
    interface HTMLRuxTimeRegionElement extends Components.RuxTimeRegion, HTMLStencilElement {
    }
    var HTMLRuxTimeRegionElement: {
        prototype: HTMLRuxTimeRegionElement;
        new (): HTMLRuxTimeRegionElement;
    };
    interface HTMLRuxTimelineElement extends Components.RuxTimeline, HTMLStencilElement {
    }
    var HTMLRuxTimelineElement: {
        prototype: HTMLRuxTimelineElement;
        new (): HTMLRuxTimelineElement;
    };
    interface HTMLRuxTooltipElement extends Components.RuxTooltip, HTMLStencilElement {
    }
    var HTMLRuxTooltipElement: {
        prototype: HTMLRuxTooltipElement;
        new (): HTMLRuxTooltipElement;
    };
    interface HTMLRuxTrackElement extends Components.RuxTrack, HTMLStencilElement {
    }
    var HTMLRuxTrackElement: {
        prototype: HTMLRuxTrackElement;
        new (): HTMLRuxTrackElement;
    };
    interface HTMLRuxTreeElement extends Components.RuxTree, HTMLStencilElement {
    }
    var HTMLRuxTreeElement: {
        prototype: HTMLRuxTreeElement;
        new (): HTMLRuxTreeElement;
    };
    interface HTMLRuxTreeNodeElement extends Components.RuxTreeNode, HTMLStencilElement {
    }
    var HTMLRuxTreeNodeElement: {
        prototype: HTMLRuxTreeNodeElement;
        new (): HTMLRuxTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "rux-accordion": HTMLRuxAccordionElement;
        "rux-accordion-item": HTMLRuxAccordionItemElement;
        "rux-breadcrumb": HTMLRuxBreadcrumbElement;
        "rux-breadcrumb-item": HTMLRuxBreadcrumbItemElement;
        "rux-button": HTMLRuxButtonElement;
        "rux-button-group": HTMLRuxButtonGroupElement;
        "rux-card": HTMLRuxCardElement;
        "rux-checkbox": HTMLRuxCheckboxElement;
        "rux-checkbox-group": HTMLRuxCheckboxGroupElement;
        "rux-classification-marking": HTMLRuxClassificationMarkingElement;
        "rux-clock": HTMLRuxClockElement;
        "rux-container": HTMLRuxContainerElement;
        "rux-datetime": HTMLRuxDatetimeElement;
        "rux-dialog": HTMLRuxDialogElement;
        "rux-global-status-bar": HTMLRuxGlobalStatusBarElement;
        "rux-icon": HTMLRuxIconElement;
        "rux-indeterminate-progress": HTMLRuxIndeterminateProgressElement;
        "rux-input": HTMLRuxInputElement;
        "rux-log": HTMLRuxLogElement;
        "rux-menu": HTMLRuxMenuElement;
        "rux-menu-item": HTMLRuxMenuItemElement;
        "rux-menu-item-divider": HTMLRuxMenuItemDividerElement;
        "rux-monitoring-icon": HTMLRuxMonitoringIconElement;
        "rux-monitoring-progress-icon": HTMLRuxMonitoringProgressIconElement;
        "rux-notification": HTMLRuxNotificationElement;
        "rux-option": HTMLRuxOptionElement;
        "rux-option-group": HTMLRuxOptionGroupElement;
        "rux-pop-up": HTMLRuxPopUpElement;
        "rux-progress": HTMLRuxProgressElement;
        "rux-push-button": HTMLRuxPushButtonElement;
        "rux-radio": HTMLRuxRadioElement;
        "rux-radio-group": HTMLRuxRadioGroupElement;
        "rux-ruler": HTMLRuxRulerElement;
        "rux-segmented-button": HTMLRuxSegmentedButtonElement;
        "rux-select": HTMLRuxSelectElement;
        "rux-slider": HTMLRuxSliderElement;
        "rux-status": HTMLRuxStatusElement;
        "rux-switch": HTMLRuxSwitchElement;
        "rux-tab": HTMLRuxTabElement;
        "rux-tab-panel": HTMLRuxTabPanelElement;
        "rux-tab-panels": HTMLRuxTabPanelsElement;
        "rux-table": HTMLRuxTableElement;
        "rux-table-body": HTMLRuxTableBodyElement;
        "rux-table-cell": HTMLRuxTableCellElement;
        "rux-table-header": HTMLRuxTableHeaderElement;
        "rux-table-header-cell": HTMLRuxTableHeaderCellElement;
        "rux-table-header-row": HTMLRuxTableHeaderRowElement;
        "rux-table-row": HTMLRuxTableRowElement;
        "rux-tabs": HTMLRuxTabsElement;
        "rux-tag": HTMLRuxTagElement;
        "rux-textarea": HTMLRuxTextareaElement;
        "rux-time-region": HTMLRuxTimeRegionElement;
        "rux-timeline": HTMLRuxTimelineElement;
        "rux-tooltip": HTMLRuxTooltipElement;
        "rux-track": HTMLRuxTrackElement;
        "rux-tree": HTMLRuxTreeElement;
        "rux-tree-node": HTMLRuxTreeNodeElement;
    }
}
declare namespace LocalJSX {
    interface RuxAccordion {
        /**
          * If present, sets a disabled state on the accordion, indicating that no part of it can be manipulated by user action.
         */
        "disabled"?: boolean;
        /**
          * ***** toggles disallow muiltiple - default false ********
         */
        "disallowMultiple"?: boolean;
    }
    interface RuxAccordionItem {
        /**
          * If present, sets a disabled state on this accordion item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * If present, sets the initial state on this accordion item to open, displaying the accordion content.
         */
        "expanded"?: boolean;
        /**
          * Fired when an accordion-item has collapsed
         */
        "onRuxcollapsed"?: (event: RuxAccordionItemCustomEvent<any>) => void;
        /**
          * Fired when an accordion-item has expanded
         */
        "onRuxexpanded"?: (event: RuxAccordionItemCustomEvent<any>) => void;
    }
    interface RuxBreadcrumb {
    }
    interface RuxBreadcrumbItem {
        /**
          * The href property of the breadcrumb item link
         */
        "href"?: string;
    }
    interface RuxButton {
        /**
          * Changes button style from solid to borderless by setting the rux-button--borderless class
         */
        "borderless"?: boolean;
        /**
          * Toggles disabled attribute on the button
         */
        "disabled"?: boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * Changes button style from solid to secondary by setting the rux-button--secondary class
         */
        "secondary"?: boolean;
        /**
          * Changes size of a button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type. Use 'submit' to submit native form data.
         */
        "type"?: 'submit' | 'button';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign"?: 'left' | 'center' | 'right';
    }
    interface RuxCard {
    }
    interface RuxCheckbox {
        /**
          * Toggles checked state of a checkbox
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when an element has gained focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event)
         */
        "onRuxfocus"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * The checkbox value
         */
        "value"?: string;
    }
    interface RuxCheckboxGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Checkbox Group as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the checkbox group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Marks that a selection from the checkbox group is requried.
         */
        "required"?: boolean;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification"?: Classification;
        /**
          * Allows additional text labels to be added to the marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag"?: boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: string;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), sets the time and date of the clock.
         */
        "dateIn"?: string;
        /**
          * Hides the day of the year.
         */
        "hideDate"?: boolean;
        /**
          * Hides all of the labels.
         */
        "hideLabels"?: boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone"?: boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small"?: boolean;
        "static"?: boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxContainer {
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date"?: Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for era
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12"?: boolean;
        /**
          * The locale
         */
        "locale"?: string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for weekday
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxDialog {
        /**
          * Allows dialog to close when clicking off it
         */
        "clickToClose"?: boolean;
        /**
          * Text for confirmation button
         */
        "confirmText"?: string;
        /**
          * Text for close button
         */
        "denyText"?: string;
        /**
          * Dialog header title
         */
        "header"?: string;
        /**
          * Dialog body message
         */
        "message"?: string;
        /**
          * Event that is fired when dialog closes. If dialog is closed by clicking on the default confirm or deny buttons (when no footer slot is provided), then true or false will be emitted respectively on the event.detail.
         */
        "onRuxdialogclosed"?: (event: RuxDialogCustomEvent<boolean | null>) => void;
        /**
          * Event that is fired when dialog opens
         */
        "onRuxdialogopened"?: (event: RuxDialogCustomEvent<void>) => void;
        /**
          * Shows and hides dialog
         */
        "open"?: boolean;
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Declares what text will render and whether the app-state component will be shown in the app-meta slot
         */
        "appState"?: string;
        /**
          * Declares the color of the the app-state component background
         */
        "appStateColor"?: 'tag1' | 'tag2' | 'tag3' | 'tag4';
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the menu-icon will be shown in the left-side slot
         */
        "includeIcon"?: boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon"?: string;
        /**
          * Declares what text will render and whether the username component will be shown in the app-meta slot
         */
        "username"?: string;
    }
    interface RuxIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIndeterminateProgress {
    }
    interface RuxInput {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Input Field as invalid.
         */
        "invalid"?: boolean;
        /**
          * The input label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input max attribute
         */
        "max"?: string;
        /**
          * The input min attribute
         */
        "min"?: string;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when an element has gained focus - [HTMLElement/focus_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event)
         */
        "onRuxfocus"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * The input placeholder text
         */
        "placeholder"?: string;
        /**
          * The inputs readonly attribute
         */
        "readonly"?: boolean;
        /**
          * Sets the input as required
         */
        "required"?: boolean;
        /**
          * Control the padding around the input field
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's spellcheck attribute
         */
        "spellcheck"?: boolean;
        /**
          * The input step attribute
         */
        "step"?: string;
        /**
          * The input type
         */
        "type"?: | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'search'
        | 'password'
        | 'date'
        | 'datetime-local'
        | 'time'
        | 'tel';
        /**
          * The input value
         */
        "value"?: string;
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data"?: LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxMenu {
        /**
          * Emits when a rux-menu-item is selected. Emits the rux-menu-item selected in the event detail.
         */
        "onRuxmenuselected"?: (event: RuxMenuCustomEvent<any>) => void;
    }
    interface RuxMenuItem {
        /**
          * sets the menu item as disabled
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * sets the menu item as selected
         */
        "selected"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * the value returned when item is selected.
         */
        "value"?: string;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status"?: Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max"?: number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min"?: number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress"?: number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Prevents the user from dismissing the notification. Hides the `actions` slot.
         */
        "hideClose"?: boolean;
        /**
          * Message for the notification banner.
         */
        "message"?: string;
        /**
          * Fires when the notification banner is closed
         */
        "onRuxclosed"?: (event: RuxNotificationCustomEvent<boolean>) => void;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open"?: boolean;
        /**
          * Changes the size of the banner to a small variant.
         */
        "small"?: boolean;
        /**
          * The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: Status;
    }
    interface RuxOption {
        /**
          * Sets the option as disabled
         */
        "disabled"?: boolean;
        /**
          * The option label
         */
        "label": string;
        "onRux-option-changed"?: (event: RuxOptionCustomEvent<void>) => void;
        /**
          * The option value
         */
        "value": string;
    }
    interface RuxOptionGroup {
        /**
          * The option group label
         */
        "label"?: string;
        "onRux-option-group-changed"?: (event: RuxOptionGroupCustomEvent<void>) => void;
    }
    interface RuxPopUp {
        /**
          * When provided, will close the pop-up when a single selection is made.
         */
        "closeOnSelect"?: boolean;
        /**
          * Turns autoUpdate on or off which makes the pop-up move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate"?: boolean;
        /**
          * watches for trigger movements and replace the popup if movement is detected.
         */
        "enableAnimationFrame"?: boolean;
        /**
          * Emits when the pop up has closed.
         */
        "onRuxpopupclosed"?: (event: RuxPopUpCustomEvent<any>) => void;
        /**
          * Emits when the pop up has opened
         */
        "onRuxpopupopened"?: (event: RuxPopUpCustomEvent<any>) => void;
        /**
          * Determines if the pop up is open or closed
         */
        "open"?: boolean;
        /**
          * The placement of the pop up relative to it's slotted trigger element. Defaults to auto.
         */
        "placement"?: ExtendedPlacement;
        /**
          * The position strategy of the popup, either absolute or fixed.
         */
        "strategy"?: 'absolute' | 'fixed';
    }
    interface RuxProgress {
        /**
          * Hides the progress label
         */
        "hideLabel"?: boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max"?: number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked"?: boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * The label of the push button.
         */
        "label"?: string;
        /**
          * The name of the push button.
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxPushButtonCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user and emits the value on the event.detail - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxchange"?: (event: RuxPushButtonCustomEvent<any>) => void;
        /**
          * Changes size of a push button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the push button.
         */
        "value"?: string;
    }
    interface RuxRadio {
        /**
          * Toggles checked state of a radio
         */
        "checked"?: boolean;
        /**
          * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The radio label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The radio name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxRadioCustomEvent<any>) => void;
        /**
          * The radio value
         */
        "value"?: string;
    }
    interface RuxRadioGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Radio Group as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the radio group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
         */
        "name"?: string;
        /**
          * Fired when the value of the input changes and emits that value on the event.detail. - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxRadioGroupCustomEvent<any>) => void;
        /**
          * Marks that a selection from the radio-group is requried.
         */
        "required"?: boolean;
        /**
          * The value of the current selected radio in the group. Changing this will also mark that radio as checked in the UI.
         */
        "value"?: any | null;
    }
    interface RuxRuler {
        "end"?: string;
        "interval"?: any;
        "start"?: string;
        "timezone"?: string;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data"?: SegmentedButton[];
        /**
          * Sets the disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * Fires when the value property has changed and emits that value on the event.detail.
         */
        "onRuxchange"?: (event: RuxSegmentedButtonCustomEvent<any>) => void;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected"?: string;
        /**
          * Changes size of segmented button from small to medium or large.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface RuxSelect {
        /**
          * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Id for the Select Input
         */
        "inputId"?: string;
        /**
          * Presentational only. Renders the Select Menu as invalid.
         */
        "invalid"?: boolean;
        /**
          * The select label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Id for the Label
         */
        "labelId"?: string;
        /**
          * Enables multiselect
         */
        "multiple"?: boolean;
        /**
          * Sets the Name of the Input Element
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSelectCustomEvent<any>) => void;
        /**
          * Event Emitted when the Value of the Select is Changed
         */
        "onRuxchange"?: (event: RuxSelectCustomEvent<void>) => void;
        /**
          * Sets the field as required
         */
        "required"?: boolean;
        /**
          * The size of rux-select
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the selected option. If multiple is true, this is an array.
         */
        "value"?: string | string[];
    }
    interface RuxSlider {
        /**
          * Shows tick marks and labels in the order provided and aligns evenly based on the length.
         */
        "axisLabels"?: string[];
        /**
          * Determines if the slider is disabled.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * The slider label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Max value of slider.
         */
        "max"?: number;
        /**
          * Min value of the slider.
         */
        "min"?: number;
        /**
          * Name of the Input Field for Form Submission
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Fired when the element's value is altered by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxchange"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxinput"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Step amount of slider value.
         */
        "step"?: number;
        /**
          * Hides labels and only shows tick marks if axis-labels is provided.
         */
        "ticksOnly"?: boolean;
        /**
          * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
         */
        "value"?: number;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Toggles checked state of a switch
         */
        "checked"?: boolean;
        /**
          * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The switch label. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The switch name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes and emits that value on the event.detail. - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * The switch value
         */
        "value"?: string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * Fires when a tab is selected
         */
        "onRuxtabselected"?: (event: RuxTabCustomEvent<any>) => void;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected"?: boolean;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
        /**
          * Emits a list of the Tab Panels on the event.detail which have been passed in
         */
        "onRuxregisterpanels"?: (event: RuxTabPanelsCustomEvent<HTMLRuxTabPanelsElement[]>) => void;
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected"?: boolean;
    }
    interface RuxTabs {
        /**
          * Fires whenever a new tab is selected, and emits the selected tab on the event.detail.
         */
        "onRuxselected"?: (event: RuxTabsCustomEvent<any>) => void;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTag {
        /**
          * Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.
         */
        "status"?: StatusTags;
    }
    interface RuxTextarea {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The  or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Textarea as invalid.
         */
        "invalid"?: boolean;
        /**
          * The textarea label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input maxLength attribute
         */
        "maxLength"?: string;
        /**
          * The input minLength attribute
         */
        "minLength"?: string;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * The textarea placeholder text
         */
        "placeholder"?: string;
        /**
          * Sets the input as disabled
         */
        "required"?: boolean;
        /**
          * The input rows attribute
         */
        "rows"?: number;
        /**
          * Styles the input element size between small, medium and large. The default styling is medium.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input value
         */
        "value"?: string;
    }
    interface RuxTimeRegion {
        /**
          * The end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end"?: string;
        /**
          * Optionally hide the bottom right timestamp.
         */
        "hideTimestamp"?: boolean;
        "onRuxtimeregionchange"?: (event: RuxTimeRegionCustomEvent<any>) => void;
        /**
          * Visually indicates a partial time regions. Partial time regions are time regions that start or end outside of the current range of the timeline.
         */
        "partial"?: 'none' | 'start' | 'end' | 'ongoing';
        /**
          * Visually displays the selected state
         */
        "selected"?: boolean;
        /**
          * The start date. Must be an ISO string "2021-02-02T05:00:00Z".
         */
        "start"?: string;
        /**
          * Short hand attribute for displaying a Status icon and appropriate border color.
         */
        "status"?: Status;
        "timezone"?: string;
    }
    interface RuxTimeline {
        /**
          * The timeline's end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end"?: string;
        /**
          * The timeline's date time interval
         */
        "interval"?: 'hour' | 'day';
        /**
          * The timeline's playhead date time. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "playhead"?: string;
        /**
          * The timeline's start date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "start"?: string;
        /**
          * Controls the timezone that the timeline is localized to. Must be an IANA time zone name ("America/New_York") or an offset string.
         */
        "timezone"?: string;
        /**
          * The timeline's zoom level.
         */
        "zoom"?: number;
    }
    interface RuxTooltip {
        /**
          * How long it takes the tooltip to appear in milliseconds, default = 800, Overrides the css custom property --delay.
         */
        "delay"?: number;
        /**
          * Turns disableAutoUpdate on or off which makes the tooltip move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate"?: boolean;
        /**
          * The tooltip's content.
         */
        "message"?: string;
        /**
          * Pixel offset from trigger, default = 8
         */
        "offset"?: number;
        /**
          * Emits when the tooltip has closed.
         */
        "onRuxtooltipclosed"?: (event: RuxTooltipCustomEvent<any>) => void;
        /**
          * Emits when the tooltip has opened
         */
        "onRuxtooltipopened"?: (event: RuxTooltipCustomEvent<any>) => void;
        /**
          * Whether or not the tooltip is open
         */
        "open"?: boolean;
        /**
          * The placement of the tooltip relative to it's slotted trigger element. Defaults to auto.
         */
        "placement"?: ExtendedPlacement;
        /**
          * The position strategy of the tooltip, either absolute or fixed.
         */
        "strategy"?: 'absolute' | 'fixed';
    }
    interface RuxTrack {
        "columns"?: number;
        "end"?: string;
        "interval"?: any;
        "start"?: string;
        "timezone"?: string;
        "width"?: number;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded"?: boolean;
        /**
          * Fires when the user collapses a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodecollapsed"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Fires when the user expands a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodeexpanded"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Fires when the user selects a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodeselected"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Sets the selected state
         */
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "rux-accordion": RuxAccordion;
        "rux-accordion-item": RuxAccordionItem;
        "rux-breadcrumb": RuxBreadcrumb;
        "rux-breadcrumb-item": RuxBreadcrumbItem;
        "rux-button": RuxButton;
        "rux-button-group": RuxButtonGroup;
        "rux-card": RuxCard;
        "rux-checkbox": RuxCheckbox;
        "rux-checkbox-group": RuxCheckboxGroup;
        "rux-classification-marking": RuxClassificationMarking;
        "rux-clock": RuxClock;
        "rux-container": RuxContainer;
        "rux-datetime": RuxDatetime;
        "rux-dialog": RuxDialog;
        "rux-global-status-bar": RuxGlobalStatusBar;
        "rux-icon": RuxIcon;
        "rux-indeterminate-progress": RuxIndeterminateProgress;
        "rux-input": RuxInput;
        "rux-log": RuxLog;
        "rux-menu": RuxMenu;
        "rux-menu-item": RuxMenuItem;
        "rux-menu-item-divider": RuxMenuItemDivider;
        "rux-monitoring-icon": RuxMonitoringIcon;
        "rux-monitoring-progress-icon": RuxMonitoringProgressIcon;
        "rux-notification": RuxNotification;
        "rux-option": RuxOption;
        "rux-option-group": RuxOptionGroup;
        "rux-pop-up": RuxPopUp;
        "rux-progress": RuxProgress;
        "rux-push-button": RuxPushButton;
        "rux-radio": RuxRadio;
        "rux-radio-group": RuxRadioGroup;
        "rux-ruler": RuxRuler;
        "rux-segmented-button": RuxSegmentedButton;
        "rux-select": RuxSelect;
        "rux-slider": RuxSlider;
        "rux-status": RuxStatus;
        "rux-switch": RuxSwitch;
        "rux-tab": RuxTab;
        "rux-tab-panel": RuxTabPanel;
        "rux-tab-panels": RuxTabPanels;
        "rux-table": RuxTable;
        "rux-table-body": RuxTableBody;
        "rux-table-cell": RuxTableCell;
        "rux-table-header": RuxTableHeader;
        "rux-table-header-cell": RuxTableHeaderCell;
        "rux-table-header-row": RuxTableHeaderRow;
        "rux-table-row": RuxTableRow;
        "rux-tabs": RuxTabs;
        "rux-tag": RuxTag;
        "rux-textarea": RuxTextarea;
        "rux-time-region": RuxTimeRegion;
        "rux-timeline": RuxTimeline;
        "rux-tooltip": RuxTooltip;
        "rux-track": RuxTrack;
        "rux-tree": RuxTree;
        "rux-tree-node": RuxTreeNode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rux-accordion": LocalJSX.RuxAccordion & JSXBase.HTMLAttributes<HTMLRuxAccordionElement>;
            "rux-accordion-item": LocalJSX.RuxAccordionItem & JSXBase.HTMLAttributes<HTMLRuxAccordionItemElement>;
            "rux-breadcrumb": LocalJSX.RuxBreadcrumb & JSXBase.HTMLAttributes<HTMLRuxBreadcrumbElement>;
            "rux-breadcrumb-item": LocalJSX.RuxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLRuxBreadcrumbItemElement>;
            "rux-button": LocalJSX.RuxButton & JSXBase.HTMLAttributes<HTMLRuxButtonElement>;
            "rux-button-group": LocalJSX.RuxButtonGroup & JSXBase.HTMLAttributes<HTMLRuxButtonGroupElement>;
            "rux-card": LocalJSX.RuxCard & JSXBase.HTMLAttributes<HTMLRuxCardElement>;
            "rux-checkbox": LocalJSX.RuxCheckbox & JSXBase.HTMLAttributes<HTMLRuxCheckboxElement>;
            "rux-checkbox-group": LocalJSX.RuxCheckboxGroup & JSXBase.HTMLAttributes<HTMLRuxCheckboxGroupElement>;
            "rux-classification-marking": LocalJSX.RuxClassificationMarking & JSXBase.HTMLAttributes<HTMLRuxClassificationMarkingElement>;
            "rux-clock": LocalJSX.RuxClock & JSXBase.HTMLAttributes<HTMLRuxClockElement>;
            "rux-container": LocalJSX.RuxContainer & JSXBase.HTMLAttributes<HTMLRuxContainerElement>;
            "rux-datetime": LocalJSX.RuxDatetime & JSXBase.HTMLAttributes<HTMLRuxDatetimeElement>;
            "rux-dialog": LocalJSX.RuxDialog & JSXBase.HTMLAttributes<HTMLRuxDialogElement>;
            "rux-global-status-bar": LocalJSX.RuxGlobalStatusBar & JSXBase.HTMLAttributes<HTMLRuxGlobalStatusBarElement>;
            "rux-icon": LocalJSX.RuxIcon & JSXBase.HTMLAttributes<HTMLRuxIconElement>;
            "rux-indeterminate-progress": LocalJSX.RuxIndeterminateProgress & JSXBase.HTMLAttributes<HTMLRuxIndeterminateProgressElement>;
            "rux-input": LocalJSX.RuxInput & JSXBase.HTMLAttributes<HTMLRuxInputElement>;
            "rux-log": LocalJSX.RuxLog & JSXBase.HTMLAttributes<HTMLRuxLogElement>;
            "rux-menu": LocalJSX.RuxMenu & JSXBase.HTMLAttributes<HTMLRuxMenuElement>;
            "rux-menu-item": LocalJSX.RuxMenuItem & JSXBase.HTMLAttributes<HTMLRuxMenuItemElement>;
            "rux-menu-item-divider": LocalJSX.RuxMenuItemDivider & JSXBase.HTMLAttributes<HTMLRuxMenuItemDividerElement>;
            "rux-monitoring-icon": LocalJSX.RuxMonitoringIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringIconElement>;
            "rux-monitoring-progress-icon": LocalJSX.RuxMonitoringProgressIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringProgressIconElement>;
            "rux-notification": LocalJSX.RuxNotification & JSXBase.HTMLAttributes<HTMLRuxNotificationElement>;
            "rux-option": LocalJSX.RuxOption & JSXBase.HTMLAttributes<HTMLRuxOptionElement>;
            "rux-option-group": LocalJSX.RuxOptionGroup & JSXBase.HTMLAttributes<HTMLRuxOptionGroupElement>;
            "rux-pop-up": LocalJSX.RuxPopUp & JSXBase.HTMLAttributes<HTMLRuxPopUpElement>;
            "rux-progress": LocalJSX.RuxProgress & JSXBase.HTMLAttributes<HTMLRuxProgressElement>;
            "rux-push-button": LocalJSX.RuxPushButton & JSXBase.HTMLAttributes<HTMLRuxPushButtonElement>;
            "rux-radio": LocalJSX.RuxRadio & JSXBase.HTMLAttributes<HTMLRuxRadioElement>;
            "rux-radio-group": LocalJSX.RuxRadioGroup & JSXBase.HTMLAttributes<HTMLRuxRadioGroupElement>;
            "rux-ruler": LocalJSX.RuxRuler & JSXBase.HTMLAttributes<HTMLRuxRulerElement>;
            "rux-segmented-button": LocalJSX.RuxSegmentedButton & JSXBase.HTMLAttributes<HTMLRuxSegmentedButtonElement>;
            "rux-select": LocalJSX.RuxSelect & JSXBase.HTMLAttributes<HTMLRuxSelectElement>;
            "rux-slider": LocalJSX.RuxSlider & JSXBase.HTMLAttributes<HTMLRuxSliderElement>;
            "rux-status": LocalJSX.RuxStatus & JSXBase.HTMLAttributes<HTMLRuxStatusElement>;
            "rux-switch": LocalJSX.RuxSwitch & JSXBase.HTMLAttributes<HTMLRuxSwitchElement>;
            "rux-tab": LocalJSX.RuxTab & JSXBase.HTMLAttributes<HTMLRuxTabElement>;
            "rux-tab-panel": LocalJSX.RuxTabPanel & JSXBase.HTMLAttributes<HTMLRuxTabPanelElement>;
            "rux-tab-panels": LocalJSX.RuxTabPanels & JSXBase.HTMLAttributes<HTMLRuxTabPanelsElement>;
            "rux-table": LocalJSX.RuxTable & JSXBase.HTMLAttributes<HTMLRuxTableElement>;
            "rux-table-body": LocalJSX.RuxTableBody & JSXBase.HTMLAttributes<HTMLRuxTableBodyElement>;
            "rux-table-cell": LocalJSX.RuxTableCell & JSXBase.HTMLAttributes<HTMLRuxTableCellElement>;
            "rux-table-header": LocalJSX.RuxTableHeader & JSXBase.HTMLAttributes<HTMLRuxTableHeaderElement>;
            "rux-table-header-cell": LocalJSX.RuxTableHeaderCell & JSXBase.HTMLAttributes<HTMLRuxTableHeaderCellElement>;
            "rux-table-header-row": LocalJSX.RuxTableHeaderRow & JSXBase.HTMLAttributes<HTMLRuxTableHeaderRowElement>;
            "rux-table-row": LocalJSX.RuxTableRow & JSXBase.HTMLAttributes<HTMLRuxTableRowElement>;
            "rux-tabs": LocalJSX.RuxTabs & JSXBase.HTMLAttributes<HTMLRuxTabsElement>;
            "rux-tag": LocalJSX.RuxTag & JSXBase.HTMLAttributes<HTMLRuxTagElement>;
            "rux-textarea": LocalJSX.RuxTextarea & JSXBase.HTMLAttributes<HTMLRuxTextareaElement>;
            "rux-time-region": LocalJSX.RuxTimeRegion & JSXBase.HTMLAttributes<HTMLRuxTimeRegionElement>;
            "rux-timeline": LocalJSX.RuxTimeline & JSXBase.HTMLAttributes<HTMLRuxTimelineElement>;
            "rux-tooltip": LocalJSX.RuxTooltip & JSXBase.HTMLAttributes<HTMLRuxTooltipElement>;
            "rux-track": LocalJSX.RuxTrack & JSXBase.HTMLAttributes<HTMLRuxTrackElement>;
            "rux-tree": LocalJSX.RuxTree & JSXBase.HTMLAttributes<HTMLRuxTreeElement>;
            "rux-tree-node": LocalJSX.RuxTreeNode & JSXBase.HTMLAttributes<HTMLRuxTreeNodeElement>;
        }
    }
}
