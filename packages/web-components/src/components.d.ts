/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Classification, ExtendedPlacement, Status, StatusTags } from "./common/commonTypes.module";
import { LogRow } from "./components/rux-log/rux-log.model";
import { RangeItem } from "./components/rux-monitoring-progress-icon/rux-monitoring-progress-icon";
import { SegmentedButton } from "./components/rux-segmented-button/rux-segmented-button.model";
export namespace Components {
    interface RuxAccordion {
        /**
          * If present, sets a disabled state on the accordion, indicating that no part of it can be manipulated by user action.
         */
        "disabled": boolean;
        /**
          * ***** toggles disallow muiltiple - default false ********
         */
        "disallowMultiple": boolean;
    }
    interface RuxAccordionItem {
        /**
          * If present, sets a disabled state on this accordion item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, sets the initial state on this accordion item to open, displaying the accordion content.
         */
        "expanded": boolean;
    }
    interface RuxBreadcrumb {
    }
    interface RuxBreadcrumbItem {
        /**
          * The href property of the breadcrumb item link
         */
        "href"?: string;
    }
    interface RuxButton {
        /**
          * Changes button style from solid to borderless by setting the rux-button--borderless class
         */
        "borderless": boolean;
        /**
          * Toggles disabled attribute on the button
         */
        "disabled": boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * Changes button style from solid to secondary by setting the rux-button--secondary class
         */
        "secondary": boolean;
        /**
          * Changes size of a button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type. Use 'submit' to submit native form data.
         */
        "type": 'submit' | 'button';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign": 'left' | 'center' | 'right';
    }
    interface RuxCard {
    }
    interface RuxCheckbox {
        /**
          * Toggles checked state of a checkbox
         */
        "checked": boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
         */
        "indeterminate": boolean;
        /**
          * The checkbox label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name": string;
        /**
          * The checkbox value
         */
        "value": string;
    }
    interface RuxCheckboxGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Checkbox Group as invalid.
         */
        "invalid": boolean;
        /**
          * The label of the checkbox group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Marks that a selection from the checkbox group is requried.
         */
        "required": boolean;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification": Classification;
        /**
          * Allows additional text labels to be added to the marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag": boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: string;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), sets the time and date of the clock.
         */
        "dateIn"?: string;
        /**
          * Hides the day of the year.
         */
        "hideDate": boolean;
        /**
          * Hides all of the labels.
         */
        "hideLabels": boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone": boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small": boolean;
        "static": boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxContainer {
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date": Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for era
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12": boolean;
        /**
          * The locale
         */
        "locale": string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for weekday
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxDialog {
        /**
          * Allows dialog to close when clicking off it
         */
        "clickToClose": boolean;
        /**
          * Text for confirmation button
         */
        "confirmText": string;
        /**
          * Text for close button
         */
        "denyText": string;
        /**
          * Dialog header title
         */
        "header"?: string;
        /**
          * Dialog body message
         */
        "message"?: string;
        /**
          * Shows and hides dialog
         */
        "open": boolean;
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Declares what text will render and whether the app-state component will be shown in the app-meta slot
         */
        "appState"?: string;
        /**
          * Declares the color of the the app-state component background
         */
        "appStateColor"?: 'tag1' | 'tag2' | 'tag3' | 'tag4';
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the menu-icon will be shown in the left-side slot
         */
        "includeIcon": boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon": string;
        /**
          * Declares what text will render and whether the username component will be shown in the app-meta slot
         */
        "username"?: string;
    }
    interface RuxIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIndeterminateProgress {
    }
    interface RuxInput {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Input Field as invalid.
         */
        "invalid": boolean;
        /**
          * The input label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input max attribute
         */
        "max"?: string;
        /**
          * The input min attribute
         */
        "min"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The input placeholder text
         */
        "placeholder"?: string;
        /**
          * The inputs readonly attribute
         */
        "readonly": boolean;
        /**
          * Sets the input as required
         */
        "required": boolean;
        /**
          * Control the padding around the input field
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's spellcheck attribute
         */
        "spellcheck": boolean;
        /**
          * The input step attribute
         */
        "step"?: string;
        /**
          * The input type
         */
        "type": | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'search'
        | 'password'
        | 'date'
        | 'datetime-local'
        | 'time'
        | 'tel';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data": LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxMenu {
    }
    interface RuxMenuItem {
        /**
          * sets the menu item as disabled
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * sets the menu item as selected
         */
        "selected": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * the value returned when item is selected.
         */
        "value"?: string;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon": string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications": number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status": Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max": number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min": number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress": number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Prevents the user from dismissing the notification. Hides the `actions` slot.
         */
        "hideClose": boolean;
        /**
          * Message for the notification banner.
         */
        "message": string;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open": boolean;
        /**
          * Changes the size of the banner to a small variant.
         */
        "small": boolean;
        /**
          * The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: Status;
    }
    interface RuxOption {
        /**
          * Sets the option as disabled
         */
        "disabled": boolean;
        /**
          * The option label
         */
        "label": string;
        /**
          * The option value
         */
        "value": string;
    }
    interface RuxOptionGroup {
        /**
          * The option group label
         */
        "label"?: string;
    }
    interface RuxPopUp {
        /**
          * When provided, will close the pop-up when a single selection is made.
         */
        "closeOnSelect": boolean;
        /**
          * Turns autoUpdate on or off which makes the pop-up move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * Closes the pop up and returns false.
         */
        "hide": () => Promise<false>;
        /**
          * Determines if the pop up is open or closed
         */
        "open": boolean;
        /**
          * The placement of the pop up relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the pop up and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the popup, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxProgress {
        /**
          * Hides the progress label
         */
        "hideLabel": boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max": number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked": boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * The label of the push button.
         */
        "label": string;
        /**
          * The name of the push button.
         */
        "name": string;
        /**
          * Changes size of a push button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the push button.
         */
        "value": string;
    }
    interface RuxRadio {
        /**
          * Toggles checked state of a radio
         */
        "checked": boolean;
        /**
          * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The radio label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The radio name
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * The radio value
         */
        "value": string;
    }
    interface RuxRadioGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Radio Group as invalid.
         */
        "invalid": boolean;
        /**
          * The label of the radio group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
         */
        "name": string;
        /**
          * Marks that a selection from the radio-group is requried.
         */
        "required": boolean;
        /**
          * The value of the current selected radio in the group. Changing this will also mark that radio as checked in the UI.
         */
        "value"?: any | null;
    }
    interface RuxRuler {
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data": SegmentedButton[];
        /**
          * Sets the disabled attribute.
         */
        "disabled": boolean;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected": string;
        /**
          * Changes size of segmented button from small to medium or large.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface RuxSelect {
        /**
          * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Id for the Select Input
         */
        "inputId"?: string;
        /**
          * Presentational only. Renders the Select Menu as invalid.
         */
        "invalid": boolean;
        /**
          * The select label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Id for the Label
         */
        "labelId"?: string;
        /**
          * Enables multiselect
         */
        "multiple": boolean;
        /**
          * Sets the Name of the Input Element
         */
        "name": string;
        /**
          * Sets the field as required
         */
        "required": boolean;
        /**
          * The size of rux-select
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the selected option. If multiple is true, this is an array.
         */
        "value"?: string | string[];
    }
    interface RuxSlider {
        /**
          * Shows tick marks and labels in the order provided and aligns evenly based on the length.
         */
        "axisLabels": string[];
        /**
          * Determines if the slider is disabled.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * The slider label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Max value of slider.
         */
        "max": number;
        /**
          * Min value of the slider.
         */
        "min": number;
        /**
          * Name of the Input Field for Form Submission
         */
        "name": string;
        /**
          * Step amount of slider value.
         */
        "step": number;
        /**
          * Hides labels and only shows tick marks if axis-labels is provided.
         */
        "ticksOnly": boolean;
        /**
          * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
         */
        "value": number;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Toggles checked state of a switch
         */
        "checked": boolean;
        /**
          * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The switch label. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The switch name
         */
        "name": string;
        /**
          * The switch value
         */
        "value": string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected": boolean;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small": boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected": boolean;
    }
    interface RuxTabs {
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTag {
        /**
          * Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.
         */
        "status"?: StatusTags;
    }
    interface RuxTextarea {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The  or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Textarea as invalid.
         */
        "invalid": boolean;
        /**
          * The textarea label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input maxLength attribute
         */
        "maxLength"?: string;
        /**
          * The input minLength attribute
         */
        "minLength"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The textarea placeholder text
         */
        "placeholder"?: string;
        /**
          * Sets the input as disabled
         */
        "required": boolean;
        /**
          * The input rows attribute
         */
        "rows"?: number;
        /**
          * Styles the input element size between small, medium and large. The default styling is medium.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxTimeRegion {
        /**
          * The end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * Optionally hide the bottom right timestamp.
         */
        "hideTimestamp": boolean;
        /**
          * Visually indicates a partial time regions. Partial time regions are time regions that start or end outside of the current range of the timeline.
         */
        "partial": 'none' | 'start' | 'end' | 'ongoing';
        /**
          * Visually displays the selected state
         */
        "selected": boolean;
        /**
          * The start date. Must be an ISO string "2021-02-02T05:00:00Z".
         */
        "start": string;
        /**
          * Short hand attribute for displaying a Status icon and appropriate border color.
         */
        "status"?: Status;
        "timezone": string;
    }
    interface RuxTimeline {
        /**
          * The timeline's end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * The timeline's date time interval
         */
        "interval": 'hour' | 'day';
        /**
          * The timeline's playhead date time. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "playhead"?: string;
        /**
          * The timeline's start date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "start": string;
        /**
          * Controls the timezone that the timeline is localized to. Must be an IANA time zone name ("America/New_York") or an offset string.
         */
        "timezone": string;
        /**
          * The timeline's zoom level.
         */
        "zoom": number;
    }
    interface RuxTooltip {
        /**
          * How long it takes the tooltip to appear in milliseconds, default = 800, Overrides the css custom property --delay.
         */
        "delay": number;
        /**
          * Turns disableAutoUpdate on or off which makes the tooltip move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * Closes the tooltip and returns false.
         */
        "hide": () => Promise<boolean>;
        /**
          * The tooltip's content.
         */
        "message": string;
        /**
          * Pixel offset from trigger, default = 8
         */
        "offset": number;
        /**
          * Whether or not the tooltip is open
         */
        "open": boolean;
        /**
          * The placement of the tooltip relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the tooltip and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the tooltip, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxTrack {
        "columns": number;
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
        "width": number;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded": boolean;
        /**
          * Sets the selected state
         */
        "selected": boolean;
        /**
          * Sets the expanded state
          * @param value
         */
        "setExpanded": (value: boolean) => Promise<void>;
        /**
          * Sets the selected state
          * @param value
         */
        "setSelected": (value: boolean) => Promise<void>;
    }
}
export interface RuxAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxAccordionItemElement;
}
export interface RuxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxCheckboxElement;
}
export interface RuxDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxDialogElement;
}
export interface RuxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxInputElement;
}
export interface RuxMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxMenuElement;
}
export interface RuxNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxNotificationElement;
}
export interface RuxOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionElement;
}
export interface RuxOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionGroupElement;
}
export interface RuxPopUpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPopUpElement;
}
export interface RuxPushButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPushButtonElement;
}
export interface RuxRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioElement;
}
export interface RuxRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioGroupElement;
}
export interface RuxSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSegmentedButtonElement;
}
export interface RuxSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSelectElement;
}
export interface RuxSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSliderElement;
}
export interface RuxSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSwitchElement;
}
export interface RuxTabPanelsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabPanelsElement;
}
export interface RuxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabsElement;
}
export interface RuxTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTextareaElement;
}
export interface RuxTimeRegionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTimeRegionElement;
}
export interface RuxTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTooltipElement;
}
export interface RuxTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTreeNodeElement;
}
declare global {
    interface HTMLRuxAccordionElement extends Components.RuxAccordion, HTMLStencilElement {
    }
    var HTMLRuxAccordionElement: {
        prototype: HTMLRuxAccordionElement;
        new (): HTMLRuxAccordionElement;
    };
    interface HTMLRuxAccordionItemElement extends Components.RuxAccordionItem, HTMLStencilElement {
    }
    var HTMLRuxAccordionItemElement: {
        prototype: HTMLRuxAccordionItemElement;
        new (): HTMLRuxAccordionItemElement;
    };
    interface HTMLRuxButtonElement extends Components.RuxButton, HTMLStencilElement {
    }
    var HTMLRuxButtonElement: {
        prototype: HTMLRuxButtonElement;
        new (): HTMLRuxButtonElement;
    };
    interface HTMLRuxButtonGroupElement extends Components.RuxButtonGroup, HTMLStencilElement {
    }
    var HTMLRuxButtonGroupElement: {
        prototype: HTMLRuxButtonGroupElement;
        new (): HTMLRuxButtonGroupElement;
    };
    interface HTMLRuxCardElement extends Components.RuxCard, HTMLStencilElement {
    }
    interface RuxIconCallMade {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMerge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMissed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMissedOutgoing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallReceived {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallSplit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallToAction {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraEnhance {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraFront {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraRear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraRoll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCancel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCancelPresentation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardGiftcard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardMembership {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardTravel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCasino {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCast {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCastConnected {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCastForEducation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCategory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCellWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCenterFocusStrong {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCenterFocusWeak {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChangeHistory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChatBubble {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChatBubbleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckBoxOutlineBlank {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChevronLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChevronRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChildCare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChildFriendly {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChromeReaderMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClass {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClearAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClose {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClosedCaption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloud {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudDone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudDownload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudUpload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCollections {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCollectionsBookmark {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconColorLens {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconColorize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCommute {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompareArrows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompassCalibration {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconComputer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconConfirmationNumber {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactMail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactSupport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContacts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlPoint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlPointDuplicate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCopyright {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreateNewFolder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreditCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop169 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop32 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop54 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop75 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropDin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropFree {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropOriginal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropRotate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropSquare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDashboard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDataUsage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDateRange {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDehaze {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDelete {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteForever {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteSweep {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDepartureBoard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDescription {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopAccessDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopWindows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDetails {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeveloperBoard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeveloperMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeviceHub {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeviceUnknown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDevices {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDevicesOther {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDialerSip {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDialpad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirections {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBike {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBoat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsCar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsRailway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsRun {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsSubway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsTransit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsWalk {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDiscFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDns {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDomain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDomainDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDoneAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDoneOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDonutLarge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDonutSmall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDrafts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDragHandle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDragIndicator {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDriveEta {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDuo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDvr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEdit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEditAttributes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEditLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEject {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEmail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEnhancedEncryption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEqualizer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEquipment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconError {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconErrorOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEuroSymbol {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEvStation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEvent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventAvailable {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventBusy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExitToApp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExpandLess {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExpandMore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExplicit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExplore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExploreOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposure {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureNeg1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureNeg2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposurePlus1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposurePlus2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureZero {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExtension {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastRewind {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastfood {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFavorite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFavoriteBorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeaturedPlayList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeaturedVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeedback {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberDvr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberManualRecord {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberPin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberSmartRecord {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFileCopy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter4 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter6 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter7 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter8 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter9 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter9Plus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterBAndW {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterCenterFocus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterDrama {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterFrames {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterHdr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterTiltShift {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterVintage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFindInPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFindReplace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFingerprint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFirstPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFitnessCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlag {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashAuto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlightLand {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlightTakeoff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlip {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlipToBack {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlipToFront {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderOpen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderShared {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderSpecial {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFontDownload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignJustify {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatBold {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorFill {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorReset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorText {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatIndentDecrease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatIndentIncrease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatItalic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatLineSpacing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListBulleted {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListNumbered {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListNumberedRtl {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatPaint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatQuote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatShapes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatSize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatStrikethrough {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatTextdirectionLToR {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatTextdirectionRToL {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatUnderlined {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForum {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward10 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFreeBreakfast {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFullscreen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFullscreenExit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFunctions {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGTranslate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGamepad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGames {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGavel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGesture {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGetApp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGif {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGolfCourse {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsFixed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsNotFixed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGrade {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGradient {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGrain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGraphicEq {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGridOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGridOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroupAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroupWork {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHardware {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrStrong {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrWeak {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHeadset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHeadsetMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHealing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHearing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHelp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHelpOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighQuality {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighlight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighlightOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHistory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHome {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHorizontalSplit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHotTub {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHotel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHourglassEmpty {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHourglassFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHowToReg {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHowToVote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHttp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHttps {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImageAspectRatio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImageSearch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportContacts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportExport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportantDevices {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconIndeterminateCheckBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInfo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInput {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertChartOutlined {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertDriveFile {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertEmoticon {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertInvitation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertLink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInvertColors {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInvertColorsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconIso {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardBackspace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardCapslock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardHide {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardReturn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardTab {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardVoice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKitchen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabelImportant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabelOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLanguage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopChromebook {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopWindows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLastPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaunch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLayers {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLayersClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLeakAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLeakRemove {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLens {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryBooks {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryMusic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLineStyle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLineWeight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinearScale {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinkOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinkedCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconListAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLiveHelp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLiveTv {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalActivity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalAirport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalAtm {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalBar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalCafe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalCarWash {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalConvenienceStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalDining {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalDrink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalGasStation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalGroceryStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalHospital {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalHotel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalLaundryService {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalLibrary {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalMall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalMovies {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalOffer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalParking {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPharmacy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPostOffice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPrintshop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalSee {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalShipping {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalTaxi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationCity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationSearching {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLockOpen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks4 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks6 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoupe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLowPriority {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoyalty {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMailOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMap {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMarkunread {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMarkunreadMailbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMaximize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMeetingRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMemory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMenu {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMergeType {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMessage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMicNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMicOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMinimize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMissedVideoCall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMission {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileFriendly {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconModeComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMonetizationOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoney {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoneyOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMonochromePhotos {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMood {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoodBad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoreHoriz {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoreVert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMotorcycle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMouse {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoveToInbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovie {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovieCreation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovieFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMultilineChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMyLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNature {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNaturePeople {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigateBefore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigateNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNearMe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetcom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkCell {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkLocked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNewReleases {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNextWeek {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNfc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoEncryption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoMeetingRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoSim {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotInterested {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotListedLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoteAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationImportant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotifications {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsActive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsPaused {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOfflineBolt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOfflinePin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOndemandVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpacity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenInBrowser {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenInNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenWith {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOutlinedFlag {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPages {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPageview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPalette {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanTool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanorama {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaFishEye {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaHorizontal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaVertical {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaWideAngle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPartyMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPause {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPauseCircleFilled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPauseCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPausePresentation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPayload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPayment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPeopleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermCameraMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermContactCalendar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermDataSetting {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermDeviceInformation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermIdentity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermMedia {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermPhoneMsg {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermScanWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPerson {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonAddDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonPin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonPinCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonalVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPets {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneAndroid {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneBluetoothSpeaker {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneCallback {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneForwarded {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneInTalk {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneIphone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneLocked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneMissed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonePaused {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkErase {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkRing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkSetup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoAlbum {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoLibrary {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectActual {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectLarge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectSmall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureAsPdf {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureInPicture {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureInPictureAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPieChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPinDrop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayArrow {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleFilled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleFilledWhite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayForWork {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistAddCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlusOne {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPoll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPortableWifiOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerInput {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerSettingsNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPregnantWoman {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPresentToAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPrint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPrintDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPriorityHigh {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconProcessor {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconProcessorAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPropulsionPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPublic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPublish {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueryBuilder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQuestionAnswer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueueMusic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueuePlayNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadioButtonChecked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadioButtonUnchecked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRateReview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReceipt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRecentActors {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRecordVoiceOver {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRedeem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRedo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRefresh {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRelease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemove {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveFromQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveRedEye {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveShoppingCart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRepeat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRepeatOne {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay10 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReply {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplyAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReportOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReportProblem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestaurant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestaurantMenu {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestoreFromTrash {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestorePage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRingVolume {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoomService {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotate90DegreesCc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotateLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotateRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoundedCorner {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRouter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRowing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRssFeed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRvHookup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatellite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteReceive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteTransmit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSave {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSaveAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScanner {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScatterPlot {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSchedule {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSchool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockRotation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenRotation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSdCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSdStorage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSearch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSeat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSecurity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSelectAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSend {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentDissatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentSatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentSatisfiedAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentVeryDissatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentVerySatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSetPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettings {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsApplications {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBackupRestore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBluetooth {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBrightness {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsCell {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsEthernet {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputAntenna {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputComponent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputComposite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputHdmi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputSvideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsOverscan {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsRemote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsSystemDaydream {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsVoice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShopTwo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShoppingBasket {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShoppingCart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShortText {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShowChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShuffle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShutterSpeed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularNoSim {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularNull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi1BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi2BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi3BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi4BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifiOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSimCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSkipNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSkipPrevious {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSlideshow {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSlowMotionVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmartphone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmokeFree {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmokingRooms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmsFailed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSnooze {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSolar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSort {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSortByAlpha {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpa {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpaceBar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeaker {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerGroup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerNotes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerNotesOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpellcheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarBorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarHalf {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarRate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStars {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayCurrentLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayCurrentPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayPrimaryLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayPrimaryPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStopScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStorage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStoreMallDirectory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStraighten {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStreetview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStrikethroughS {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStyle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubdirectoryArrowLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubdirectoryArrowRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubject {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubscriptions {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubtitles {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSupervisedUserCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSupervisorAccount {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSurroundSound {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapCalls {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapHoriz {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapHorizontalCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapVert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapVerticalCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwitchCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwitchVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSync {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSyncDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSyncProblem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSystemUpdate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTab {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabUnselected {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTableChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTablet {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabletAndroid {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabletMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTagFaces {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTapAndPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTerrain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextFields {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextFormat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextRotateUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextRotateVertical {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextRotationNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextsms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTexture {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTheaters {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThermal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThumbDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThumbDownAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThumbUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThumbUpAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconThumbsUpDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimeToLeave {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimelapse {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimeline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimer10 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimer3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTimerOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTitle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToday {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToggleOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToggleOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTonality {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTouchApp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconToys {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTrackChanges {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTraffic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTrain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTram {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTransferWithinAStation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTransform {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTransitEnterexit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTranslate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTrendingDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTrendingFlat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTrendingUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTripOrigin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTune {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTurnedIn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTurnedInNot {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTv {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTvOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUnarchive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUndo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUnfoldLess {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUnfoldMore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUnsubscribe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUpdate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconUsb {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVerifiedUser {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVerticalAlignBottom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVerticalAlignCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVerticalAlignTop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVerticalSplit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVibration {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideoCall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideoLabel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideoLibrary {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideocam {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideocamOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVideogameAsset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewAgenda {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewArray {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewCarousel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewColumn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewComfy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewCompact {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewDay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewHeadline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewModule {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewQuilt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewStream {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconViewWeek {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVignette {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVisibility {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVisibilityOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVoiceChat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVoiceOverOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVoicemail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVolumeDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVolumeMute {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVolumeOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVolumeUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVpnKey {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconVpnLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWallpaper {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWarning {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWatch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWatchLater {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWaves {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWbAuto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWbCloudy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWbIncandescent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWbIridescent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWbSunny {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWeb {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWebAsset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWeekend {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWhatshot {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWhereToVote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWidgets {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWifiLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWifiOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWifiTethering {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWork {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWorkOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWorkOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconWrapText {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconYoutubeSearchedFor {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconZoomIn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconZoomInMap {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconZoomOut {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconZoomOutMap {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size": | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIndeterminateProgress {
    }
    interface RuxInput {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Input Field as invalid.
         */
        "invalid": boolean;
        /**
          * The input label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input max attribute
         */
        "max"?: string;
        /**
          * The input min attribute
         */
        "min"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The input placeholder text
         */
        "placeholder"?: string;
        /**
          * The inputs readonly attribute
         */
        "readonly": boolean;
        /**
          * Sets the input as required
         */
        "required": boolean;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Control the padding around the input field
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * The input's spellcheck attribute
         */
        "spellcheck": boolean;
        /**
          * The input step attribute
         */
        "step"?: string;
        /**
          * The input type
         */
        "type": | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'search'
        | 'password'
        | 'date'
        | 'datetime-local'
        | 'time'
        | 'tel';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data": LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone": string;
    }
    interface RuxMenu {
    }
    interface RuxMenuItem {
        /**
          * sets the menu item as disabled
         */
        "disabled": boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download": string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * sets the menu item as selected
         */
        "selected": boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * the value returned when item is selected.
         */
        "value"?: string;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon": string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications": number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status": Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max": number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min": number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress": number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Prevents the user from dismissing the notification. Hides the `actions` slot.
         */
        "hideClose": boolean;
        /**
          * Message for the notification banner.
         */
        "message": string;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open": boolean;
        /**
          * Changes the size of the banner to a small variant.
         */
        "small": boolean;
        /**
          * The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: Status;
    }
    interface RuxOption {
        /**
          * Sets the option as disabled
         */
        "disabled": boolean;
        /**
          * The option label
         */
        "label": string;
        /**
          * The option value
         */
        "value": string;
    }
    interface RuxOptionGroup {
        /**
          * The option group label
         */
        "label"?: string;
    }
    interface RuxPopUp {
        /**
          * When provided, will close the pop-up when a single selection is made.
         */
        "closeOnSelect": boolean;
        /**
          * Turns autoUpdate on or off which makes the pop-up move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * watches for trigger movements and replace the popup if movement is detected.
         */
        "enableAnimationFrame": boolean;
        /**
          * Closes the pop up and returns false.
         */
        "hide": () => Promise<false>;
        /**
          * Determines if the pop up is open or closed
         */
        "open": boolean;
        /**
          * The placement of the pop up relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the pop up and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the popup, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxProgress {
        /**
          * Hides the progress label
         */
        "hideLabel": boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max": number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked": boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly": boolean;
        /**
          * The label of the push button.
         */
        "label": string;
        /**
          * The name of the push button.
         */
        "name": string;
        /**
          * Changes size of a push button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the push button.
         */
        "value": string;
    }
    interface RuxRadio {
        /**
          * Toggles checked state of a radio
         */
        "checked": boolean;
        /**
          * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The radio label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The radio name
         */
        "name": string;
        "setButtonTabindex": (value: number) => Promise<void>;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * The radio value
         */
        "value": string;
    }
    interface RuxRadioGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Radio Group as invalid.
         */
        "invalid": boolean;
        /**
          * The label of the radio group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
         */
        "name": string;
        /**
          * Marks that a selection from the radio-group is requried.
         */
        "required": boolean;
        /**
          * The value of the current selected radio in the group. Changing this will also mark that radio as checked in the UI.
         */
        "value"?: any | null;
    }
    interface RuxRuler {
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data": SegmentedButton[];
        /**
          * Sets the disabled attribute.
         */
        "disabled": boolean;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected": string;
        /**
          * Changes size of segmented button from small to medium or large.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface RuxSelect {
        /**
          * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Id for the Select Input
         */
        "inputId"?: string;
        /**
          * Presentational only. Renders the Select Menu as invalid.
         */
        "invalid": boolean;
        /**
          * The select label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Id for the Label
         */
        "labelId"?: string;
        /**
          * Enables multiselect
         */
        "multiple": boolean;
        /**
          * Sets the Name of the Input Element
         */
        "name": string;
        /**
          * Sets the field as required
         */
        "required": boolean;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The size of rux-select
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the selected option. If multiple is true, this is an array.
         */
        "value"?: string | string[];
    }
    interface RuxSlider {
        /**
          * Shows tick marks and labels in the order provided and aligns evenly based on the length.
         */
        "axisLabels": string[];
        /**
          * Determines if the slider is disabled.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * The slider label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Max value of slider.
         */
        "max": number;
        /**
          * Min value of the slider.
         */
        "min": number;
        /**
          * Name of the Input Field for Form Submission
         */
        "name": string;
        /**
          * Step amount of slider value.
         */
        "step": number;
        /**
          * Hides labels and only shows tick marks if axis-labels is provided.
         */
        "ticksOnly": boolean;
        /**
          * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
         */
        "value": number;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Toggles checked state of a switch
         */
        "checked": boolean;
        /**
          * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The switch label. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The switch name
         */
        "name": string;
        /**
          * The switch value
         */
        "value": string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled": boolean;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected": boolean;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small": boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected": boolean;
    }
    interface RuxTabs {
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTag {
        /**
          * Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.
         */
        "status"?: StatusTags;
    }
    interface RuxTextarea {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled": boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The  or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Textarea as invalid.
         */
        "invalid": boolean;
        /**
          * The textarea label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input maxLength attribute
         */
        "maxLength"?: string;
        /**
          * The input minLength attribute
         */
        "minLength"?: string;
        /**
          * The input name
         */
        "name": string;
        /**
          * The textarea placeholder text
         */
        "placeholder"?: string;
        /**
          * Sets the input as disabled
         */
        "required": boolean;
        /**
          * The input rows attribute
         */
        "rows"?: number;
        /**
          * Sets element as focused
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Styles the input element size between small, medium and large. The default styling is medium.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input value
         */
        "value": string;
    }
    interface RuxTimeRegion {
        /**
          * The end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * Optionally hide the bottom right timestamp.
         */
        "hideTimestamp": boolean;
        /**
          * Visually indicates a partial time regions. Partial time regions are time regions that start or end outside of the current range of the timeline.
         */
        "partial": 'none' | 'start' | 'end' | 'ongoing';
        /**
          * Visually displays the selected state
         */
        "selected": boolean;
        /**
          * The start date. Must be an ISO string "2021-02-02T05:00:00Z".
         */
        "start": string;
        /**
          * Short hand attribute for displaying a Status icon and appropriate border color.
         */
        "status"?: Status;
        "timezone": string;
    }
    interface RuxTimeline {
        /**
          * The timeline's end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end": string;
        /**
          * The timeline's date time interval
         */
        "interval": 'hour' | 'day';
        /**
          * The timeline's playhead date time. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "playhead"?: string;
        /**
          * The timeline's start date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "start": string;
        /**
          * Controls the timezone that the timeline is localized to. Must be an IANA time zone name ("America/New_York") or an offset string.
         */
        "timezone": string;
        /**
          * The timeline's zoom level.
         */
        "zoom": number;
    }
    interface RuxTooltip {
        /**
          * How long it takes the tooltip to appear in milliseconds, default = 800, Overrides the css custom property --delay.
         */
        "delay": number;
        /**
          * Turns disableAutoUpdate on or off which makes the tooltip move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate": boolean;
        /**
          * Closes the tooltip and returns false.
         */
        "hide": () => Promise<boolean>;
        /**
          * The tooltip's content.
         */
        "message": string;
        /**
          * Pixel offset from trigger, default = 8
         */
        "offset": number;
        /**
          * Whether or not the tooltip is open
         */
        "open": boolean;
        /**
          * The placement of the tooltip relative to it's slotted trigger element. Defaults to auto.
         */
        "placement": ExtendedPlacement;
        /**
          * Opens the tooltip and returns true.
         */
        "show": () => Promise<true>;
        /**
          * The position strategy of the tooltip, either absolute or fixed.
         */
        "strategy": 'absolute' | 'fixed';
    }
    interface RuxTrack {
        "columns": number;
        "end": string;
        "interval": any;
        "start": string;
        "timezone": string;
        "width": number;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded": boolean;
        /**
          * Sets the selected state
         */
        "selected": boolean;
        /**
          * Sets the expanded state
          * @param value
         */
        "setExpanded": (value: boolean) => Promise<void>;
        /**
          * Sets the selected state
          * @param value
         */
        "setSelected": (value: boolean) => Promise<void>;
    }
}
export interface RuxAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxAccordionItemElement;
}
export interface RuxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxCheckboxElement;
}
export interface RuxDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxDialogElement;
}
export interface RuxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxInputElement;
}
export interface RuxMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxMenuElement;
}
export interface RuxNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxNotificationElement;
}
export interface RuxOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionElement;
}
export interface RuxOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxOptionGroupElement;
}
export interface RuxPopUpCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPopUpElement;
}
export interface RuxPushButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxPushButtonElement;
}
export interface RuxRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioElement;
}
export interface RuxRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxRadioGroupElement;
}
export interface RuxSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSegmentedButtonElement;
}
export interface RuxSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSelectElement;
}
export interface RuxSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSliderElement;
}
export interface RuxSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxSwitchElement;
}
export interface RuxTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabElement;
}
export interface RuxTabPanelsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabPanelsElement;
}
export interface RuxTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTabsElement;
}
export interface RuxTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTextareaElement;
}
export interface RuxTimeRegionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTimeRegionElement;
}
export interface RuxTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTooltipElement;
}
export interface RuxTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRuxTreeNodeElement;
}
declare global {
    interface HTMLRuxAccordionElement extends Components.RuxAccordion, HTMLStencilElement {
    }
    var HTMLRuxAccordionElement: {
        prototype: HTMLRuxAccordionElement;
        new (): HTMLRuxAccordionElement;
    };
    interface HTMLRuxAccordionItemElement extends Components.RuxAccordionItem, HTMLStencilElement {
    }
    var HTMLRuxAccordionItemElement: {
        prototype: HTMLRuxAccordionItemElement;
        new (): HTMLRuxAccordionItemElement;
    };
    interface HTMLRuxBreadcrumbElement extends Components.RuxBreadcrumb, HTMLStencilElement {
    }
    var HTMLRuxBreadcrumbElement: {
        prototype: HTMLRuxBreadcrumbElement;
        new (): HTMLRuxBreadcrumbElement;
    };
    interface HTMLRuxBreadcrumbItemElement extends Components.RuxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLRuxBreadcrumbItemElement: {
        prototype: HTMLRuxBreadcrumbItemElement;
        new (): HTMLRuxBreadcrumbItemElement;
    };
    interface HTMLRuxButtonElement extends Components.RuxButton, HTMLStencilElement {
    }
    var HTMLRuxButtonElement: {
        prototype: HTMLRuxButtonElement;
        new (): HTMLRuxButtonElement;
    };
    interface HTMLRuxButtonGroupElement extends Components.RuxButtonGroup, HTMLStencilElement {
    }
    var HTMLRuxButtonGroupElement: {
        prototype: HTMLRuxButtonGroupElement;
        new (): HTMLRuxButtonGroupElement;
    };
    interface HTMLRuxCardElement extends Components.RuxCard, HTMLStencilElement {
    }
    var HTMLRuxCardElement: {
        prototype: HTMLRuxCardElement;
        new (): HTMLRuxCardElement;
    };
    interface HTMLRuxCheckboxElement extends Components.RuxCheckbox, HTMLStencilElement {
    }
    var HTMLRuxCheckboxElement: {
        prototype: HTMLRuxCheckboxElement;
        new (): HTMLRuxCheckboxElement;
    };
    interface HTMLRuxCheckboxGroupElement extends Components.RuxCheckboxGroup, HTMLStencilElement {
    }
    var HTMLRuxCheckboxGroupElement: {
        prototype: HTMLRuxCheckboxGroupElement;
        new (): HTMLRuxCheckboxGroupElement;
    };
    interface HTMLRuxClassificationMarkingElement extends Components.RuxClassificationMarking, HTMLStencilElement {
    }
    var HTMLRuxClassificationMarkingElement: {
        prototype: HTMLRuxClassificationMarkingElement;
        new (): HTMLRuxClassificationMarkingElement;
    };
    interface HTMLRuxClockElement extends Components.RuxClock, HTMLStencilElement {
    }
    var HTMLRuxClockElement: {
        prototype: HTMLRuxClockElement;
        new (): HTMLRuxClockElement;
    };
    interface HTMLRuxContainerElement extends Components.RuxContainer, HTMLStencilElement {
    }
    var HTMLRuxContainerElement: {
        prototype: HTMLRuxContainerElement;
        new (): HTMLRuxContainerElement;
    };
    interface HTMLRuxDatetimeElement extends Components.RuxDatetime, HTMLStencilElement {
    }
    var HTMLRuxDatetimeElement: {
        prototype: HTMLRuxDatetimeElement;
        new (): HTMLRuxDatetimeElement;
    };
    interface HTMLRuxDialogElement extends Components.RuxDialog, HTMLStencilElement {
    }
    var HTMLRuxDialogElement: {
        prototype: HTMLRuxDialogElement;
        new (): HTMLRuxDialogElement;
    };
    interface HTMLRuxGlobalStatusBarElement extends Components.RuxGlobalStatusBar, HTMLStencilElement {
    }
    var HTMLRuxGlobalStatusBarElement: {
        prototype: HTMLRuxGlobalStatusBarElement;
        new (): HTMLRuxGlobalStatusBarElement;
    };
    interface HTMLRuxIconElement extends Components.RuxIcon, HTMLStencilElement {
    }
    var HTMLRuxIconElement: {
        prototype: HTMLRuxIconElement;
        new (): HTMLRuxIconElement;
    };
    interface HTMLRuxIcon360Element extends Components.RuxIcon360, HTMLStencilElement {
    }
    var HTMLRuxIcon360Element: {
        prototype: HTMLRuxIcon360Element;
        new (): HTMLRuxIcon360Element;
    };
    interface HTMLRuxIcon3dRotationElement extends Components.RuxIcon3dRotation, HTMLStencilElement {
    }
    var HTMLRuxIcon3dRotationElement: {
        prototype: HTMLRuxIcon3dRotationElement;
        new (): HTMLRuxIcon3dRotationElement;
    };
    interface HTMLRuxIcon4kElement extends Components.RuxIcon4k, HTMLStencilElement {
    }
    var HTMLRuxIcon4kElement: {
        prototype: HTMLRuxIcon4kElement;
        new (): HTMLRuxIcon4kElement;
    };
    interface HTMLRuxIconAcUnitElement extends Components.RuxIconAcUnit, HTMLStencilElement {
    }
    var HTMLRuxIconAcUnitElement: {
        prototype: HTMLRuxIconAcUnitElement;
        new (): HTMLRuxIconAcUnitElement;
    };
    interface HTMLRuxIconAccessAlarmsElement extends Components.RuxIconAccessAlarms, HTMLStencilElement {
    }
    var HTMLRuxIconAccessAlarmsElement: {
        prototype: HTMLRuxIconAccessAlarmsElement;
        new (): HTMLRuxIconAccessAlarmsElement;
    };
    interface HTMLRuxIconAccessTimeElement extends Components.RuxIconAccessTime, HTMLStencilElement {
    }
    var HTMLRuxIconAccessTimeElement: {
        prototype: HTMLRuxIconAccessTimeElement;
        new (): HTMLRuxIconAccessTimeElement;
    };
    interface HTMLRuxIconAccessibilityElement extends Components.RuxIconAccessibility, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibilityElement: {
        prototype: HTMLRuxIconAccessibilityElement;
        new (): HTMLRuxIconAccessibilityElement;
    };
    interface HTMLRuxIconAccessibilityNewElement extends Components.RuxIconAccessibilityNew, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibilityNewElement: {
        prototype: HTMLRuxIconAccessibilityNewElement;
        new (): HTMLRuxIconAccessibilityNewElement;
    };
    interface HTMLRuxIconAccessibleElement extends Components.RuxIconAccessible, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibleElement: {
        prototype: HTMLRuxIconAccessibleElement;
        new (): HTMLRuxIconAccessibleElement;
    };
    interface HTMLRuxIconAccessibleForwardElement extends Components.RuxIconAccessibleForward, HTMLStencilElement {
    }
    var HTMLRuxIconAccessibleForwardElement: {
        prototype: HTMLRuxIconAccessibleForwardElement;
        new (): HTMLRuxIconAccessibleForwardElement;
    };
    interface HTMLRuxIconAccountBalanceElement extends Components.RuxIconAccountBalance, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBalanceElement: {
        prototype: HTMLRuxIconAccountBalanceElement;
        new (): HTMLRuxIconAccountBalanceElement;
    };
    interface HTMLRuxIconAccountBalanceWalletElement extends Components.RuxIconAccountBalanceWallet, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBalanceWalletElement: {
        prototype: HTMLRuxIconAccountBalanceWalletElement;
        new (): HTMLRuxIconAccountBalanceWalletElement;
    };
    interface HTMLRuxIconAccountBoxElement extends Components.RuxIconAccountBox, HTMLStencilElement {
    }
    var HTMLRuxIconAccountBoxElement: {
        prototype: HTMLRuxIconAccountBoxElement;
        new (): HTMLRuxIconAccountBoxElement;
    };
    interface HTMLRuxIconAccountCircleElement extends Components.RuxIconAccountCircle, HTMLStencilElement {
    }
    var HTMLRuxIconAccountCircleElement: {
        prototype: HTMLRuxIconAccountCircleElement;
        new (): HTMLRuxIconAccountCircleElement;
    };
    interface HTMLRuxIconAdbElement extends Components.RuxIconAdb, HTMLStencilElement {
    }
    var HTMLRuxIconAdbElement: {
        prototype: HTMLRuxIconAdbElement;
        new (): HTMLRuxIconAdbElement;
    };
    interface HTMLRuxIconAddElement extends Components.RuxIconAdd, HTMLStencilElement {
    }
    var HTMLRuxIconAddElement: {
        prototype: HTMLRuxIconAddElement;
        new (): HTMLRuxIconAddElement;
    };
    interface HTMLRuxIconAddAPhotoElement extends Components.RuxIconAddAPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconAddAPhotoElement: {
        prototype: HTMLRuxIconAddAPhotoElement;
        new (): HTMLRuxIconAddAPhotoElement;
    };
    interface HTMLRuxIconAddAlarmElement extends Components.RuxIconAddAlarm, HTMLStencilElement {
    }
    var HTMLRuxIconAddAlarmElement: {
        prototype: HTMLRuxIconAddAlarmElement;
        new (): HTMLRuxIconAddAlarmElement;
    };
    interface HTMLRuxIconAddAlertElement extends Components.RuxIconAddAlert, HTMLStencilElement {
    }
    var HTMLRuxIconAddAlertElement: {
        prototype: HTMLRuxIconAddAlertElement;
        new (): HTMLRuxIconAddAlertElement;
    };
    interface HTMLRuxIconAddBoxElement extends Components.RuxIconAddBox, HTMLStencilElement {
    }
    var HTMLRuxIconAddBoxElement: {
        prototype: HTMLRuxIconAddBoxElement;
        new (): HTMLRuxIconAddBoxElement;
    };
    interface HTMLRuxIconAddCircleElement extends Components.RuxIconAddCircle, HTMLStencilElement {
    }
    var HTMLRuxIconAddCircleElement: {
        prototype: HTMLRuxIconAddCircleElement;
        new (): HTMLRuxIconAddCircleElement;
    };
    interface HTMLRuxIconAddCircleOutlineElement extends Components.RuxIconAddCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconAddCircleOutlineElement: {
        prototype: HTMLRuxIconAddCircleOutlineElement;
        new (): HTMLRuxIconAddCircleOutlineElement;
    };
    interface HTMLRuxIconAddCommentElement extends Components.RuxIconAddComment, HTMLStencilElement {
    }
    var HTMLRuxIconAddCommentElement: {
        prototype: HTMLRuxIconAddCommentElement;
        new (): HTMLRuxIconAddCommentElement;
    };
    interface HTMLRuxIconAddLocationElement extends Components.RuxIconAddLocation, HTMLStencilElement {
    }
    var HTMLRuxIconAddLocationElement: {
        prototype: HTMLRuxIconAddLocationElement;
        new (): HTMLRuxIconAddLocationElement;
    };
    interface HTMLRuxIconAddPhotoAlternateElement extends Components.RuxIconAddPhotoAlternate, HTMLStencilElement {
    }
    var HTMLRuxIconAddPhotoAlternateElement: {
        prototype: HTMLRuxIconAddPhotoAlternateElement;
        new (): HTMLRuxIconAddPhotoAlternateElement;
    };
    interface HTMLRuxIconAddShoppingCartElement extends Components.RuxIconAddShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconAddShoppingCartElement: {
        prototype: HTMLRuxIconAddShoppingCartElement;
        new (): HTMLRuxIconAddShoppingCartElement;
    };
    interface HTMLRuxIconAddToHomeScreenElement extends Components.RuxIconAddToHomeScreen, HTMLStencilElement {
    }
    var HTMLRuxIconAddToHomeScreenElement: {
        prototype: HTMLRuxIconAddToHomeScreenElement;
        new (): HTMLRuxIconAddToHomeScreenElement;
    };
    interface HTMLRuxIconAddToPhotosElement extends Components.RuxIconAddToPhotos, HTMLStencilElement {
    }
    var HTMLRuxIconAddToPhotosElement: {
        prototype: HTMLRuxIconAddToPhotosElement;
        new (): HTMLRuxIconAddToPhotosElement;
    };
    interface HTMLRuxIconAddToQueueElement extends Components.RuxIconAddToQueue, HTMLStencilElement {
    }
    var HTMLRuxIconAddToQueueElement: {
        prototype: HTMLRuxIconAddToQueueElement;
        new (): HTMLRuxIconAddToQueueElement;
    };
    interface HTMLRuxIconAdjustElement extends Components.RuxIconAdjust, HTMLStencilElement {
    }
    var HTMLRuxIconAdjustElement: {
        prototype: HTMLRuxIconAdjustElement;
        new (): HTMLRuxIconAdjustElement;
    };
    interface HTMLRuxIconAirlineSeatFlatElement extends Components.RuxIconAirlineSeatFlat, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatFlatElement: {
        prototype: HTMLRuxIconAirlineSeatFlatElement;
        new (): HTMLRuxIconAirlineSeatFlatElement;
    };
    interface HTMLRuxIconAirlineSeatFlatAngledElement extends Components.RuxIconAirlineSeatFlatAngled, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatFlatAngledElement: {
        prototype: HTMLRuxIconAirlineSeatFlatAngledElement;
        new (): HTMLRuxIconAirlineSeatFlatAngledElement;
    };
    interface HTMLRuxIconAirlineSeatIndividualSuiteElement extends Components.RuxIconAirlineSeatIndividualSuite, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatIndividualSuiteElement: {
        prototype: HTMLRuxIconAirlineSeatIndividualSuiteElement;
        new (): HTMLRuxIconAirlineSeatIndividualSuiteElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomExtraElement extends Components.RuxIconAirlineSeatLegroomExtra, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomExtraElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomExtraElement;
        new (): HTMLRuxIconAirlineSeatLegroomExtraElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomNormalElement extends Components.RuxIconAirlineSeatLegroomNormal, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomNormalElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomNormalElement;
        new (): HTMLRuxIconAirlineSeatLegroomNormalElement;
    };
    interface HTMLRuxIconAirlineSeatLegroomReducedElement extends Components.RuxIconAirlineSeatLegroomReduced, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatLegroomReducedElement: {
        prototype: HTMLRuxIconAirlineSeatLegroomReducedElement;
        new (): HTMLRuxIconAirlineSeatLegroomReducedElement;
    };
    interface HTMLRuxIconAirlineSeatReclineExtraElement extends Components.RuxIconAirlineSeatReclineExtra, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatReclineExtraElement: {
        prototype: HTMLRuxIconAirlineSeatReclineExtraElement;
        new (): HTMLRuxIconAirlineSeatReclineExtraElement;
    };
    interface HTMLRuxIconAirlineSeatReclineNormalElement extends Components.RuxIconAirlineSeatReclineNormal, HTMLStencilElement {
    }
    var HTMLRuxIconAirlineSeatReclineNormalElement: {
        prototype: HTMLRuxIconAirlineSeatReclineNormalElement;
        new (): HTMLRuxIconAirlineSeatReclineNormalElement;
    };
    interface HTMLRuxIconAirplanemodeActiveElement extends Components.RuxIconAirplanemodeActive, HTMLStencilElement {
    }
    var HTMLRuxIconAirplanemodeActiveElement: {
        prototype: HTMLRuxIconAirplanemodeActiveElement;
        new (): HTMLRuxIconAirplanemodeActiveElement;
    };
    interface HTMLRuxIconAirplanemodeInactiveElement extends Components.RuxIconAirplanemodeInactive, HTMLStencilElement {
    }
    var HTMLRuxIconAirplanemodeInactiveElement: {
        prototype: HTMLRuxIconAirplanemodeInactiveElement;
        new (): HTMLRuxIconAirplanemodeInactiveElement;
    };
    interface HTMLRuxIconAirplayElement extends Components.RuxIconAirplay, HTMLStencilElement {
    }
    var HTMLRuxIconAirplayElement: {
        prototype: HTMLRuxIconAirplayElement;
        new (): HTMLRuxIconAirplayElement;
    };
    interface HTMLRuxIconAirportShuttleElement extends Components.RuxIconAirportShuttle, HTMLStencilElement {
    }
    var HTMLRuxIconAirportShuttleElement: {
        prototype: HTMLRuxIconAirportShuttleElement;
        new (): HTMLRuxIconAirportShuttleElement;
    };
    interface HTMLRuxIconAlarmElement extends Components.RuxIconAlarm, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmElement: {
        prototype: HTMLRuxIconAlarmElement;
        new (): HTMLRuxIconAlarmElement;
    };
    interface HTMLRuxIconAlarmAddElement extends Components.RuxIconAlarmAdd, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmAddElement: {
        prototype: HTMLRuxIconAlarmAddElement;
        new (): HTMLRuxIconAlarmAddElement;
    };
    interface HTMLRuxIconAlarmOffElement extends Components.RuxIconAlarmOff, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmOffElement: {
        prototype: HTMLRuxIconAlarmOffElement;
        new (): HTMLRuxIconAlarmOffElement;
    };
    interface HTMLRuxIconAlarmOnElement extends Components.RuxIconAlarmOn, HTMLStencilElement {
    }
    var HTMLRuxIconAlarmOnElement: {
        prototype: HTMLRuxIconAlarmOnElement;
        new (): HTMLRuxIconAlarmOnElement;
    };
    interface HTMLRuxIconAlbumElement extends Components.RuxIconAlbum, HTMLStencilElement {
    }
    var HTMLRuxIconAlbumElement: {
        prototype: HTMLRuxIconAlbumElement;
        new (): HTMLRuxIconAlbumElement;
    };
    interface HTMLRuxIconAllInboxElement extends Components.RuxIconAllInbox, HTMLStencilElement {
    }
    var HTMLRuxIconAllInboxElement: {
        prototype: HTMLRuxIconAllInboxElement;
        new (): HTMLRuxIconAllInboxElement;
    };
    interface HTMLRuxIconAllInclusiveElement extends Components.RuxIconAllInclusive, HTMLStencilElement {
    }
    var HTMLRuxIconAllInclusiveElement: {
        prototype: HTMLRuxIconAllInclusiveElement;
        new (): HTMLRuxIconAllInclusiveElement;
    };
    interface HTMLRuxIconAllOutElement extends Components.RuxIconAllOut, HTMLStencilElement {
    }
    var HTMLRuxIconAllOutElement: {
        prototype: HTMLRuxIconAllOutElement;
        new (): HTMLRuxIconAllOutElement;
    };
    interface HTMLRuxIconAlternateEmailElement extends Components.RuxIconAlternateEmail, HTMLStencilElement {
    }
    var HTMLRuxIconAlternateEmailElement: {
        prototype: HTMLRuxIconAlternateEmailElement;
        new (): HTMLRuxIconAlternateEmailElement;
    };
    interface HTMLRuxIconAltitudeElement extends Components.RuxIconAltitude, HTMLStencilElement {
    }
    var HTMLRuxIconAltitudeElement: {
        prototype: HTMLRuxIconAltitudeElement;
        new (): HTMLRuxIconAltitudeElement;
    };
    interface HTMLRuxIconAndroidElement extends Components.RuxIconAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconAndroidElement: {
        prototype: HTMLRuxIconAndroidElement;
        new (): HTMLRuxIconAndroidElement;
    };
    interface HTMLRuxIconAnnouncementElement extends Components.RuxIconAnnouncement, HTMLStencilElement {
    }
    var HTMLRuxIconAnnouncementElement: {
        prototype: HTMLRuxIconAnnouncementElement;
        new (): HTMLRuxIconAnnouncementElement;
    };
    interface HTMLRuxIconAntennaElement extends Components.RuxIconAntenna, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaElement: {
        prototype: HTMLRuxIconAntennaElement;
        new (): HTMLRuxIconAntennaElement;
    };
    interface HTMLRuxIconAntennaOffElement extends Components.RuxIconAntennaOff, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaOffElement: {
        prototype: HTMLRuxIconAntennaOffElement;
        new (): HTMLRuxIconAntennaOffElement;
    };
    interface HTMLRuxIconAntennaReceiveElement extends Components.RuxIconAntennaReceive, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaReceiveElement: {
        prototype: HTMLRuxIconAntennaReceiveElement;
        new (): HTMLRuxIconAntennaReceiveElement;
    };
    interface HTMLRuxIconAntennaTransmitElement extends Components.RuxIconAntennaTransmit, HTMLStencilElement {
    }
    var HTMLRuxIconAntennaTransmitElement: {
        prototype: HTMLRuxIconAntennaTransmitElement;
        new (): HTMLRuxIconAntennaTransmitElement;
    };
    interface HTMLRuxIconAppsElement extends Components.RuxIconApps, HTMLStencilElement {
    }
    var HTMLRuxIconAppsElement: {
        prototype: HTMLRuxIconAppsElement;
        new (): HTMLRuxIconAppsElement;
    };
    interface HTMLRuxIconArchiveElement extends Components.RuxIconArchive, HTMLStencilElement {
    }
    var HTMLRuxIconArchiveElement: {
        prototype: HTMLRuxIconArchiveElement;
        new (): HTMLRuxIconArchiveElement;
    };
    interface HTMLRuxIconArrowBackElement extends Components.RuxIconArrowBack, HTMLStencilElement {
    }
    var HTMLRuxIconArrowBackElement: {
        prototype: HTMLRuxIconArrowBackElement;
        new (): HTMLRuxIconArrowBackElement;
    };
    interface HTMLRuxIconArrowBackIosElement extends Components.RuxIconArrowBackIos, HTMLStencilElement {
    }
    var HTMLRuxIconArrowBackIosElement: {
        prototype: HTMLRuxIconArrowBackIosElement;
        new (): HTMLRuxIconArrowBackIosElement;
    };
    interface HTMLRuxIconArrowDownwardElement extends Components.RuxIconArrowDownward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDownwardElement: {
        prototype: HTMLRuxIconArrowDownwardElement;
        new (): HTMLRuxIconArrowDownwardElement;
    };
    interface HTMLRuxIconArrowDropDownElement extends Components.RuxIconArrowDropDown, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropDownElement: {
        prototype: HTMLRuxIconArrowDropDownElement;
        new (): HTMLRuxIconArrowDropDownElement;
    };
    interface HTMLRuxIconArrowDropDownCircleElement extends Components.RuxIconArrowDropDownCircle, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropDownCircleElement: {
        prototype: HTMLRuxIconArrowDropDownCircleElement;
        new (): HTMLRuxIconArrowDropDownCircleElement;
    };
    interface HTMLRuxIconArrowDropUpElement extends Components.RuxIconArrowDropUp, HTMLStencilElement {
    }
    var HTMLRuxIconArrowDropUpElement: {
        prototype: HTMLRuxIconArrowDropUpElement;
        new (): HTMLRuxIconArrowDropUpElement;
    };
    interface HTMLRuxIconArrowForwardElement extends Components.RuxIconArrowForward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowForwardElement: {
        prototype: HTMLRuxIconArrowForwardElement;
        new (): HTMLRuxIconArrowForwardElement;
    };
    interface HTMLRuxIconArrowForwardIosElement extends Components.RuxIconArrowForwardIos, HTMLStencilElement {
    }
    var HTMLRuxIconArrowForwardIosElement: {
        prototype: HTMLRuxIconArrowForwardIosElement;
        new (): HTMLRuxIconArrowForwardIosElement;
    };
    interface HTMLRuxIconArrowLeftElement extends Components.RuxIconArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconArrowLeftElement: {
        prototype: HTMLRuxIconArrowLeftElement;
        new (): HTMLRuxIconArrowLeftElement;
    };
    interface HTMLRuxIconArrowRightElement extends Components.RuxIconArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconArrowRightElement: {
        prototype: HTMLRuxIconArrowRightElement;
        new (): HTMLRuxIconArrowRightElement;
    };
    interface HTMLRuxIconArrowRightAltElement extends Components.RuxIconArrowRightAlt, HTMLStencilElement {
    }
    var HTMLRuxIconArrowRightAltElement: {
        prototype: HTMLRuxIconArrowRightAltElement;
        new (): HTMLRuxIconArrowRightAltElement;
    };
    interface HTMLRuxIconArrowUpwardElement extends Components.RuxIconArrowUpward, HTMLStencilElement {
    }
    var HTMLRuxIconArrowUpwardElement: {
        prototype: HTMLRuxIconArrowUpwardElement;
        new (): HTMLRuxIconArrowUpwardElement;
    };
    interface HTMLRuxIconArtTrackElement extends Components.RuxIconArtTrack, HTMLStencilElement {
    }
    var HTMLRuxIconArtTrackElement: {
        prototype: HTMLRuxIconArtTrackElement;
        new (): HTMLRuxIconArtTrackElement;
    };
    interface HTMLRuxIconAspectRatioElement extends Components.RuxIconAspectRatio, HTMLStencilElement {
    }
    var HTMLRuxIconAspectRatioElement: {
        prototype: HTMLRuxIconAspectRatioElement;
        new (): HTMLRuxIconAspectRatioElement;
    };
    interface HTMLRuxIconAssessmentElement extends Components.RuxIconAssessment, HTMLStencilElement {
    }
    var HTMLRuxIconAssessmentElement: {
        prototype: HTMLRuxIconAssessmentElement;
        new (): HTMLRuxIconAssessmentElement;
    };
    interface HTMLRuxIconAssignmentElement extends Components.RuxIconAssignment, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentElement: {
        prototype: HTMLRuxIconAssignmentElement;
        new (): HTMLRuxIconAssignmentElement;
    };
    interface HTMLRuxIconAssignmentFindElement extends Components.RuxIconAssignmentFind, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentFindElement: {
        prototype: HTMLRuxIconAssignmentFindElement;
        new (): HTMLRuxIconAssignmentFindElement;
    };
    interface HTMLRuxIconAssignmentLateElement extends Components.RuxIconAssignmentLate, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentLateElement: {
        prototype: HTMLRuxIconAssignmentLateElement;
        new (): HTMLRuxIconAssignmentLateElement;
    };
    interface HTMLRuxIconAssignmentReturnElement extends Components.RuxIconAssignmentReturn, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentReturnElement: {
        prototype: HTMLRuxIconAssignmentReturnElement;
        new (): HTMLRuxIconAssignmentReturnElement;
    };
    interface HTMLRuxIconAssignmentReturnedElement extends Components.RuxIconAssignmentReturned, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentReturnedElement: {
        prototype: HTMLRuxIconAssignmentReturnedElement;
        new (): HTMLRuxIconAssignmentReturnedElement;
    };
    interface HTMLRuxIconAssignmentTurnedInElement extends Components.RuxIconAssignmentTurnedIn, HTMLStencilElement {
    }
    var HTMLRuxIconAssignmentTurnedInElement: {
        prototype: HTMLRuxIconAssignmentTurnedInElement;
        new (): HTMLRuxIconAssignmentTurnedInElement;
    };
    interface HTMLRuxIconAssistantElement extends Components.RuxIconAssistant, HTMLStencilElement {
    }
    var HTMLRuxIconAssistantElement: {
        prototype: HTMLRuxIconAssistantElement;
        new (): HTMLRuxIconAssistantElement;
    };
    interface HTMLRuxIconAssistantPhotoElement extends Components.RuxIconAssistantPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconAssistantPhotoElement: {
        prototype: HTMLRuxIconAssistantPhotoElement;
        new (): HTMLRuxIconAssistantPhotoElement;
    };
    interface HTMLRuxIconAttachFileElement extends Components.RuxIconAttachFile, HTMLStencilElement {
    }
    var HTMLRuxIconAttachFileElement: {
        prototype: HTMLRuxIconAttachFileElement;
        new (): HTMLRuxIconAttachFileElement;
    };
    interface HTMLRuxIconAttachMoneyElement extends Components.RuxIconAttachMoney, HTMLStencilElement {
    }
    var HTMLRuxIconAttachMoneyElement: {
        prototype: HTMLRuxIconAttachMoneyElement;
        new (): HTMLRuxIconAttachMoneyElement;
    };
    interface HTMLRuxIconAttachmentElement extends Components.RuxIconAttachment, HTMLStencilElement {
    }
    var HTMLRuxIconAttachmentElement: {
        prototype: HTMLRuxIconAttachmentElement;
        new (): HTMLRuxIconAttachmentElement;
    };
    interface HTMLRuxIconAudiotrackElement extends Components.RuxIconAudiotrack, HTMLStencilElement {
    }
    var HTMLRuxIconAudiotrackElement: {
        prototype: HTMLRuxIconAudiotrackElement;
        new (): HTMLRuxIconAudiotrackElement;
    };
    interface HTMLRuxIconAutorenewElement extends Components.RuxIconAutorenew, HTMLStencilElement {
    }
    var HTMLRuxIconAutorenewElement: {
        prototype: HTMLRuxIconAutorenewElement;
        new (): HTMLRuxIconAutorenewElement;
    };
    interface HTMLRuxIconAvTimerElement extends Components.RuxIconAvTimer, HTMLStencilElement {
    }
    var HTMLRuxIconAvTimerElement: {
        prototype: HTMLRuxIconAvTimerElement;
        new (): HTMLRuxIconAvTimerElement;
    };
    interface HTMLRuxIconBackspaceElement extends Components.RuxIconBackspace, HTMLStencilElement {
    }
    var HTMLRuxIconBackspaceElement: {
        prototype: HTMLRuxIconBackspaceElement;
        new (): HTMLRuxIconBackspaceElement;
    };
    interface HTMLRuxIconBackupElement extends Components.RuxIconBackup, HTMLStencilElement {
    }
    var HTMLRuxIconBackupElement: {
        prototype: HTMLRuxIconBackupElement;
        new (): HTMLRuxIconBackupElement;
    };
    interface HTMLRuxIconBallotElement extends Components.RuxIconBallot, HTMLStencilElement {
    }
    var HTMLRuxIconBallotElement: {
        prototype: HTMLRuxIconBallotElement;
        new (): HTMLRuxIconBallotElement;
    };
    interface HTMLRuxIconBarChartElement extends Components.RuxIconBarChart, HTMLStencilElement {
    }
    var HTMLRuxIconBarChartElement: {
        prototype: HTMLRuxIconBarChartElement;
        new (): HTMLRuxIconBarChartElement;
    };
    interface HTMLRuxIconBattery20Element extends Components.RuxIconBattery20, HTMLStencilElement {
    }
    var HTMLRuxIconBattery20Element: {
        prototype: HTMLRuxIconBattery20Element;
        new (): HTMLRuxIconBattery20Element;
    };
    interface HTMLRuxIconBattery30Element extends Components.RuxIconBattery30, HTMLStencilElement {
    }
    var HTMLRuxIconBattery30Element: {
        prototype: HTMLRuxIconBattery30Element;
        new (): HTMLRuxIconBattery30Element;
    };
    interface HTMLRuxIconBattery50Element extends Components.RuxIconBattery50, HTMLStencilElement {
    }
    var HTMLRuxIconBattery50Element: {
        prototype: HTMLRuxIconBattery50Element;
        new (): HTMLRuxIconBattery50Element;
    };
    interface HTMLRuxIconBattery60Element extends Components.RuxIconBattery60, HTMLStencilElement {
    }
    var HTMLRuxIconBattery60Element: {
        prototype: HTMLRuxIconBattery60Element;
        new (): HTMLRuxIconBattery60Element;
    };
    interface HTMLRuxIconBattery80Element extends Components.RuxIconBattery80, HTMLStencilElement {
    }
    var HTMLRuxIconBattery80Element: {
        prototype: HTMLRuxIconBattery80Element;
        new (): HTMLRuxIconBattery80Element;
    };
    interface HTMLRuxIconBattery90Element extends Components.RuxIconBattery90, HTMLStencilElement {
    }
    var HTMLRuxIconBattery90Element: {
        prototype: HTMLRuxIconBattery90Element;
        new (): HTMLRuxIconBattery90Element;
    };
    interface HTMLRuxIconBatteryAlertElement extends Components.RuxIconBatteryAlert, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryAlertElement: {
        prototype: HTMLRuxIconBatteryAlertElement;
        new (): HTMLRuxIconBatteryAlertElement;
    };
    interface HTMLRuxIconBatteryCharging20Element extends Components.RuxIconBatteryCharging20, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging20Element: {
        prototype: HTMLRuxIconBatteryCharging20Element;
        new (): HTMLRuxIconBatteryCharging20Element;
    };
    interface HTMLRuxIconBatteryCharging30Element extends Components.RuxIconBatteryCharging30, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging30Element: {
        prototype: HTMLRuxIconBatteryCharging30Element;
        new (): HTMLRuxIconBatteryCharging30Element;
    };
    interface HTMLRuxIconBatteryCharging50Element extends Components.RuxIconBatteryCharging50, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging50Element: {
        prototype: HTMLRuxIconBatteryCharging50Element;
        new (): HTMLRuxIconBatteryCharging50Element;
    };
    interface HTMLRuxIconBatteryCharging60Element extends Components.RuxIconBatteryCharging60, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging60Element: {
        prototype: HTMLRuxIconBatteryCharging60Element;
        new (): HTMLRuxIconBatteryCharging60Element;
    };
    interface HTMLRuxIconBatteryCharging80Element extends Components.RuxIconBatteryCharging80, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging80Element: {
        prototype: HTMLRuxIconBatteryCharging80Element;
        new (): HTMLRuxIconBatteryCharging80Element;
    };
    interface HTMLRuxIconBatteryCharging90Element extends Components.RuxIconBatteryCharging90, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryCharging90Element: {
        prototype: HTMLRuxIconBatteryCharging90Element;
        new (): HTMLRuxIconBatteryCharging90Element;
    };
    interface HTMLRuxIconBatteryChargingFullElement extends Components.RuxIconBatteryChargingFull, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryChargingFullElement: {
        prototype: HTMLRuxIconBatteryChargingFullElement;
        new (): HTMLRuxIconBatteryChargingFullElement;
    };
    interface HTMLRuxIconBatteryFullElement extends Components.RuxIconBatteryFull, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryFullElement: {
        prototype: HTMLRuxIconBatteryFullElement;
        new (): HTMLRuxIconBatteryFullElement;
    };
    interface HTMLRuxIconBatteryStdElement extends Components.RuxIconBatteryStd, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryStdElement: {
        prototype: HTMLRuxIconBatteryStdElement;
        new (): HTMLRuxIconBatteryStdElement;
    };
    interface HTMLRuxIconBatteryUnknownElement extends Components.RuxIconBatteryUnknown, HTMLStencilElement {
    }
    var HTMLRuxIconBatteryUnknownElement: {
        prototype: HTMLRuxIconBatteryUnknownElement;
        new (): HTMLRuxIconBatteryUnknownElement;
    };
    interface HTMLRuxIconBeachAccessElement extends Components.RuxIconBeachAccess, HTMLStencilElement {
    }
    var HTMLRuxIconBeachAccessElement: {
        prototype: HTMLRuxIconBeachAccessElement;
        new (): HTMLRuxIconBeachAccessElement;
    };
    interface HTMLRuxIconBeenhereElement extends Components.RuxIconBeenhere, HTMLStencilElement {
    }
    var HTMLRuxIconBeenhereElement: {
        prototype: HTMLRuxIconBeenhereElement;
        new (): HTMLRuxIconBeenhereElement;
    };
    interface HTMLRuxIconBlockElement extends Components.RuxIconBlock, HTMLStencilElement {
    }
    var HTMLRuxIconBlockElement: {
        prototype: HTMLRuxIconBlockElement;
        new (): HTMLRuxIconBlockElement;
    };
    interface HTMLRuxIconBluetoothElement extends Components.RuxIconBluetooth, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothElement: {
        prototype: HTMLRuxIconBluetoothElement;
        new (): HTMLRuxIconBluetoothElement;
    };
    interface HTMLRuxIconBluetoothAudioElement extends Components.RuxIconBluetoothAudio, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothAudioElement: {
        prototype: HTMLRuxIconBluetoothAudioElement;
        new (): HTMLRuxIconBluetoothAudioElement;
    };
    interface HTMLRuxIconBluetoothConnectedElement extends Components.RuxIconBluetoothConnected, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothConnectedElement: {
        prototype: HTMLRuxIconBluetoothConnectedElement;
        new (): HTMLRuxIconBluetoothConnectedElement;
    };
    interface HTMLRuxIconBluetoothDisabledElement extends Components.RuxIconBluetoothDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothDisabledElement: {
        prototype: HTMLRuxIconBluetoothDisabledElement;
        new (): HTMLRuxIconBluetoothDisabledElement;
    };
    interface HTMLRuxIconBluetoothSearchingElement extends Components.RuxIconBluetoothSearching, HTMLStencilElement {
    }
    var HTMLRuxIconBluetoothSearchingElement: {
        prototype: HTMLRuxIconBluetoothSearchingElement;
        new (): HTMLRuxIconBluetoothSearchingElement;
    };
    interface HTMLRuxIconBlurCircularElement extends Components.RuxIconBlurCircular, HTMLStencilElement {
    }
    var HTMLRuxIconBlurCircularElement: {
        prototype: HTMLRuxIconBlurCircularElement;
        new (): HTMLRuxIconBlurCircularElement;
    };
    interface HTMLRuxIconBlurLinearElement extends Components.RuxIconBlurLinear, HTMLStencilElement {
    }
    var HTMLRuxIconBlurLinearElement: {
        prototype: HTMLRuxIconBlurLinearElement;
        new (): HTMLRuxIconBlurLinearElement;
    };
    interface HTMLRuxIconBlurOffElement extends Components.RuxIconBlurOff, HTMLStencilElement {
    }
    var HTMLRuxIconBlurOffElement: {
        prototype: HTMLRuxIconBlurOffElement;
        new (): HTMLRuxIconBlurOffElement;
    };
    interface HTMLRuxIconBlurOnElement extends Components.RuxIconBlurOn, HTMLStencilElement {
    }
    var HTMLRuxIconBlurOnElement: {
        prototype: HTMLRuxIconBlurOnElement;
        new (): HTMLRuxIconBlurOnElement;
    };
    interface HTMLRuxIconBookElement extends Components.RuxIconBook, HTMLStencilElement {
    }
    var HTMLRuxIconBookElement: {
        prototype: HTMLRuxIconBookElement;
        new (): HTMLRuxIconBookElement;
    };
    interface HTMLRuxIconBookmarkElement extends Components.RuxIconBookmark, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarkElement: {
        prototype: HTMLRuxIconBookmarkElement;
        new (): HTMLRuxIconBookmarkElement;
    };
    interface HTMLRuxIconBookmarkBorderElement extends Components.RuxIconBookmarkBorder, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarkBorderElement: {
        prototype: HTMLRuxIconBookmarkBorderElement;
        new (): HTMLRuxIconBookmarkBorderElement;
    };
    interface HTMLRuxIconBookmarksElement extends Components.RuxIconBookmarks, HTMLStencilElement {
    }
    var HTMLRuxIconBookmarksElement: {
        prototype: HTMLRuxIconBookmarksElement;
        new (): HTMLRuxIconBookmarksElement;
    };
    interface HTMLRuxIconBorderAllElement extends Components.RuxIconBorderAll, HTMLStencilElement {
    }
    var HTMLRuxIconBorderAllElement: {
        prototype: HTMLRuxIconBorderAllElement;
        new (): HTMLRuxIconBorderAllElement;
    };
    interface HTMLRuxIconBorderBottomElement extends Components.RuxIconBorderBottom, HTMLStencilElement {
    }
    var HTMLRuxIconBorderBottomElement: {
        prototype: HTMLRuxIconBorderBottomElement;
        new (): HTMLRuxIconBorderBottomElement;
    };
    interface HTMLRuxIconBorderClearElement extends Components.RuxIconBorderClear, HTMLStencilElement {
    }
    var HTMLRuxIconBorderClearElement: {
        prototype: HTMLRuxIconBorderClearElement;
        new (): HTMLRuxIconBorderClearElement;
    };
    interface HTMLRuxIconBorderColorElement extends Components.RuxIconBorderColor, HTMLStencilElement {
    }
    var HTMLRuxIconBorderColorElement: {
        prototype: HTMLRuxIconBorderColorElement;
        new (): HTMLRuxIconBorderColorElement;
    };
    interface HTMLRuxIconBorderHorizontalElement extends Components.RuxIconBorderHorizontal, HTMLStencilElement {
    }
    var HTMLRuxIconBorderHorizontalElement: {
        prototype: HTMLRuxIconBorderHorizontalElement;
        new (): HTMLRuxIconBorderHorizontalElement;
    };
    interface HTMLRuxIconBorderInnerElement extends Components.RuxIconBorderInner, HTMLStencilElement {
    }
    var HTMLRuxIconBorderInnerElement: {
        prototype: HTMLRuxIconBorderInnerElement;
        new (): HTMLRuxIconBorderInnerElement;
    };
    interface HTMLRuxIconBorderLeftElement extends Components.RuxIconBorderLeft, HTMLStencilElement {
    }
    var HTMLRuxIconBorderLeftElement: {
        prototype: HTMLRuxIconBorderLeftElement;
        new (): HTMLRuxIconBorderLeftElement;
    };
    interface HTMLRuxIconBorderOuterElement extends Components.RuxIconBorderOuter, HTMLStencilElement {
    }
    var HTMLRuxIconBorderOuterElement: {
        prototype: HTMLRuxIconBorderOuterElement;
        new (): HTMLRuxIconBorderOuterElement;
    };
    interface HTMLRuxIconBorderRightElement extends Components.RuxIconBorderRight, HTMLStencilElement {
    }
    var HTMLRuxIconBorderRightElement: {
        prototype: HTMLRuxIconBorderRightElement;
        new (): HTMLRuxIconBorderRightElement;
    };
    interface HTMLRuxIconBorderStyleElement extends Components.RuxIconBorderStyle, HTMLStencilElement {
    }
    var HTMLRuxIconBorderStyleElement: {
        prototype: HTMLRuxIconBorderStyleElement;
        new (): HTMLRuxIconBorderStyleElement;
    };
    interface HTMLRuxIconBorderTopElement extends Components.RuxIconBorderTop, HTMLStencilElement {
    }
    var HTMLRuxIconBorderTopElement: {
        prototype: HTMLRuxIconBorderTopElement;
        new (): HTMLRuxIconBorderTopElement;
    };
    interface HTMLRuxIconBorderVerticalElement extends Components.RuxIconBorderVertical, HTMLStencilElement {
    }
    var HTMLRuxIconBorderVerticalElement: {
        prototype: HTMLRuxIconBorderVerticalElement;
        new (): HTMLRuxIconBorderVerticalElement;
    };
    interface HTMLRuxIconBrandingWatermarkElement extends Components.RuxIconBrandingWatermark, HTMLStencilElement {
    }
    var HTMLRuxIconBrandingWatermarkElement: {
        prototype: HTMLRuxIconBrandingWatermarkElement;
        new (): HTMLRuxIconBrandingWatermarkElement;
    };
    interface HTMLRuxIconBrightness1Element extends Components.RuxIconBrightness1, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness1Element: {
        prototype: HTMLRuxIconBrightness1Element;
        new (): HTMLRuxIconBrightness1Element;
    };
    interface HTMLRuxIconBrightness2Element extends Components.RuxIconBrightness2, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness2Element: {
        prototype: HTMLRuxIconBrightness2Element;
        new (): HTMLRuxIconBrightness2Element;
    };
    interface HTMLRuxIconBrightness3Element extends Components.RuxIconBrightness3, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness3Element: {
        prototype: HTMLRuxIconBrightness3Element;
        new (): HTMLRuxIconBrightness3Element;
    };
    interface HTMLRuxIconBrightness4Element extends Components.RuxIconBrightness4, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness4Element: {
        prototype: HTMLRuxIconBrightness4Element;
        new (): HTMLRuxIconBrightness4Element;
    };
    interface HTMLRuxIconBrightness5Element extends Components.RuxIconBrightness5, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness5Element: {
        prototype: HTMLRuxIconBrightness5Element;
        new (): HTMLRuxIconBrightness5Element;
    };
    interface HTMLRuxIconBrightness6Element extends Components.RuxIconBrightness6, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness6Element: {
        prototype: HTMLRuxIconBrightness6Element;
        new (): HTMLRuxIconBrightness6Element;
    };
    interface HTMLRuxIconBrightness7Element extends Components.RuxIconBrightness7, HTMLStencilElement {
    }
    var HTMLRuxIconBrightness7Element: {
        prototype: HTMLRuxIconBrightness7Element;
        new (): HTMLRuxIconBrightness7Element;
    };
    interface HTMLRuxIconBrightnessAutoElement extends Components.RuxIconBrightnessAuto, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessAutoElement: {
        prototype: HTMLRuxIconBrightnessAutoElement;
        new (): HTMLRuxIconBrightnessAutoElement;
    };
    interface HTMLRuxIconBrightnessHighElement extends Components.RuxIconBrightnessHigh, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessHighElement: {
        prototype: HTMLRuxIconBrightnessHighElement;
        new (): HTMLRuxIconBrightnessHighElement;
    };
    interface HTMLRuxIconBrightnessLowElement extends Components.RuxIconBrightnessLow, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessLowElement: {
        prototype: HTMLRuxIconBrightnessLowElement;
        new (): HTMLRuxIconBrightnessLowElement;
    };
    interface HTMLRuxIconBrightnessMediumElement extends Components.RuxIconBrightnessMedium, HTMLStencilElement {
    }
    var HTMLRuxIconBrightnessMediumElement: {
        prototype: HTMLRuxIconBrightnessMediumElement;
        new (): HTMLRuxIconBrightnessMediumElement;
    };
    interface HTMLRuxIconBrokenImageElement extends Components.RuxIconBrokenImage, HTMLStencilElement {
    }
    var HTMLRuxIconBrokenImageElement: {
        prototype: HTMLRuxIconBrokenImageElement;
        new (): HTMLRuxIconBrokenImageElement;
    };
    interface HTMLRuxIconBrushElement extends Components.RuxIconBrush, HTMLStencilElement {
    }
    var HTMLRuxIconBrushElement: {
        prototype: HTMLRuxIconBrushElement;
        new (): HTMLRuxIconBrushElement;
    };
    interface HTMLRuxIconBubbleChartElement extends Components.RuxIconBubbleChart, HTMLStencilElement {
    }
    var HTMLRuxIconBubbleChartElement: {
        prototype: HTMLRuxIconBubbleChartElement;
        new (): HTMLRuxIconBubbleChartElement;
    };
    interface HTMLRuxIconBugReportElement extends Components.RuxIconBugReport, HTMLStencilElement {
    }
    var HTMLRuxIconBugReportElement: {
        prototype: HTMLRuxIconBugReportElement;
        new (): HTMLRuxIconBugReportElement;
    };
    interface HTMLRuxIconBuildElement extends Components.RuxIconBuild, HTMLStencilElement {
    }
    var HTMLRuxIconBuildElement: {
        prototype: HTMLRuxIconBuildElement;
        new (): HTMLRuxIconBuildElement;
    };
    interface HTMLRuxIconBurstModeElement extends Components.RuxIconBurstMode, HTMLStencilElement {
    }
    var HTMLRuxIconBurstModeElement: {
        prototype: HTMLRuxIconBurstModeElement;
        new (): HTMLRuxIconBurstModeElement;
    };
    interface HTMLRuxIconBusinessElement extends Components.RuxIconBusiness, HTMLStencilElement {
    }
    var HTMLRuxIconBusinessElement: {
        prototype: HTMLRuxIconBusinessElement;
        new (): HTMLRuxIconBusinessElement;
    };
    interface HTMLRuxIconBusinessCenterElement extends Components.RuxIconBusinessCenter, HTMLStencilElement {
    }
    var HTMLRuxIconBusinessCenterElement: {
        prototype: HTMLRuxIconBusinessCenterElement;
        new (): HTMLRuxIconBusinessCenterElement;
    };
    interface HTMLRuxIconCachedElement extends Components.RuxIconCached, HTMLStencilElement {
    }
    var HTMLRuxIconCachedElement: {
        prototype: HTMLRuxIconCachedElement;
        new (): HTMLRuxIconCachedElement;
    };
    interface HTMLRuxIconCakeElement extends Components.RuxIconCake, HTMLStencilElement {
    }
    var HTMLRuxIconCakeElement: {
        prototype: HTMLRuxIconCakeElement;
        new (): HTMLRuxIconCakeElement;
    };
    interface HTMLRuxIconCalendarTodayElement extends Components.RuxIconCalendarToday, HTMLStencilElement {
    }
    var HTMLRuxIconCalendarTodayElement: {
        prototype: HTMLRuxIconCalendarTodayElement;
        new (): HTMLRuxIconCalendarTodayElement;
    };
    interface HTMLRuxIconCalendarViewDayElement extends Components.RuxIconCalendarViewDay, HTMLStencilElement {
    }
    var HTMLRuxIconCalendarViewDayElement: {
        prototype: HTMLRuxIconCalendarViewDayElement;
        new (): HTMLRuxIconCalendarViewDayElement;
    };
    interface HTMLRuxIconCallElement extends Components.RuxIconCall, HTMLStencilElement {
    }
    var HTMLRuxIconCallElement: {
        prototype: HTMLRuxIconCallElement;
        new (): HTMLRuxIconCallElement;
    };
    interface HTMLRuxIconCallEndElement extends Components.RuxIconCallEnd, HTMLStencilElement {
    }
    var HTMLRuxIconCallEndElement: {
        prototype: HTMLRuxIconCallEndElement;
        new (): HTMLRuxIconCallEndElement;
    };
    interface HTMLRuxIconCallMadeElement extends Components.RuxIconCallMade, HTMLStencilElement {
    }
    var HTMLRuxIconCallMadeElement: {
        prototype: HTMLRuxIconCallMadeElement;
        new (): HTMLRuxIconCallMadeElement;
    };
    interface HTMLRuxIconCallMergeElement extends Components.RuxIconCallMerge, HTMLStencilElement {
    }
    var HTMLRuxIconCallMergeElement: {
        prototype: HTMLRuxIconCallMergeElement;
        new (): HTMLRuxIconCallMergeElement;
    };
    interface HTMLRuxIconCallMissedElement extends Components.RuxIconCallMissed, HTMLStencilElement {
    }
    var HTMLRuxIconCallMissedElement: {
        prototype: HTMLRuxIconCallMissedElement;
        new (): HTMLRuxIconCallMissedElement;
    };
    interface HTMLRuxIconCallMissedOutgoingElement extends Components.RuxIconCallMissedOutgoing, HTMLStencilElement {
    }
    var HTMLRuxIconCallMissedOutgoingElement: {
        prototype: HTMLRuxIconCallMissedOutgoingElement;
        new (): HTMLRuxIconCallMissedOutgoingElement;
    };
    interface HTMLRuxIconCallReceivedElement extends Components.RuxIconCallReceived, HTMLStencilElement {
    }
    var HTMLRuxIconCallReceivedElement: {
        prototype: HTMLRuxIconCallReceivedElement;
        new (): HTMLRuxIconCallReceivedElement;
    };
    interface HTMLRuxIconCallSplitElement extends Components.RuxIconCallSplit, HTMLStencilElement {
    }
    var HTMLRuxIconCallSplitElement: {
        prototype: HTMLRuxIconCallSplitElement;
        new (): HTMLRuxIconCallSplitElement;
    };
    interface HTMLRuxIconCallToActionElement extends Components.RuxIconCallToAction, HTMLStencilElement {
    }
    var HTMLRuxIconCallToActionElement: {
        prototype: HTMLRuxIconCallToActionElement;
        new (): HTMLRuxIconCallToActionElement;
    };
    interface HTMLRuxIconCameraElement extends Components.RuxIconCamera, HTMLStencilElement {
    }
    var HTMLRuxIconCameraElement: {
        prototype: HTMLRuxIconCameraElement;
        new (): HTMLRuxIconCameraElement;
    };
    interface HTMLRuxIconCameraAltElement extends Components.RuxIconCameraAlt, HTMLStencilElement {
    }
    var HTMLRuxIconCameraAltElement: {
        prototype: HTMLRuxIconCameraAltElement;
        new (): HTMLRuxIconCameraAltElement;
    };
    interface HTMLRuxIconCameraEnhanceElement extends Components.RuxIconCameraEnhance, HTMLStencilElement {
    }
    var HTMLRuxIconCameraEnhanceElement: {
        prototype: HTMLRuxIconCameraEnhanceElement;
        new (): HTMLRuxIconCameraEnhanceElement;
    };
    interface HTMLRuxIconCameraFrontElement extends Components.RuxIconCameraFront, HTMLStencilElement {
    }
    var HTMLRuxIconCameraFrontElement: {
        prototype: HTMLRuxIconCameraFrontElement;
        new (): HTMLRuxIconCameraFrontElement;
    };
    interface HTMLRuxIconCameraRearElement extends Components.RuxIconCameraRear, HTMLStencilElement {
    }
    var HTMLRuxIconCameraRearElement: {
        prototype: HTMLRuxIconCameraRearElement;
        new (): HTMLRuxIconCameraRearElement;
    };
    interface HTMLRuxIconCameraRollElement extends Components.RuxIconCameraRoll, HTMLStencilElement {
    }
    var HTMLRuxIconCameraRollElement: {
        prototype: HTMLRuxIconCameraRollElement;
        new (): HTMLRuxIconCameraRollElement;
    };
    interface HTMLRuxIconCancelElement extends Components.RuxIconCancel, HTMLStencilElement {
    }
    var HTMLRuxIconCancelElement: {
        prototype: HTMLRuxIconCancelElement;
        new (): HTMLRuxIconCancelElement;
    };
    interface HTMLRuxIconCancelPresentationElement extends Components.RuxIconCancelPresentation, HTMLStencilElement {
    }
    var HTMLRuxIconCancelPresentationElement: {
        prototype: HTMLRuxIconCancelPresentationElement;
        new (): HTMLRuxIconCancelPresentationElement;
    };
    interface HTMLRuxIconCardGiftcardElement extends Components.RuxIconCardGiftcard, HTMLStencilElement {
    }
    var HTMLRuxIconCardGiftcardElement: {
        prototype: HTMLRuxIconCardGiftcardElement;
        new (): HTMLRuxIconCardGiftcardElement;
    };
    interface HTMLRuxIconCardMembershipElement extends Components.RuxIconCardMembership, HTMLStencilElement {
    }
    var HTMLRuxIconCardMembershipElement: {
        prototype: HTMLRuxIconCardMembershipElement;
        new (): HTMLRuxIconCardMembershipElement;
    };
    interface HTMLRuxIconCardTravelElement extends Components.RuxIconCardTravel, HTMLStencilElement {
    }
    var HTMLRuxIconCardTravelElement: {
        prototype: HTMLRuxIconCardTravelElement;
        new (): HTMLRuxIconCardTravelElement;
    };
    interface HTMLRuxIconCasinoElement extends Components.RuxIconCasino, HTMLStencilElement {
    }
    var HTMLRuxIconCasinoElement: {
        prototype: HTMLRuxIconCasinoElement;
        new (): HTMLRuxIconCasinoElement;
    };
    interface HTMLRuxIconCastElement extends Components.RuxIconCast, HTMLStencilElement {
    }
    var HTMLRuxIconCastElement: {
        prototype: HTMLRuxIconCastElement;
        new (): HTMLRuxIconCastElement;
    };
    interface HTMLRuxIconCastConnectedElement extends Components.RuxIconCastConnected, HTMLStencilElement {
    }
    var HTMLRuxIconCastConnectedElement: {
        prototype: HTMLRuxIconCastConnectedElement;
        new (): HTMLRuxIconCastConnectedElement;
    };
    interface HTMLRuxIconCastForEducationElement extends Components.RuxIconCastForEducation, HTMLStencilElement {
    }
    var HTMLRuxIconCastForEducationElement: {
        prototype: HTMLRuxIconCastForEducationElement;
        new (): HTMLRuxIconCastForEducationElement;
    };
    interface HTMLRuxIconCategoryElement extends Components.RuxIconCategory, HTMLStencilElement {
    }
    var HTMLRuxIconCategoryElement: {
        prototype: HTMLRuxIconCategoryElement;
        new (): HTMLRuxIconCategoryElement;
    };
    interface HTMLRuxIconCellWifiElement extends Components.RuxIconCellWifi, HTMLStencilElement {
    }
    var HTMLRuxIconCellWifiElement: {
        prototype: HTMLRuxIconCellWifiElement;
        new (): HTMLRuxIconCellWifiElement;
    };
    interface HTMLRuxIconCenterFocusStrongElement extends Components.RuxIconCenterFocusStrong, HTMLStencilElement {
    }
    var HTMLRuxIconCenterFocusStrongElement: {
        prototype: HTMLRuxIconCenterFocusStrongElement;
        new (): HTMLRuxIconCenterFocusStrongElement;
    };
    interface HTMLRuxIconCenterFocusWeakElement extends Components.RuxIconCenterFocusWeak, HTMLStencilElement {
    }
    var HTMLRuxIconCenterFocusWeakElement: {
        prototype: HTMLRuxIconCenterFocusWeakElement;
        new (): HTMLRuxIconCenterFocusWeakElement;
    };
    interface HTMLRuxIconChangeHistoryElement extends Components.RuxIconChangeHistory, HTMLStencilElement {
    }
    var HTMLRuxIconChangeHistoryElement: {
        prototype: HTMLRuxIconChangeHistoryElement;
        new (): HTMLRuxIconChangeHistoryElement;
    };
    interface HTMLRuxIconChatElement extends Components.RuxIconChat, HTMLStencilElement {
    }
    var HTMLRuxIconChatElement: {
        prototype: HTMLRuxIconChatElement;
        new (): HTMLRuxIconChatElement;
    };
    interface HTMLRuxIconChatBubbleElement extends Components.RuxIconChatBubble, HTMLStencilElement {
    }
    var HTMLRuxIconChatBubbleElement: {
        prototype: HTMLRuxIconChatBubbleElement;
        new (): HTMLRuxIconChatBubbleElement;
    };
    interface HTMLRuxIconChatBubbleOutlineElement extends Components.RuxIconChatBubbleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconChatBubbleOutlineElement: {
        prototype: HTMLRuxIconChatBubbleOutlineElement;
        new (): HTMLRuxIconChatBubbleOutlineElement;
    };
    interface HTMLRuxIconCheckElement extends Components.RuxIconCheck, HTMLStencilElement {
    }
    var HTMLRuxIconCheckElement: {
        prototype: HTMLRuxIconCheckElement;
        new (): HTMLRuxIconCheckElement;
    };
    interface HTMLRuxIconCheckBoxElement extends Components.RuxIconCheckBox, HTMLStencilElement {
    }
    var HTMLRuxIconCheckBoxElement: {
        prototype: HTMLRuxIconCheckBoxElement;
        new (): HTMLRuxIconCheckBoxElement;
    };
    interface HTMLRuxIconCheckBoxOutlineBlankElement extends Components.RuxIconCheckBoxOutlineBlank, HTMLStencilElement {
    }
    var HTMLRuxIconCheckBoxOutlineBlankElement: {
        prototype: HTMLRuxIconCheckBoxOutlineBlankElement;
        new (): HTMLRuxIconCheckBoxOutlineBlankElement;
    };
    interface HTMLRuxIconCheckCircleElement extends Components.RuxIconCheckCircle, HTMLStencilElement {
    }
    var HTMLRuxIconCheckCircleElement: {
        prototype: HTMLRuxIconCheckCircleElement;
        new (): HTMLRuxIconCheckCircleElement;
    };
    interface HTMLRuxIconCheckCircleOutlineElement extends Components.RuxIconCheckCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconCheckCircleOutlineElement: {
        prototype: HTMLRuxIconCheckCircleOutlineElement;
        new (): HTMLRuxIconCheckCircleOutlineElement;
    };
    interface HTMLRuxIconChevronLeftElement extends Components.RuxIconChevronLeft, HTMLStencilElement {
    }
    var HTMLRuxIconChevronLeftElement: {
        prototype: HTMLRuxIconChevronLeftElement;
        new (): HTMLRuxIconChevronLeftElement;
    };
    interface HTMLRuxIconChevronRightElement extends Components.RuxIconChevronRight, HTMLStencilElement {
    }
    var HTMLRuxIconChevronRightElement: {
        prototype: HTMLRuxIconChevronRightElement;
        new (): HTMLRuxIconChevronRightElement;
    };
    interface HTMLRuxIconChildCareElement extends Components.RuxIconChildCare, HTMLStencilElement {
    }
    var HTMLRuxIconChildCareElement: {
        prototype: HTMLRuxIconChildCareElement;
        new (): HTMLRuxIconChildCareElement;
    };
    interface HTMLRuxIconChildFriendlyElement extends Components.RuxIconChildFriendly, HTMLStencilElement {
    }
    var HTMLRuxIconChildFriendlyElement: {
        prototype: HTMLRuxIconChildFriendlyElement;
        new (): HTMLRuxIconChildFriendlyElement;
    };
    interface HTMLRuxIconChromeReaderModeElement extends Components.RuxIconChromeReaderMode, HTMLStencilElement {
    }
    var HTMLRuxIconChromeReaderModeElement: {
        prototype: HTMLRuxIconChromeReaderModeElement;
        new (): HTMLRuxIconChromeReaderModeElement;
    };
    interface HTMLRuxIconClassElement extends Components.RuxIconClass, HTMLStencilElement {
    }
    var HTMLRuxIconClassElement: {
        prototype: HTMLRuxIconClassElement;
        new (): HTMLRuxIconClassElement;
    };
    interface HTMLRuxIconClearElement extends Components.RuxIconClear, HTMLStencilElement {
    }
    var HTMLRuxIconClearElement: {
        prototype: HTMLRuxIconClearElement;
        new (): HTMLRuxIconClearElement;
    };
    interface HTMLRuxIconClearAllElement extends Components.RuxIconClearAll, HTMLStencilElement {
    }
    var HTMLRuxIconClearAllElement: {
        prototype: HTMLRuxIconClearAllElement;
        new (): HTMLRuxIconClearAllElement;
    };
    interface HTMLRuxIconCloseElement extends Components.RuxIconClose, HTMLStencilElement {
    }
    var HTMLRuxIconCloseElement: {
        prototype: HTMLRuxIconCloseElement;
        new (): HTMLRuxIconCloseElement;
    };
    interface HTMLRuxIconClosedCaptionElement extends Components.RuxIconClosedCaption, HTMLStencilElement {
    }
    var HTMLRuxIconClosedCaptionElement: {
        prototype: HTMLRuxIconClosedCaptionElement;
        new (): HTMLRuxIconClosedCaptionElement;
    };
    interface HTMLRuxIconCloudElement extends Components.RuxIconCloud, HTMLStencilElement {
    }
    var HTMLRuxIconCloudElement: {
        prototype: HTMLRuxIconCloudElement;
        new (): HTMLRuxIconCloudElement;
    };
    interface HTMLRuxIconCloudCircleElement extends Components.RuxIconCloudCircle, HTMLStencilElement {
    }
    var HTMLRuxIconCloudCircleElement: {
        prototype: HTMLRuxIconCloudCircleElement;
        new (): HTMLRuxIconCloudCircleElement;
    };
    interface HTMLRuxIconCloudDoneElement extends Components.RuxIconCloudDone, HTMLStencilElement {
    }
    var HTMLRuxIconCloudDoneElement: {
        prototype: HTMLRuxIconCloudDoneElement;
        new (): HTMLRuxIconCloudDoneElement;
    };
    interface HTMLRuxIconCloudDownloadElement extends Components.RuxIconCloudDownload, HTMLStencilElement {
    }
    var HTMLRuxIconCloudDownloadElement: {
        prototype: HTMLRuxIconCloudDownloadElement;
        new (): HTMLRuxIconCloudDownloadElement;
    };
    interface HTMLRuxIconCloudOffElement extends Components.RuxIconCloudOff, HTMLStencilElement {
    }
    var HTMLRuxIconCloudOffElement: {
        prototype: HTMLRuxIconCloudOffElement;
        new (): HTMLRuxIconCloudOffElement;
    };
    interface HTMLRuxIconCloudQueueElement extends Components.RuxIconCloudQueue, HTMLStencilElement {
    }
    var HTMLRuxIconCloudQueueElement: {
        prototype: HTMLRuxIconCloudQueueElement;
        new (): HTMLRuxIconCloudQueueElement;
    };
    interface HTMLRuxIconCloudUploadElement extends Components.RuxIconCloudUpload, HTMLStencilElement {
    }
    var HTMLRuxIconCloudUploadElement: {
        prototype: HTMLRuxIconCloudUploadElement;
        new (): HTMLRuxIconCloudUploadElement;
    };
    interface HTMLRuxIconCodeElement extends Components.RuxIconCode, HTMLStencilElement {
    }
    var HTMLRuxIconCodeElement: {
        prototype: HTMLRuxIconCodeElement;
        new (): HTMLRuxIconCodeElement;
    };
    interface HTMLRuxIconCollectionsElement extends Components.RuxIconCollections, HTMLStencilElement {
    }
    var HTMLRuxIconCollectionsElement: {
        prototype: HTMLRuxIconCollectionsElement;
        new (): HTMLRuxIconCollectionsElement;
    };
    interface HTMLRuxIconCollectionsBookmarkElement extends Components.RuxIconCollectionsBookmark, HTMLStencilElement {
    }
    var HTMLRuxIconCollectionsBookmarkElement: {
        prototype: HTMLRuxIconCollectionsBookmarkElement;
        new (): HTMLRuxIconCollectionsBookmarkElement;
    };
    interface HTMLRuxIconColorLensElement extends Components.RuxIconColorLens, HTMLStencilElement {
    }
    var HTMLRuxIconColorLensElement: {
        prototype: HTMLRuxIconColorLensElement;
        new (): HTMLRuxIconColorLensElement;
    };
    interface HTMLRuxIconColorizeElement extends Components.RuxIconColorize, HTMLStencilElement {
    }
    var HTMLRuxIconColorizeElement: {
        prototype: HTMLRuxIconColorizeElement;
        new (): HTMLRuxIconColorizeElement;
    };
    interface HTMLRuxIconCommentElement extends Components.RuxIconComment, HTMLStencilElement {
    }
    var HTMLRuxIconCommentElement: {
        prototype: HTMLRuxIconCommentElement;
        new (): HTMLRuxIconCommentElement;
    };
    interface HTMLRuxIconCommuteElement extends Components.RuxIconCommute, HTMLStencilElement {
    }
    var HTMLRuxIconCommuteElement: {
        prototype: HTMLRuxIconCommuteElement;
        new (): HTMLRuxIconCommuteElement;
    };
    interface HTMLRuxIconCompareElement extends Components.RuxIconCompare, HTMLStencilElement {
    }
    var HTMLRuxIconCompareElement: {
        prototype: HTMLRuxIconCompareElement;
        new (): HTMLRuxIconCompareElement;
    };
    interface HTMLRuxIconCompareArrowsElement extends Components.RuxIconCompareArrows, HTMLStencilElement {
    }
    var HTMLRuxIconCompareArrowsElement: {
        prototype: HTMLRuxIconCompareArrowsElement;
        new (): HTMLRuxIconCompareArrowsElement;
    };
    interface HTMLRuxIconCompassCalibrationElement extends Components.RuxIconCompassCalibration, HTMLStencilElement {
    }
    var HTMLRuxIconCompassCalibrationElement: {
        prototype: HTMLRuxIconCompassCalibrationElement;
        new (): HTMLRuxIconCompassCalibrationElement;
    };
    interface HTMLRuxIconComputerElement extends Components.RuxIconComputer, HTMLStencilElement {
    }
    var HTMLRuxIconComputerElement: {
        prototype: HTMLRuxIconComputerElement;
        new (): HTMLRuxIconComputerElement;
    };
    interface HTMLRuxIconConfirmationNumberElement extends Components.RuxIconConfirmationNumber, HTMLStencilElement {
    }
    var HTMLRuxIconConfirmationNumberElement: {
        prototype: HTMLRuxIconConfirmationNumberElement;
        new (): HTMLRuxIconConfirmationNumberElement;
    };
    interface HTMLRuxIconContactMailElement extends Components.RuxIconContactMail, HTMLStencilElement {
    }
    var HTMLRuxIconContactMailElement: {
        prototype: HTMLRuxIconContactMailElement;
        new (): HTMLRuxIconContactMailElement;
    };
    interface HTMLRuxIconContactPhoneElement extends Components.RuxIconContactPhone, HTMLStencilElement {
    }
    var HTMLRuxIconContactPhoneElement: {
        prototype: HTMLRuxIconContactPhoneElement;
        new (): HTMLRuxIconContactPhoneElement;
    };
    interface HTMLRuxIconContactSupportElement extends Components.RuxIconContactSupport, HTMLStencilElement {
    }
    var HTMLRuxIconContactSupportElement: {
        prototype: HTMLRuxIconContactSupportElement;
        new (): HTMLRuxIconContactSupportElement;
    };
    interface HTMLRuxIconContactsElement extends Components.RuxIconContacts, HTMLStencilElement {
    }
    var HTMLRuxIconContactsElement: {
        prototype: HTMLRuxIconContactsElement;
        new (): HTMLRuxIconContactsElement;
    };
    interface HTMLRuxIconControlCameraElement extends Components.RuxIconControlCamera, HTMLStencilElement {
    }
    var HTMLRuxIconControlCameraElement: {
        prototype: HTMLRuxIconControlCameraElement;
        new (): HTMLRuxIconControlCameraElement;
    };
    interface HTMLRuxIconControlPointElement extends Components.RuxIconControlPoint, HTMLStencilElement {
    }
    var HTMLRuxIconControlPointElement: {
        prototype: HTMLRuxIconControlPointElement;
        new (): HTMLRuxIconControlPointElement;
    };
    interface HTMLRuxIconControlPointDuplicateElement extends Components.RuxIconControlPointDuplicate, HTMLStencilElement {
    }
    var HTMLRuxIconControlPointDuplicateElement: {
        prototype: HTMLRuxIconControlPointDuplicateElement;
        new (): HTMLRuxIconControlPointDuplicateElement;
    };
    interface HTMLRuxIconCopyrightElement extends Components.RuxIconCopyright, HTMLStencilElement {
    }
    var HTMLRuxIconCopyrightElement: {
        prototype: HTMLRuxIconCopyrightElement;
        new (): HTMLRuxIconCopyrightElement;
    };
    interface HTMLRuxIconCreateElement extends Components.RuxIconCreate, HTMLStencilElement {
    }
    var HTMLRuxIconCreateElement: {
        prototype: HTMLRuxIconCreateElement;
        new (): HTMLRuxIconCreateElement;
    };
    interface HTMLRuxIconCreateNewFolderElement extends Components.RuxIconCreateNewFolder, HTMLStencilElement {
    }
    var HTMLRuxIconCreateNewFolderElement: {
        prototype: HTMLRuxIconCreateNewFolderElement;
        new (): HTMLRuxIconCreateNewFolderElement;
    };
    interface HTMLRuxIconCreditCardElement extends Components.RuxIconCreditCard, HTMLStencilElement {
    }
    var HTMLRuxIconCreditCardElement: {
        prototype: HTMLRuxIconCreditCardElement;
        new (): HTMLRuxIconCreditCardElement;
    };
    interface HTMLRuxIconCropElement extends Components.RuxIconCrop, HTMLStencilElement {
    }
    var HTMLRuxIconCropElement: {
        prototype: HTMLRuxIconCropElement;
        new (): HTMLRuxIconCropElement;
    };
    interface HTMLRuxIconCrop169Element extends Components.RuxIconCrop169, HTMLStencilElement {
    }
    var HTMLRuxIconCrop169Element: {
        prototype: HTMLRuxIconCrop169Element;
        new (): HTMLRuxIconCrop169Element;
    };
    interface HTMLRuxIconCrop32Element extends Components.RuxIconCrop32, HTMLStencilElement {
    }
    var HTMLRuxIconCrop32Element: {
        prototype: HTMLRuxIconCrop32Element;
        new (): HTMLRuxIconCrop32Element;
    };
    interface HTMLRuxIconCrop54Element extends Components.RuxIconCrop54, HTMLStencilElement {
    }
    var HTMLRuxIconCrop54Element: {
        prototype: HTMLRuxIconCrop54Element;
        new (): HTMLRuxIconCrop54Element;
    };
    interface HTMLRuxIconCrop75Element extends Components.RuxIconCrop75, HTMLStencilElement {
    }
    var HTMLRuxIconCrop75Element: {
        prototype: HTMLRuxIconCrop75Element;
        new (): HTMLRuxIconCrop75Element;
    };
    interface HTMLRuxIconCropDinElement extends Components.RuxIconCropDin, HTMLStencilElement {
    }
    var HTMLRuxIconCropDinElement: {
        prototype: HTMLRuxIconCropDinElement;
        new (): HTMLRuxIconCropDinElement;
    };
    interface HTMLRuxIconCropFreeElement extends Components.RuxIconCropFree, HTMLStencilElement {
    }
    var HTMLRuxIconCropFreeElement: {
        prototype: HTMLRuxIconCropFreeElement;
        new (): HTMLRuxIconCropFreeElement;
    };
    interface HTMLRuxIconCropLandscapeElement extends Components.RuxIconCropLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconCropLandscapeElement: {
        prototype: HTMLRuxIconCropLandscapeElement;
        new (): HTMLRuxIconCropLandscapeElement;
    };
    interface HTMLRuxIconCropOriginalElement extends Components.RuxIconCropOriginal, HTMLStencilElement {
    }
    var HTMLRuxIconCropOriginalElement: {
        prototype: HTMLRuxIconCropOriginalElement;
        new (): HTMLRuxIconCropOriginalElement;
    };
    interface HTMLRuxIconCropPortraitElement extends Components.RuxIconCropPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconCropPortraitElement: {
        prototype: HTMLRuxIconCropPortraitElement;
        new (): HTMLRuxIconCropPortraitElement;
    };
    interface HTMLRuxIconCropRotateElement extends Components.RuxIconCropRotate, HTMLStencilElement {
    }
    var HTMLRuxIconCropRotateElement: {
        prototype: HTMLRuxIconCropRotateElement;
        new (): HTMLRuxIconCropRotateElement;
    };
    interface HTMLRuxIconCropSquareElement extends Components.RuxIconCropSquare, HTMLStencilElement {
    }
    var HTMLRuxIconCropSquareElement: {
        prototype: HTMLRuxIconCropSquareElement;
        new (): HTMLRuxIconCropSquareElement;
    };
    interface HTMLRuxIconDashboardElement extends Components.RuxIconDashboard, HTMLStencilElement {
    }
    var HTMLRuxIconDashboardElement: {
        prototype: HTMLRuxIconDashboardElement;
        new (): HTMLRuxIconDashboardElement;
    };
    interface HTMLRuxIconDataUsageElement extends Components.RuxIconDataUsage, HTMLStencilElement {
    }
    var HTMLRuxIconDataUsageElement: {
        prototype: HTMLRuxIconDataUsageElement;
        new (): HTMLRuxIconDataUsageElement;
    };
    interface HTMLRuxIconDateRangeElement extends Components.RuxIconDateRange, HTMLStencilElement {
    }
    var HTMLRuxIconDateRangeElement: {
        prototype: HTMLRuxIconDateRangeElement;
        new (): HTMLRuxIconDateRangeElement;
    };
    interface HTMLRuxIconDehazeElement extends Components.RuxIconDehaze, HTMLStencilElement {
    }
    var HTMLRuxIconDehazeElement: {
        prototype: HTMLRuxIconDehazeElement;
        new (): HTMLRuxIconDehazeElement;
    };
    interface HTMLRuxIconDeleteElement extends Components.RuxIconDelete, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteElement: {
        prototype: HTMLRuxIconDeleteElement;
        new (): HTMLRuxIconDeleteElement;
    };
    interface HTMLRuxIconDeleteForeverElement extends Components.RuxIconDeleteForever, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteForeverElement: {
        prototype: HTMLRuxIconDeleteForeverElement;
        new (): HTMLRuxIconDeleteForeverElement;
    };
    interface HTMLRuxIconDeleteOutlineElement extends Components.RuxIconDeleteOutline, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteOutlineElement: {
        prototype: HTMLRuxIconDeleteOutlineElement;
        new (): HTMLRuxIconDeleteOutlineElement;
    };
    interface HTMLRuxIconDeleteSweepElement extends Components.RuxIconDeleteSweep, HTMLStencilElement {
    }
    var HTMLRuxIconDeleteSweepElement: {
        prototype: HTMLRuxIconDeleteSweepElement;
        new (): HTMLRuxIconDeleteSweepElement;
    };
    interface HTMLRuxIconDepartureBoardElement extends Components.RuxIconDepartureBoard, HTMLStencilElement {
    }
    var HTMLRuxIconDepartureBoardElement: {
        prototype: HTMLRuxIconDepartureBoardElement;
        new (): HTMLRuxIconDepartureBoardElement;
    };
    interface HTMLRuxIconDescriptionElement extends Components.RuxIconDescription, HTMLStencilElement {
    }
    var HTMLRuxIconDescriptionElement: {
        prototype: HTMLRuxIconDescriptionElement;
        new (): HTMLRuxIconDescriptionElement;
    };
    interface HTMLRuxIconDesktopAccessDisabledElement extends Components.RuxIconDesktopAccessDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopAccessDisabledElement: {
        prototype: HTMLRuxIconDesktopAccessDisabledElement;
        new (): HTMLRuxIconDesktopAccessDisabledElement;
    };
    interface HTMLRuxIconDesktopMacElement extends Components.RuxIconDesktopMac, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopMacElement: {
        prototype: HTMLRuxIconDesktopMacElement;
        new (): HTMLRuxIconDesktopMacElement;
    };
    interface HTMLRuxIconDesktopWindowsElement extends Components.RuxIconDesktopWindows, HTMLStencilElement {
    }
    var HTMLRuxIconDesktopWindowsElement: {
        prototype: HTMLRuxIconDesktopWindowsElement;
        new (): HTMLRuxIconDesktopWindowsElement;
    };
    interface HTMLRuxIconDetailsElement extends Components.RuxIconDetails, HTMLStencilElement {
    }
    var HTMLRuxIconDetailsElement: {
        prototype: HTMLRuxIconDetailsElement;
        new (): HTMLRuxIconDetailsElement;
    };
    interface HTMLRuxIconDeveloperBoardElement extends Components.RuxIconDeveloperBoard, HTMLStencilElement {
    }
    var HTMLRuxIconDeveloperBoardElement: {
        prototype: HTMLRuxIconDeveloperBoardElement;
        new (): HTMLRuxIconDeveloperBoardElement;
    };
    interface HTMLRuxIconDeveloperModeElement extends Components.RuxIconDeveloperMode, HTMLStencilElement {
    }
    var HTMLRuxIconDeveloperModeElement: {
        prototype: HTMLRuxIconDeveloperModeElement;
        new (): HTMLRuxIconDeveloperModeElement;
    };
    interface HTMLRuxIconDeviceHubElement extends Components.RuxIconDeviceHub, HTMLStencilElement {
    }
    var HTMLRuxIconDeviceHubElement: {
        prototype: HTMLRuxIconDeviceHubElement;
        new (): HTMLRuxIconDeviceHubElement;
    };
    interface HTMLRuxIconDeviceUnknownElement extends Components.RuxIconDeviceUnknown, HTMLStencilElement {
    }
    var HTMLRuxIconDeviceUnknownElement: {
        prototype: HTMLRuxIconDeviceUnknownElement;
        new (): HTMLRuxIconDeviceUnknownElement;
    };
    interface HTMLRuxIconDevicesElement extends Components.RuxIconDevices, HTMLStencilElement {
    }
    var HTMLRuxIconDevicesElement: {
        prototype: HTMLRuxIconDevicesElement;
        new (): HTMLRuxIconDevicesElement;
    };
    interface HTMLRuxIconDevicesOtherElement extends Components.RuxIconDevicesOther, HTMLStencilElement {
    }
    var HTMLRuxIconDevicesOtherElement: {
        prototype: HTMLRuxIconDevicesOtherElement;
        new (): HTMLRuxIconDevicesOtherElement;
    };
    interface HTMLRuxIconDialerSipElement extends Components.RuxIconDialerSip, HTMLStencilElement {
    }
    var HTMLRuxIconDialerSipElement: {
        prototype: HTMLRuxIconDialerSipElement;
        new (): HTMLRuxIconDialerSipElement;
    };
    interface HTMLRuxIconDialpadElement extends Components.RuxIconDialpad, HTMLStencilElement {
    }
    var HTMLRuxIconDialpadElement: {
        prototype: HTMLRuxIconDialpadElement;
        new (): HTMLRuxIconDialpadElement;
    };
    interface HTMLRuxIconDirectionsElement extends Components.RuxIconDirections, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsElement: {
        prototype: HTMLRuxIconDirectionsElement;
        new (): HTMLRuxIconDirectionsElement;
    };
    interface HTMLRuxIconDirectionsBikeElement extends Components.RuxIconDirectionsBike, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBikeElement: {
        prototype: HTMLRuxIconDirectionsBikeElement;
        new (): HTMLRuxIconDirectionsBikeElement;
    };
    interface HTMLRuxIconDirectionsBoatElement extends Components.RuxIconDirectionsBoat, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBoatElement: {
        prototype: HTMLRuxIconDirectionsBoatElement;
        new (): HTMLRuxIconDirectionsBoatElement;
    };
    interface HTMLRuxIconDirectionsBusElement extends Components.RuxIconDirectionsBus, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsBusElement: {
        prototype: HTMLRuxIconDirectionsBusElement;
        new (): HTMLRuxIconDirectionsBusElement;
    };
    interface HTMLRuxIconDirectionsCarElement extends Components.RuxIconDirectionsCar, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsCarElement: {
        prototype: HTMLRuxIconDirectionsCarElement;
        new (): HTMLRuxIconDirectionsCarElement;
    };
    interface HTMLRuxIconDirectionsRailwayElement extends Components.RuxIconDirectionsRailway, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsRailwayElement: {
        prototype: HTMLRuxIconDirectionsRailwayElement;
        new (): HTMLRuxIconDirectionsRailwayElement;
    };
    interface HTMLRuxIconDirectionsRunElement extends Components.RuxIconDirectionsRun, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsRunElement: {
        prototype: HTMLRuxIconDirectionsRunElement;
        new (): HTMLRuxIconDirectionsRunElement;
    };
    interface HTMLRuxIconDirectionsSubwayElement extends Components.RuxIconDirectionsSubway, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsSubwayElement: {
        prototype: HTMLRuxIconDirectionsSubwayElement;
        new (): HTMLRuxIconDirectionsSubwayElement;
    };
    interface HTMLRuxIconDirectionsTransitElement extends Components.RuxIconDirectionsTransit, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsTransitElement: {
        prototype: HTMLRuxIconDirectionsTransitElement;
        new (): HTMLRuxIconDirectionsTransitElement;
    };
    interface HTMLRuxIconDirectionsWalkElement extends Components.RuxIconDirectionsWalk, HTMLStencilElement {
    }
    var HTMLRuxIconDirectionsWalkElement: {
        prototype: HTMLRuxIconDirectionsWalkElement;
        new (): HTMLRuxIconDirectionsWalkElement;
    };
    interface HTMLRuxIconDiscFullElement extends Components.RuxIconDiscFull, HTMLStencilElement {
    }
    var HTMLRuxIconDiscFullElement: {
        prototype: HTMLRuxIconDiscFullElement;
        new (): HTMLRuxIconDiscFullElement;
    };
    interface HTMLRuxIconDnsElement extends Components.RuxIconDns, HTMLStencilElement {
    }
    var HTMLRuxIconDnsElement: {
        prototype: HTMLRuxIconDnsElement;
        new (): HTMLRuxIconDnsElement;
    };
    interface HTMLRuxIconDockElement extends Components.RuxIconDock, HTMLStencilElement {
    }
    var HTMLRuxIconDockElement: {
        prototype: HTMLRuxIconDockElement;
        new (): HTMLRuxIconDockElement;
    };
    interface HTMLRuxIconDomainElement extends Components.RuxIconDomain, HTMLStencilElement {
    }
    var HTMLRuxIconDomainElement: {
        prototype: HTMLRuxIconDomainElement;
        new (): HTMLRuxIconDomainElement;
    };
    interface HTMLRuxIconDomainDisabledElement extends Components.RuxIconDomainDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconDomainDisabledElement: {
        prototype: HTMLRuxIconDomainDisabledElement;
        new (): HTMLRuxIconDomainDisabledElement;
    };
    interface HTMLRuxIconDoneElement extends Components.RuxIconDone, HTMLStencilElement {
    }
    var HTMLRuxIconDoneElement: {
        prototype: HTMLRuxIconDoneElement;
        new (): HTMLRuxIconDoneElement;
    };
    interface HTMLRuxIconDoneAllElement extends Components.RuxIconDoneAll, HTMLStencilElement {
    }
    var HTMLRuxIconDoneAllElement: {
        prototype: HTMLRuxIconDoneAllElement;
        new (): HTMLRuxIconDoneAllElement;
    };
    interface HTMLRuxIconDoneOutlineElement extends Components.RuxIconDoneOutline, HTMLStencilElement {
    }
    var HTMLRuxIconDoneOutlineElement: {
        prototype: HTMLRuxIconDoneOutlineElement;
        new (): HTMLRuxIconDoneOutlineElement;
    };
    interface HTMLRuxIconDonutLargeElement extends Components.RuxIconDonutLarge, HTMLStencilElement {
    }
    var HTMLRuxIconDonutLargeElement: {
        prototype: HTMLRuxIconDonutLargeElement;
        new (): HTMLRuxIconDonutLargeElement;
    };
    interface HTMLRuxIconDonutSmallElement extends Components.RuxIconDonutSmall, HTMLStencilElement {
    }
    var HTMLRuxIconDonutSmallElement: {
        prototype: HTMLRuxIconDonutSmallElement;
        new (): HTMLRuxIconDonutSmallElement;
    };
    interface HTMLRuxIconDraftsElement extends Components.RuxIconDrafts, HTMLStencilElement {
    }
    var HTMLRuxIconDraftsElement: {
        prototype: HTMLRuxIconDraftsElement;
        new (): HTMLRuxIconDraftsElement;
    };
    interface HTMLRuxIconDragHandleElement extends Components.RuxIconDragHandle, HTMLStencilElement {
    }
    var HTMLRuxIconDragHandleElement: {
        prototype: HTMLRuxIconDragHandleElement;
        new (): HTMLRuxIconDragHandleElement;
    };
    interface HTMLRuxIconDragIndicatorElement extends Components.RuxIconDragIndicator, HTMLStencilElement {
    }
    var HTMLRuxIconDragIndicatorElement: {
        prototype: HTMLRuxIconDragIndicatorElement;
        new (): HTMLRuxIconDragIndicatorElement;
    };
    interface HTMLRuxIconDriveEtaElement extends Components.RuxIconDriveEta, HTMLStencilElement {
    }
    var HTMLRuxIconDriveEtaElement: {
        prototype: HTMLRuxIconDriveEtaElement;
        new (): HTMLRuxIconDriveEtaElement;
    };
    interface HTMLRuxIconDuoElement extends Components.RuxIconDuo, HTMLStencilElement {
    }
    var HTMLRuxIconDuoElement: {
        prototype: HTMLRuxIconDuoElement;
        new (): HTMLRuxIconDuoElement;
    };
    interface HTMLRuxIconDvrElement extends Components.RuxIconDvr, HTMLStencilElement {
    }
    var HTMLRuxIconDvrElement: {
        prototype: HTMLRuxIconDvrElement;
        new (): HTMLRuxIconDvrElement;
    };
    interface HTMLRuxIconEditElement extends Components.RuxIconEdit, HTMLStencilElement {
    }
    var HTMLRuxIconEditElement: {
        prototype: HTMLRuxIconEditElement;
        new (): HTMLRuxIconEditElement;
    };
    interface HTMLRuxIconEditAttributesElement extends Components.RuxIconEditAttributes, HTMLStencilElement {
    }
    var HTMLRuxIconEditAttributesElement: {
        prototype: HTMLRuxIconEditAttributesElement;
        new (): HTMLRuxIconEditAttributesElement;
    };
    interface HTMLRuxIconEditLocationElement extends Components.RuxIconEditLocation, HTMLStencilElement {
    }
    var HTMLRuxIconEditLocationElement: {
        prototype: HTMLRuxIconEditLocationElement;
        new (): HTMLRuxIconEditLocationElement;
    };
    interface HTMLRuxIconEjectElement extends Components.RuxIconEject, HTMLStencilElement {
    }
    var HTMLRuxIconEjectElement: {
        prototype: HTMLRuxIconEjectElement;
        new (): HTMLRuxIconEjectElement;
    };
    interface HTMLRuxIconEmailElement extends Components.RuxIconEmail, HTMLStencilElement {
    }
    var HTMLRuxIconEmailElement: {
        prototype: HTMLRuxIconEmailElement;
        new (): HTMLRuxIconEmailElement;
    };
    interface HTMLRuxIconEnhancedEncryptionElement extends Components.RuxIconEnhancedEncryption, HTMLStencilElement {
    }
    var HTMLRuxIconEnhancedEncryptionElement: {
        prototype: HTMLRuxIconEnhancedEncryptionElement;
        new (): HTMLRuxIconEnhancedEncryptionElement;
    };
    interface HTMLRuxIconEqualizerElement extends Components.RuxIconEqualizer, HTMLStencilElement {
    }
    var HTMLRuxIconEqualizerElement: {
        prototype: HTMLRuxIconEqualizerElement;
        new (): HTMLRuxIconEqualizerElement;
    };
    interface HTMLRuxIconEquipmentElement extends Components.RuxIconEquipment, HTMLStencilElement {
    }
    var HTMLRuxIconEquipmentElement: {
        prototype: HTMLRuxIconEquipmentElement;
        new (): HTMLRuxIconEquipmentElement;
    };
    interface HTMLRuxIconErrorElement extends Components.RuxIconError, HTMLStencilElement {
    }
    var HTMLRuxIconErrorElement: {
        prototype: HTMLRuxIconErrorElement;
        new (): HTMLRuxIconErrorElement;
    };
    interface HTMLRuxIconErrorOutlineElement extends Components.RuxIconErrorOutline, HTMLStencilElement {
    }
    var HTMLRuxIconErrorOutlineElement: {
        prototype: HTMLRuxIconErrorOutlineElement;
        new (): HTMLRuxIconErrorOutlineElement;
    };
    interface HTMLRuxIconEuroSymbolElement extends Components.RuxIconEuroSymbol, HTMLStencilElement {
    }
    var HTMLRuxIconEuroSymbolElement: {
        prototype: HTMLRuxIconEuroSymbolElement;
        new (): HTMLRuxIconEuroSymbolElement;
    };
    interface HTMLRuxIconEvStationElement extends Components.RuxIconEvStation, HTMLStencilElement {
    }
    var HTMLRuxIconEvStationElement: {
        prototype: HTMLRuxIconEvStationElement;
        new (): HTMLRuxIconEvStationElement;
    };
    interface HTMLRuxIconEventElement extends Components.RuxIconEvent, HTMLStencilElement {
    }
    var HTMLRuxIconEventElement: {
        prototype: HTMLRuxIconEventElement;
        new (): HTMLRuxIconEventElement;
    };
    interface HTMLRuxIconEventAvailableElement extends Components.RuxIconEventAvailable, HTMLStencilElement {
    }
    var HTMLRuxIconEventAvailableElement: {
        prototype: HTMLRuxIconEventAvailableElement;
        new (): HTMLRuxIconEventAvailableElement;
    };
    interface HTMLRuxIconEventBusyElement extends Components.RuxIconEventBusy, HTMLStencilElement {
    }
    var HTMLRuxIconEventBusyElement: {
        prototype: HTMLRuxIconEventBusyElement;
        new (): HTMLRuxIconEventBusyElement;
    };
    interface HTMLRuxIconEventNoteElement extends Components.RuxIconEventNote, HTMLStencilElement {
    }
    var HTMLRuxIconEventNoteElement: {
        prototype: HTMLRuxIconEventNoteElement;
        new (): HTMLRuxIconEventNoteElement;
    };
    interface HTMLRuxIconExitToAppElement extends Components.RuxIconExitToApp, HTMLStencilElement {
    }
    var HTMLRuxIconExitToAppElement: {
        prototype: HTMLRuxIconExitToAppElement;
        new (): HTMLRuxIconExitToAppElement;
    };
    interface HTMLRuxIconExpandLessElement extends Components.RuxIconExpandLess, HTMLStencilElement {
    }
    var HTMLRuxIconExpandLessElement: {
        prototype: HTMLRuxIconExpandLessElement;
        new (): HTMLRuxIconExpandLessElement;
    };
    interface HTMLRuxIconExpandMoreElement extends Components.RuxIconExpandMore, HTMLStencilElement {
    }
    var HTMLRuxIconExpandMoreElement: {
        prototype: HTMLRuxIconExpandMoreElement;
        new (): HTMLRuxIconExpandMoreElement;
    };
    interface HTMLRuxIconExplicitElement extends Components.RuxIconExplicit, HTMLStencilElement {
    }
    var HTMLRuxIconExplicitElement: {
        prototype: HTMLRuxIconExplicitElement;
        new (): HTMLRuxIconExplicitElement;
    };
    interface HTMLRuxIconExploreElement extends Components.RuxIconExplore, HTMLStencilElement {
    }
    var HTMLRuxIconExploreElement: {
        prototype: HTMLRuxIconExploreElement;
        new (): HTMLRuxIconExploreElement;
    };
    interface HTMLRuxIconExploreOffElement extends Components.RuxIconExploreOff, HTMLStencilElement {
    }
    var HTMLRuxIconExploreOffElement: {
        prototype: HTMLRuxIconExploreOffElement;
        new (): HTMLRuxIconExploreOffElement;
    };
    interface HTMLRuxIconExposureElement extends Components.RuxIconExposure, HTMLStencilElement {
    }
    var HTMLRuxIconExposureElement: {
        prototype: HTMLRuxIconExposureElement;
        new (): HTMLRuxIconExposureElement;
    };
    interface HTMLRuxIconExposureNeg1Element extends Components.RuxIconExposureNeg1, HTMLStencilElement {
    }
    var HTMLRuxIconExposureNeg1Element: {
        prototype: HTMLRuxIconExposureNeg1Element;
        new (): HTMLRuxIconExposureNeg1Element;
    };
    interface HTMLRuxIconExposureNeg2Element extends Components.RuxIconExposureNeg2, HTMLStencilElement {
    }
    var HTMLRuxIconExposureNeg2Element: {
        prototype: HTMLRuxIconExposureNeg2Element;
        new (): HTMLRuxIconExposureNeg2Element;
    };
    interface HTMLRuxIconExposurePlus1Element extends Components.RuxIconExposurePlus1, HTMLStencilElement {
    }
    var HTMLRuxIconExposurePlus1Element: {
        prototype: HTMLRuxIconExposurePlus1Element;
        new (): HTMLRuxIconExposurePlus1Element;
    };
    interface HTMLRuxIconExposurePlus2Element extends Components.RuxIconExposurePlus2, HTMLStencilElement {
    }
    var HTMLRuxIconExposurePlus2Element: {
        prototype: HTMLRuxIconExposurePlus2Element;
        new (): HTMLRuxIconExposurePlus2Element;
    };
    interface HTMLRuxIconExposureZeroElement extends Components.RuxIconExposureZero, HTMLStencilElement {
    }
    var HTMLRuxIconExposureZeroElement: {
        prototype: HTMLRuxIconExposureZeroElement;
        new (): HTMLRuxIconExposureZeroElement;
    };
    interface HTMLRuxIconExtensionElement extends Components.RuxIconExtension, HTMLStencilElement {
    }
    var HTMLRuxIconExtensionElement: {
        prototype: HTMLRuxIconExtensionElement;
        new (): HTMLRuxIconExtensionElement;
    };
    interface HTMLRuxIconFaceElement extends Components.RuxIconFace, HTMLStencilElement {
    }
    var HTMLRuxIconFaceElement: {
        prototype: HTMLRuxIconFaceElement;
        new (): HTMLRuxIconFaceElement;
    };
    interface HTMLRuxIconFastForwardElement extends Components.RuxIconFastForward, HTMLStencilElement {
    }
    var HTMLRuxIconFastForwardElement: {
        prototype: HTMLRuxIconFastForwardElement;
        new (): HTMLRuxIconFastForwardElement;
    };
    interface HTMLRuxIconFastRewindElement extends Components.RuxIconFastRewind, HTMLStencilElement {
    }
    var HTMLRuxIconFastRewindElement: {
        prototype: HTMLRuxIconFastRewindElement;
        new (): HTMLRuxIconFastRewindElement;
    };
    interface HTMLRuxIconFastfoodElement extends Components.RuxIconFastfood, HTMLStencilElement {
    }
    var HTMLRuxIconFastfoodElement: {
        prototype: HTMLRuxIconFastfoodElement;
        new (): HTMLRuxIconFastfoodElement;
    };
    interface HTMLRuxIconFavoriteElement extends Components.RuxIconFavorite, HTMLStencilElement {
    }
    var HTMLRuxIconFavoriteElement: {
        prototype: HTMLRuxIconFavoriteElement;
        new (): HTMLRuxIconFavoriteElement;
    };
    interface HTMLRuxIconFavoriteBorderElement extends Components.RuxIconFavoriteBorder, HTMLStencilElement {
    }
    var HTMLRuxIconFavoriteBorderElement: {
        prototype: HTMLRuxIconFavoriteBorderElement;
        new (): HTMLRuxIconFavoriteBorderElement;
    };
    interface HTMLRuxIconFeaturedPlayListElement extends Components.RuxIconFeaturedPlayList, HTMLStencilElement {
    }
    var HTMLRuxIconFeaturedPlayListElement: {
        prototype: HTMLRuxIconFeaturedPlayListElement;
        new (): HTMLRuxIconFeaturedPlayListElement;
    };
    interface HTMLRuxIconFeaturedVideoElement extends Components.RuxIconFeaturedVideo, HTMLStencilElement {
    }
    var HTMLRuxIconFeaturedVideoElement: {
        prototype: HTMLRuxIconFeaturedVideoElement;
        new (): HTMLRuxIconFeaturedVideoElement;
    };
    interface HTMLRuxIconFeedbackElement extends Components.RuxIconFeedback, HTMLStencilElement {
    }
    var HTMLRuxIconFeedbackElement: {
        prototype: HTMLRuxIconFeedbackElement;
        new (): HTMLRuxIconFeedbackElement;
    };
    interface HTMLRuxIconFiberDvrElement extends Components.RuxIconFiberDvr, HTMLStencilElement {
    }
    var HTMLRuxIconFiberDvrElement: {
        prototype: HTMLRuxIconFiberDvrElement;
        new (): HTMLRuxIconFiberDvrElement;
    };
    interface HTMLRuxIconFiberManualRecordElement extends Components.RuxIconFiberManualRecord, HTMLStencilElement {
    }
    var HTMLRuxIconFiberManualRecordElement: {
        prototype: HTMLRuxIconFiberManualRecordElement;
        new (): HTMLRuxIconFiberManualRecordElement;
    };
    interface HTMLRuxIconFiberNewElement extends Components.RuxIconFiberNew, HTMLStencilElement {
    }
    var HTMLRuxIconFiberNewElement: {
        prototype: HTMLRuxIconFiberNewElement;
        new (): HTMLRuxIconFiberNewElement;
    };
    interface HTMLRuxIconFiberPinElement extends Components.RuxIconFiberPin, HTMLStencilElement {
    }
    var HTMLRuxIconFiberPinElement: {
        prototype: HTMLRuxIconFiberPinElement;
        new (): HTMLRuxIconFiberPinElement;
    };
    interface HTMLRuxIconFiberSmartRecordElement extends Components.RuxIconFiberSmartRecord, HTMLStencilElement {
    }
    var HTMLRuxIconFiberSmartRecordElement: {
        prototype: HTMLRuxIconFiberSmartRecordElement;
        new (): HTMLRuxIconFiberSmartRecordElement;
    };
    interface HTMLRuxIconFileCopyElement extends Components.RuxIconFileCopy, HTMLStencilElement {
    }
    var HTMLRuxIconFileCopyElement: {
        prototype: HTMLRuxIconFileCopyElement;
        new (): HTMLRuxIconFileCopyElement;
    };
    interface HTMLRuxIconFilterElement extends Components.RuxIconFilter, HTMLStencilElement {
    }
    var HTMLRuxIconFilterElement: {
        prototype: HTMLRuxIconFilterElement;
        new (): HTMLRuxIconFilterElement;
    };
    interface HTMLRuxIconFilter1Element extends Components.RuxIconFilter1, HTMLStencilElement {
    }
    var HTMLRuxIconFilter1Element: {
        prototype: HTMLRuxIconFilter1Element;
        new (): HTMLRuxIconFilter1Element;
    };
    interface HTMLRuxIconFilter2Element extends Components.RuxIconFilter2, HTMLStencilElement {
    }
    var HTMLRuxIconFilter2Element: {
        prototype: HTMLRuxIconFilter2Element;
        new (): HTMLRuxIconFilter2Element;
    };
    interface HTMLRuxIconFilter3Element extends Components.RuxIconFilter3, HTMLStencilElement {
    }
    var HTMLRuxIconFilter3Element: {
        prototype: HTMLRuxIconFilter3Element;
        new (): HTMLRuxIconFilter3Element;
    };
    interface HTMLRuxIconFilter4Element extends Components.RuxIconFilter4, HTMLStencilElement {
    }
    var HTMLRuxIconFilter4Element: {
        prototype: HTMLRuxIconFilter4Element;
        new (): HTMLRuxIconFilter4Element;
    };
    interface HTMLRuxIconFilter5Element extends Components.RuxIconFilter5, HTMLStencilElement {
    }
    var HTMLRuxIconFilter5Element: {
        prototype: HTMLRuxIconFilter5Element;
        new (): HTMLRuxIconFilter5Element;
    };
    interface HTMLRuxIconFilter6Element extends Components.RuxIconFilter6, HTMLStencilElement {
    }
    var HTMLRuxIconFilter6Element: {
        prototype: HTMLRuxIconFilter6Element;
        new (): HTMLRuxIconFilter6Element;
    };
    interface HTMLRuxIconFilter7Element extends Components.RuxIconFilter7, HTMLStencilElement {
    }
    var HTMLRuxIconFilter7Element: {
        prototype: HTMLRuxIconFilter7Element;
        new (): HTMLRuxIconFilter7Element;
    };
    interface HTMLRuxIconFilter8Element extends Components.RuxIconFilter8, HTMLStencilElement {
    }
    var HTMLRuxIconFilter8Element: {
        prototype: HTMLRuxIconFilter8Element;
        new (): HTMLRuxIconFilter8Element;
    };
    interface HTMLRuxIconFilter9Element extends Components.RuxIconFilter9, HTMLStencilElement {
    }
    var HTMLRuxIconFilter9Element: {
        prototype: HTMLRuxIconFilter9Element;
        new (): HTMLRuxIconFilter9Element;
    };
    interface HTMLRuxIconFilter9PlusElement extends Components.RuxIconFilter9Plus, HTMLStencilElement {
    }
    var HTMLRuxIconFilter9PlusElement: {
        prototype: HTMLRuxIconFilter9PlusElement;
        new (): HTMLRuxIconFilter9PlusElement;
    };
    interface HTMLRuxIconFilterBAndWElement extends Components.RuxIconFilterBAndW, HTMLStencilElement {
    }
    var HTMLRuxIconFilterBAndWElement: {
        prototype: HTMLRuxIconFilterBAndWElement;
        new (): HTMLRuxIconFilterBAndWElement;
    };
    interface HTMLRuxIconFilterCenterFocusElement extends Components.RuxIconFilterCenterFocus, HTMLStencilElement {
    }
    var HTMLRuxIconFilterCenterFocusElement: {
        prototype: HTMLRuxIconFilterCenterFocusElement;
        new (): HTMLRuxIconFilterCenterFocusElement;
    };
    interface HTMLRuxIconFilterDramaElement extends Components.RuxIconFilterDrama, HTMLStencilElement {
    }
    var HTMLRuxIconFilterDramaElement: {
        prototype: HTMLRuxIconFilterDramaElement;
        new (): HTMLRuxIconFilterDramaElement;
    };
    interface HTMLRuxIconFilterFramesElement extends Components.RuxIconFilterFrames, HTMLStencilElement {
    }
    var HTMLRuxIconFilterFramesElement: {
        prototype: HTMLRuxIconFilterFramesElement;
        new (): HTMLRuxIconFilterFramesElement;
    };
    interface HTMLRuxIconFilterHdrElement extends Components.RuxIconFilterHdr, HTMLStencilElement {
    }
    var HTMLRuxIconFilterHdrElement: {
        prototype: HTMLRuxIconFilterHdrElement;
        new (): HTMLRuxIconFilterHdrElement;
    };
    interface HTMLRuxIconFilterListElement extends Components.RuxIconFilterList, HTMLStencilElement {
    }
    var HTMLRuxIconFilterListElement: {
        prototype: HTMLRuxIconFilterListElement;
        new (): HTMLRuxIconFilterListElement;
    };
    interface HTMLRuxIconFilterNoneElement extends Components.RuxIconFilterNone, HTMLStencilElement {
    }
    var HTMLRuxIconFilterNoneElement: {
        prototype: HTMLRuxIconFilterNoneElement;
        new (): HTMLRuxIconFilterNoneElement;
    };
    interface HTMLRuxIconFilterTiltShiftElement extends Components.RuxIconFilterTiltShift, HTMLStencilElement {
    }
    var HTMLRuxIconFilterTiltShiftElement: {
        prototype: HTMLRuxIconFilterTiltShiftElement;
        new (): HTMLRuxIconFilterTiltShiftElement;
    };
    interface HTMLRuxIconFilterVintageElement extends Components.RuxIconFilterVintage, HTMLStencilElement {
    }
    var HTMLRuxIconFilterVintageElement: {
        prototype: HTMLRuxIconFilterVintageElement;
        new (): HTMLRuxIconFilterVintageElement;
    };
    interface HTMLRuxIconFindInPageElement extends Components.RuxIconFindInPage, HTMLStencilElement {
    }
    var HTMLRuxIconFindInPageElement: {
        prototype: HTMLRuxIconFindInPageElement;
        new (): HTMLRuxIconFindInPageElement;
    };
    interface HTMLRuxIconFindReplaceElement extends Components.RuxIconFindReplace, HTMLStencilElement {
    }
    var HTMLRuxIconFindReplaceElement: {
        prototype: HTMLRuxIconFindReplaceElement;
        new (): HTMLRuxIconFindReplaceElement;
    };
    interface HTMLRuxIconFingerprintElement extends Components.RuxIconFingerprint, HTMLStencilElement {
    }
    var HTMLRuxIconFingerprintElement: {
        prototype: HTMLRuxIconFingerprintElement;
        new (): HTMLRuxIconFingerprintElement;
    };
    interface HTMLRuxIconFirstPageElement extends Components.RuxIconFirstPage, HTMLStencilElement {
    }
    var HTMLRuxIconFirstPageElement: {
        prototype: HTMLRuxIconFirstPageElement;
        new (): HTMLRuxIconFirstPageElement;
    };
    interface HTMLRuxIconFitnessCenterElement extends Components.RuxIconFitnessCenter, HTMLStencilElement {
    }
    var HTMLRuxIconFitnessCenterElement: {
        prototype: HTMLRuxIconFitnessCenterElement;
        new (): HTMLRuxIconFitnessCenterElement;
    };
    interface HTMLRuxIconFlagElement extends Components.RuxIconFlag, HTMLStencilElement {
    }
    var HTMLRuxIconFlagElement: {
        prototype: HTMLRuxIconFlagElement;
        new (): HTMLRuxIconFlagElement;
    };
    interface HTMLRuxIconFlareElement extends Components.RuxIconFlare, HTMLStencilElement {
    }
    var HTMLRuxIconFlareElement: {
        prototype: HTMLRuxIconFlareElement;
        new (): HTMLRuxIconFlareElement;
    };
    interface HTMLRuxIconFlashAutoElement extends Components.RuxIconFlashAuto, HTMLStencilElement {
    }
    var HTMLRuxIconFlashAutoElement: {
        prototype: HTMLRuxIconFlashAutoElement;
        new (): HTMLRuxIconFlashAutoElement;
    };
    interface HTMLRuxIconFlashOffElement extends Components.RuxIconFlashOff, HTMLStencilElement {
    }
    var HTMLRuxIconFlashOffElement: {
        prototype: HTMLRuxIconFlashOffElement;
        new (): HTMLRuxIconFlashOffElement;
    };
    interface HTMLRuxIconFlashOnElement extends Components.RuxIconFlashOn, HTMLStencilElement {
    }
    var HTMLRuxIconFlashOnElement: {
        prototype: HTMLRuxIconFlashOnElement;
        new (): HTMLRuxIconFlashOnElement;
    };
    interface HTMLRuxIconFlightElement extends Components.RuxIconFlight, HTMLStencilElement {
    }
    var HTMLRuxIconFlightElement: {
        prototype: HTMLRuxIconFlightElement;
        new (): HTMLRuxIconFlightElement;
    };
    interface HTMLRuxIconFlightLandElement extends Components.RuxIconFlightLand, HTMLStencilElement {
    }
    var HTMLRuxIconFlightLandElement: {
        prototype: HTMLRuxIconFlightLandElement;
        new (): HTMLRuxIconFlightLandElement;
    };
    interface HTMLRuxIconFlightTakeoffElement extends Components.RuxIconFlightTakeoff, HTMLStencilElement {
    }
    var HTMLRuxIconFlightTakeoffElement: {
        prototype: HTMLRuxIconFlightTakeoffElement;
        new (): HTMLRuxIconFlightTakeoffElement;
    };
    interface HTMLRuxIconFlipElement extends Components.RuxIconFlip, HTMLStencilElement {
    }
    var HTMLRuxIconFlipElement: {
        prototype: HTMLRuxIconFlipElement;
        new (): HTMLRuxIconFlipElement;
    };
    interface HTMLRuxIconFlipToBackElement extends Components.RuxIconFlipToBack, HTMLStencilElement {
    }
    var HTMLRuxIconFlipToBackElement: {
        prototype: HTMLRuxIconFlipToBackElement;
        new (): HTMLRuxIconFlipToBackElement;
    };
    interface HTMLRuxIconFlipToFrontElement extends Components.RuxIconFlipToFront, HTMLStencilElement {
    }
    var HTMLRuxIconFlipToFrontElement: {
        prototype: HTMLRuxIconFlipToFrontElement;
        new (): HTMLRuxIconFlipToFrontElement;
    };
    interface HTMLRuxIconFolderElement extends Components.RuxIconFolder, HTMLStencilElement {
    }
    var HTMLRuxIconFolderElement: {
        prototype: HTMLRuxIconFolderElement;
        new (): HTMLRuxIconFolderElement;
    };
    interface HTMLRuxIconFolderOpenElement extends Components.RuxIconFolderOpen, HTMLStencilElement {
    }
    var HTMLRuxIconFolderOpenElement: {
        prototype: HTMLRuxIconFolderOpenElement;
        new (): HTMLRuxIconFolderOpenElement;
    };
    interface HTMLRuxIconFolderSharedElement extends Components.RuxIconFolderShared, HTMLStencilElement {
    }
    var HTMLRuxIconFolderSharedElement: {
        prototype: HTMLRuxIconFolderSharedElement;
        new (): HTMLRuxIconFolderSharedElement;
    };
    interface HTMLRuxIconFolderSpecialElement extends Components.RuxIconFolderSpecial, HTMLStencilElement {
    }
    var HTMLRuxIconFolderSpecialElement: {
        prototype: HTMLRuxIconFolderSpecialElement;
        new (): HTMLRuxIconFolderSpecialElement;
    };
    interface HTMLRuxIconFontDownloadElement extends Components.RuxIconFontDownload, HTMLStencilElement {
    }
    var HTMLRuxIconFontDownloadElement: {
        prototype: HTMLRuxIconFontDownloadElement;
        new (): HTMLRuxIconFontDownloadElement;
    };
    interface HTMLRuxIconFormatAlignCenterElement extends Components.RuxIconFormatAlignCenter, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignCenterElement: {
        prototype: HTMLRuxIconFormatAlignCenterElement;
        new (): HTMLRuxIconFormatAlignCenterElement;
    };
    interface HTMLRuxIconFormatAlignJustifyElement extends Components.RuxIconFormatAlignJustify, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignJustifyElement: {
        prototype: HTMLRuxIconFormatAlignJustifyElement;
        new (): HTMLRuxIconFormatAlignJustifyElement;
    };
    interface HTMLRuxIconFormatAlignLeftElement extends Components.RuxIconFormatAlignLeft, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignLeftElement: {
        prototype: HTMLRuxIconFormatAlignLeftElement;
        new (): HTMLRuxIconFormatAlignLeftElement;
    };
    interface HTMLRuxIconFormatAlignRightElement extends Components.RuxIconFormatAlignRight, HTMLStencilElement {
    }
    var HTMLRuxIconFormatAlignRightElement: {
        prototype: HTMLRuxIconFormatAlignRightElement;
        new (): HTMLRuxIconFormatAlignRightElement;
    };
    interface HTMLRuxIconFormatBoldElement extends Components.RuxIconFormatBold, HTMLStencilElement {
    }
    var HTMLRuxIconFormatBoldElement: {
        prototype: HTMLRuxIconFormatBoldElement;
        new (): HTMLRuxIconFormatBoldElement;
    };
    interface HTMLRuxIconFormatClearElement extends Components.RuxIconFormatClear, HTMLStencilElement {
    }
    var HTMLRuxIconFormatClearElement: {
        prototype: HTMLRuxIconFormatClearElement;
        new (): HTMLRuxIconFormatClearElement;
    };
    interface HTMLRuxIconFormatColorFillElement extends Components.RuxIconFormatColorFill, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorFillElement: {
        prototype: HTMLRuxIconFormatColorFillElement;
        new (): HTMLRuxIconFormatColorFillElement;
    };
    interface HTMLRuxIconFormatColorResetElement extends Components.RuxIconFormatColorReset, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorResetElement: {
        prototype: HTMLRuxIconFormatColorResetElement;
        new (): HTMLRuxIconFormatColorResetElement;
    };
    interface HTMLRuxIconFormatColorTextElement extends Components.RuxIconFormatColorText, HTMLStencilElement {
    }
    var HTMLRuxIconFormatColorTextElement: {
        prototype: HTMLRuxIconFormatColorTextElement;
        new (): HTMLRuxIconFormatColorTextElement;
    };
    interface HTMLRuxIconFormatIndentDecreaseElement extends Components.RuxIconFormatIndentDecrease, HTMLStencilElement {
    }
    var HTMLRuxIconFormatIndentDecreaseElement: {
        prototype: HTMLRuxIconFormatIndentDecreaseElement;
        new (): HTMLRuxIconFormatIndentDecreaseElement;
    };
    interface HTMLRuxIconFormatIndentIncreaseElement extends Components.RuxIconFormatIndentIncrease, HTMLStencilElement {
    }
    var HTMLRuxIconFormatIndentIncreaseElement: {
        prototype: HTMLRuxIconFormatIndentIncreaseElement;
        new (): HTMLRuxIconFormatIndentIncreaseElement;
    };
    interface HTMLRuxIconFormatItalicElement extends Components.RuxIconFormatItalic, HTMLStencilElement {
    }
    var HTMLRuxIconFormatItalicElement: {
        prototype: HTMLRuxIconFormatItalicElement;
        new (): HTMLRuxIconFormatItalicElement;
    };
    interface HTMLRuxIconFormatLineSpacingElement extends Components.RuxIconFormatLineSpacing, HTMLStencilElement {
    }
    var HTMLRuxIconFormatLineSpacingElement: {
        prototype: HTMLRuxIconFormatLineSpacingElement;
        new (): HTMLRuxIconFormatLineSpacingElement;
    };
    interface HTMLRuxIconFormatListBulletedElement extends Components.RuxIconFormatListBulleted, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListBulletedElement: {
        prototype: HTMLRuxIconFormatListBulletedElement;
        new (): HTMLRuxIconFormatListBulletedElement;
    };
    interface HTMLRuxIconFormatListNumberedElement extends Components.RuxIconFormatListNumbered, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListNumberedElement: {
        prototype: HTMLRuxIconFormatListNumberedElement;
        new (): HTMLRuxIconFormatListNumberedElement;
    };
    interface HTMLRuxIconFormatListNumberedRtlElement extends Components.RuxIconFormatListNumberedRtl, HTMLStencilElement {
    }
    var HTMLRuxIconFormatListNumberedRtlElement: {
        prototype: HTMLRuxIconFormatListNumberedRtlElement;
        new (): HTMLRuxIconFormatListNumberedRtlElement;
    };
    interface HTMLRuxIconFormatPaintElement extends Components.RuxIconFormatPaint, HTMLStencilElement {
    }
    var HTMLRuxIconFormatPaintElement: {
        prototype: HTMLRuxIconFormatPaintElement;
        new (): HTMLRuxIconFormatPaintElement;
    };
    interface HTMLRuxIconFormatQuoteElement extends Components.RuxIconFormatQuote, HTMLStencilElement {
    }
    var HTMLRuxIconFormatQuoteElement: {
        prototype: HTMLRuxIconFormatQuoteElement;
        new (): HTMLRuxIconFormatQuoteElement;
    };
    interface HTMLRuxIconFormatShapesElement extends Components.RuxIconFormatShapes, HTMLStencilElement {
    }
    var HTMLRuxIconFormatShapesElement: {
        prototype: HTMLRuxIconFormatShapesElement;
        new (): HTMLRuxIconFormatShapesElement;
    };
    interface HTMLRuxIconFormatSizeElement extends Components.RuxIconFormatSize, HTMLStencilElement {
    }
    var HTMLRuxIconFormatSizeElement: {
        prototype: HTMLRuxIconFormatSizeElement;
        new (): HTMLRuxIconFormatSizeElement;
    };
    interface HTMLRuxIconFormatStrikethroughElement extends Components.RuxIconFormatStrikethrough, HTMLStencilElement {
    }
    var HTMLRuxIconFormatStrikethroughElement: {
        prototype: HTMLRuxIconFormatStrikethroughElement;
        new (): HTMLRuxIconFormatStrikethroughElement;
    };
    interface HTMLRuxIconFormatTextdirectionLToRElement extends Components.RuxIconFormatTextdirectionLToR, HTMLStencilElement {
    }
    var HTMLRuxIconFormatTextdirectionLToRElement: {
        prototype: HTMLRuxIconFormatTextdirectionLToRElement;
        new (): HTMLRuxIconFormatTextdirectionLToRElement;
    };
    interface HTMLRuxIconFormatTextdirectionRToLElement extends Components.RuxIconFormatTextdirectionRToL, HTMLStencilElement {
    }
    var HTMLRuxIconFormatTextdirectionRToLElement: {
        prototype: HTMLRuxIconFormatTextdirectionRToLElement;
        new (): HTMLRuxIconFormatTextdirectionRToLElement;
    };
    interface HTMLRuxIconFormatUnderlinedElement extends Components.RuxIconFormatUnderlined, HTMLStencilElement {
    }
    var HTMLRuxIconFormatUnderlinedElement: {
        prototype: HTMLRuxIconFormatUnderlinedElement;
        new (): HTMLRuxIconFormatUnderlinedElement;
    };
    interface HTMLRuxIconForumElement extends Components.RuxIconForum, HTMLStencilElement {
    }
    var HTMLRuxIconForumElement: {
        prototype: HTMLRuxIconForumElement;
        new (): HTMLRuxIconForumElement;
    };
    interface HTMLRuxIconForwardElement extends Components.RuxIconForward, HTMLStencilElement {
    }
    var HTMLRuxIconForwardElement: {
        prototype: HTMLRuxIconForwardElement;
        new (): HTMLRuxIconForwardElement;
    };
    interface HTMLRuxIconForward10Element extends Components.RuxIconForward10, HTMLStencilElement {
    }
    var HTMLRuxIconForward10Element: {
        prototype: HTMLRuxIconForward10Element;
        new (): HTMLRuxIconForward10Element;
    };
    interface HTMLRuxIconForward30Element extends Components.RuxIconForward30, HTMLStencilElement {
    }
    var HTMLRuxIconForward30Element: {
        prototype: HTMLRuxIconForward30Element;
        new (): HTMLRuxIconForward30Element;
    };
    interface HTMLRuxIconForward5Element extends Components.RuxIconForward5, HTMLStencilElement {
    }
    var HTMLRuxIconForward5Element: {
        prototype: HTMLRuxIconForward5Element;
        new (): HTMLRuxIconForward5Element;
    };
    interface HTMLRuxIconFreeBreakfastElement extends Components.RuxIconFreeBreakfast, HTMLStencilElement {
    }
    var HTMLRuxIconFreeBreakfastElement: {
        prototype: HTMLRuxIconFreeBreakfastElement;
        new (): HTMLRuxIconFreeBreakfastElement;
    };
    interface HTMLRuxIconFullscreenElement extends Components.RuxIconFullscreen, HTMLStencilElement {
    }
    var HTMLRuxIconFullscreenElement: {
        prototype: HTMLRuxIconFullscreenElement;
        new (): HTMLRuxIconFullscreenElement;
    };
    interface HTMLRuxIconFullscreenExitElement extends Components.RuxIconFullscreenExit, HTMLStencilElement {
    }
    var HTMLRuxIconFullscreenExitElement: {
        prototype: HTMLRuxIconFullscreenExitElement;
        new (): HTMLRuxIconFullscreenExitElement;
    };
    interface HTMLRuxIconFunctionsElement extends Components.RuxIconFunctions, HTMLStencilElement {
    }
    var HTMLRuxIconFunctionsElement: {
        prototype: HTMLRuxIconFunctionsElement;
        new (): HTMLRuxIconFunctionsElement;
    };
    interface HTMLRuxIconGTranslateElement extends Components.RuxIconGTranslate, HTMLStencilElement {
    }
    var HTMLRuxIconGTranslateElement: {
        prototype: HTMLRuxIconGTranslateElement;
        new (): HTMLRuxIconGTranslateElement;
    };
    interface HTMLRuxIconGamepadElement extends Components.RuxIconGamepad, HTMLStencilElement {
    }
    var HTMLRuxIconGamepadElement: {
        prototype: HTMLRuxIconGamepadElement;
        new (): HTMLRuxIconGamepadElement;
    };
    interface HTMLRuxIconGamesElement extends Components.RuxIconGames, HTMLStencilElement {
    }
    var HTMLRuxIconGamesElement: {
        prototype: HTMLRuxIconGamesElement;
        new (): HTMLRuxIconGamesElement;
    };
    interface HTMLRuxIconGavelElement extends Components.RuxIconGavel, HTMLStencilElement {
    }
    var HTMLRuxIconGavelElement: {
        prototype: HTMLRuxIconGavelElement;
        new (): HTMLRuxIconGavelElement;
    };
    interface HTMLRuxIconGestureElement extends Components.RuxIconGesture, HTMLStencilElement {
    }
    var HTMLRuxIconGestureElement: {
        prototype: HTMLRuxIconGestureElement;
        new (): HTMLRuxIconGestureElement;
    };
    interface HTMLRuxIconGetAppElement extends Components.RuxIconGetApp, HTMLStencilElement {
    }
    var HTMLRuxIconGetAppElement: {
        prototype: HTMLRuxIconGetAppElement;
        new (): HTMLRuxIconGetAppElement;
    };
    interface HTMLRuxIconGifElement extends Components.RuxIconGif, HTMLStencilElement {
    }
    var HTMLRuxIconGifElement: {
        prototype: HTMLRuxIconGifElement;
        new (): HTMLRuxIconGifElement;
    };
    interface HTMLRuxIconGolfCourseElement extends Components.RuxIconGolfCourse, HTMLStencilElement {
    }
    var HTMLRuxIconGolfCourseElement: {
        prototype: HTMLRuxIconGolfCourseElement;
        new (): HTMLRuxIconGolfCourseElement;
    };
    interface HTMLRuxIconGpsFixedElement extends Components.RuxIconGpsFixed, HTMLStencilElement {
    }
    var HTMLRuxIconGpsFixedElement: {
        prototype: HTMLRuxIconGpsFixedElement;
        new (): HTMLRuxIconGpsFixedElement;
    };
    interface HTMLRuxIconGpsNotFixedElement extends Components.RuxIconGpsNotFixed, HTMLStencilElement {
    }
    var HTMLRuxIconGpsNotFixedElement: {
        prototype: HTMLRuxIconGpsNotFixedElement;
        new (): HTMLRuxIconGpsNotFixedElement;
    };
    interface HTMLRuxIconGpsOffElement extends Components.RuxIconGpsOff, HTMLStencilElement {
    }
    var HTMLRuxIconGpsOffElement: {
        prototype: HTMLRuxIconGpsOffElement;
        new (): HTMLRuxIconGpsOffElement;
    };
    interface HTMLRuxIconGradeElement extends Components.RuxIconGrade, HTMLStencilElement {
    }
    var HTMLRuxIconGradeElement: {
        prototype: HTMLRuxIconGradeElement;
        new (): HTMLRuxIconGradeElement;
    };
    interface HTMLRuxIconGradientElement extends Components.RuxIconGradient, HTMLStencilElement {
    }
    var HTMLRuxIconGradientElement: {
        prototype: HTMLRuxIconGradientElement;
        new (): HTMLRuxIconGradientElement;
    };
    interface HTMLRuxIconGrainElement extends Components.RuxIconGrain, HTMLStencilElement {
    }
    var HTMLRuxIconGrainElement: {
        prototype: HTMLRuxIconGrainElement;
        new (): HTMLRuxIconGrainElement;
    };
    interface HTMLRuxIconGraphicEqElement extends Components.RuxIconGraphicEq, HTMLStencilElement {
    }
    var HTMLRuxIconGraphicEqElement: {
        prototype: HTMLRuxIconGraphicEqElement;
        new (): HTMLRuxIconGraphicEqElement;
    };
    interface HTMLRuxIconGridOffElement extends Components.RuxIconGridOff, HTMLStencilElement {
    }
    var HTMLRuxIconGridOffElement: {
        prototype: HTMLRuxIconGridOffElement;
        new (): HTMLRuxIconGridOffElement;
    };
    interface HTMLRuxIconGridOnElement extends Components.RuxIconGridOn, HTMLStencilElement {
    }
    var HTMLRuxIconGridOnElement: {
        prototype: HTMLRuxIconGridOnElement;
        new (): HTMLRuxIconGridOnElement;
    };
    interface HTMLRuxIconGroupElement extends Components.RuxIconGroup, HTMLStencilElement {
    }
    var HTMLRuxIconGroupElement: {
        prototype: HTMLRuxIconGroupElement;
        new (): HTMLRuxIconGroupElement;
    };
    interface HTMLRuxIconGroupAddElement extends Components.RuxIconGroupAdd, HTMLStencilElement {
    }
    var HTMLRuxIconGroupAddElement: {
        prototype: HTMLRuxIconGroupAddElement;
        new (): HTMLRuxIconGroupAddElement;
    };
    interface HTMLRuxIconGroupWorkElement extends Components.RuxIconGroupWork, HTMLStencilElement {
    }
    var HTMLRuxIconGroupWorkElement: {
        prototype: HTMLRuxIconGroupWorkElement;
        new (): HTMLRuxIconGroupWorkElement;
    };
    interface HTMLRuxIconHardwareElement extends Components.RuxIconHardware, HTMLStencilElement {
    }
    var HTMLRuxIconHardwareElement: {
        prototype: HTMLRuxIconHardwareElement;
        new (): HTMLRuxIconHardwareElement;
    };
    interface HTMLRuxIconHdElement extends Components.RuxIconHd, HTMLStencilElement {
    }
    var HTMLRuxIconHdElement: {
        prototype: HTMLRuxIconHdElement;
        new (): HTMLRuxIconHdElement;
    };
    interface HTMLRuxIconHdrOffElement extends Components.RuxIconHdrOff, HTMLStencilElement {
    }
    var HTMLRuxIconHdrOffElement: {
        prototype: HTMLRuxIconHdrOffElement;
        new (): HTMLRuxIconHdrOffElement;
    };
    interface HTMLRuxIconHdrOnElement extends Components.RuxIconHdrOn, HTMLStencilElement {
    }
    var HTMLRuxIconHdrOnElement: {
        prototype: HTMLRuxIconHdrOnElement;
        new (): HTMLRuxIconHdrOnElement;
    };
    interface HTMLRuxIconHdrStrongElement extends Components.RuxIconHdrStrong, HTMLStencilElement {
    }
    var HTMLRuxIconHdrStrongElement: {
        prototype: HTMLRuxIconHdrStrongElement;
        new (): HTMLRuxIconHdrStrongElement;
    };
    interface HTMLRuxIconHdrWeakElement extends Components.RuxIconHdrWeak, HTMLStencilElement {
    }
    var HTMLRuxIconHdrWeakElement: {
        prototype: HTMLRuxIconHdrWeakElement;
        new (): HTMLRuxIconHdrWeakElement;
    };
    interface HTMLRuxIconHeadsetElement extends Components.RuxIconHeadset, HTMLStencilElement {
    }
    var HTMLRuxIconHeadsetElement: {
        prototype: HTMLRuxIconHeadsetElement;
        new (): HTMLRuxIconHeadsetElement;
    };
    interface HTMLRuxIconHeadsetMicElement extends Components.RuxIconHeadsetMic, HTMLStencilElement {
    }
    var HTMLRuxIconHeadsetMicElement: {
        prototype: HTMLRuxIconHeadsetMicElement;
        new (): HTMLRuxIconHeadsetMicElement;
    };
    interface HTMLRuxIconHealingElement extends Components.RuxIconHealing, HTMLStencilElement {
    }
    var HTMLRuxIconHealingElement: {
        prototype: HTMLRuxIconHealingElement;
        new (): HTMLRuxIconHealingElement;
    };
    interface HTMLRuxIconHearingElement extends Components.RuxIconHearing, HTMLStencilElement {
    }
    var HTMLRuxIconHearingElement: {
        prototype: HTMLRuxIconHearingElement;
        new (): HTMLRuxIconHearingElement;
    };
    interface HTMLRuxIconHelpElement extends Components.RuxIconHelp, HTMLStencilElement {
    }
    var HTMLRuxIconHelpElement: {
        prototype: HTMLRuxIconHelpElement;
        new (): HTMLRuxIconHelpElement;
    };
    interface HTMLRuxIconHelpOutlineElement extends Components.RuxIconHelpOutline, HTMLStencilElement {
    }
    var HTMLRuxIconHelpOutlineElement: {
        prototype: HTMLRuxIconHelpOutlineElement;
        new (): HTMLRuxIconHelpOutlineElement;
    };
    interface HTMLRuxIconHighQualityElement extends Components.RuxIconHighQuality, HTMLStencilElement {
    }
    var HTMLRuxIconHighQualityElement: {
        prototype: HTMLRuxIconHighQualityElement;
        new (): HTMLRuxIconHighQualityElement;
    };
    interface HTMLRuxIconHighlightElement extends Components.RuxIconHighlight, HTMLStencilElement {
    }
    var HTMLRuxIconHighlightElement: {
        prototype: HTMLRuxIconHighlightElement;
        new (): HTMLRuxIconHighlightElement;
    };
    interface HTMLRuxIconHighlightOffElement extends Components.RuxIconHighlightOff, HTMLStencilElement {
    }
    var HTMLRuxIconHighlightOffElement: {
        prototype: HTMLRuxIconHighlightOffElement;
        new (): HTMLRuxIconHighlightOffElement;
    };
    interface HTMLRuxIconHistoryElement extends Components.RuxIconHistory, HTMLStencilElement {
    }
    var HTMLRuxIconHistoryElement: {
        prototype: HTMLRuxIconHistoryElement;
        new (): HTMLRuxIconHistoryElement;
    };
    interface HTMLRuxIconHomeElement extends Components.RuxIconHome, HTMLStencilElement {
    }
    var HTMLRuxIconHomeElement: {
        prototype: HTMLRuxIconHomeElement;
        new (): HTMLRuxIconHomeElement;
    };
    interface HTMLRuxIconHorizontalSplitElement extends Components.RuxIconHorizontalSplit, HTMLStencilElement {
    }
    var HTMLRuxIconHorizontalSplitElement: {
        prototype: HTMLRuxIconHorizontalSplitElement;
        new (): HTMLRuxIconHorizontalSplitElement;
    };
    interface HTMLRuxIconHotTubElement extends Components.RuxIconHotTub, HTMLStencilElement {
    }
    var HTMLRuxIconHotTubElement: {
        prototype: HTMLRuxIconHotTubElement;
        new (): HTMLRuxIconHotTubElement;
    };
    interface HTMLRuxIconHotelElement extends Components.RuxIconHotel, HTMLStencilElement {
    }
    var HTMLRuxIconHotelElement: {
        prototype: HTMLRuxIconHotelElement;
        new (): HTMLRuxIconHotelElement;
    };
    interface HTMLRuxIconHourglassEmptyElement extends Components.RuxIconHourglassEmpty, HTMLStencilElement {
    }
    var HTMLRuxIconHourglassEmptyElement: {
        prototype: HTMLRuxIconHourglassEmptyElement;
        new (): HTMLRuxIconHourglassEmptyElement;
    };
    interface HTMLRuxIconHourglassFullElement extends Components.RuxIconHourglassFull, HTMLStencilElement {
    }
    var HTMLRuxIconHourglassFullElement: {
        prototype: HTMLRuxIconHourglassFullElement;
        new (): HTMLRuxIconHourglassFullElement;
    };
    interface HTMLRuxIconHowToRegElement extends Components.RuxIconHowToReg, HTMLStencilElement {
    }
    var HTMLRuxIconHowToRegElement: {
        prototype: HTMLRuxIconHowToRegElement;
        new (): HTMLRuxIconHowToRegElement;
    };
    interface HTMLRuxIconHowToVoteElement extends Components.RuxIconHowToVote, HTMLStencilElement {
    }
    var HTMLRuxIconHowToVoteElement: {
        prototype: HTMLRuxIconHowToVoteElement;
        new (): HTMLRuxIconHowToVoteElement;
    };
    interface HTMLRuxIconHttpElement extends Components.RuxIconHttp, HTMLStencilElement {
    }
    var HTMLRuxIconHttpElement: {
        prototype: HTMLRuxIconHttpElement;
        new (): HTMLRuxIconHttpElement;
    };
    interface HTMLRuxIconHttpsElement extends Components.RuxIconHttps, HTMLStencilElement {
    }
    var HTMLRuxIconHttpsElement: {
        prototype: HTMLRuxIconHttpsElement;
        new (): HTMLRuxIconHttpsElement;
    };
    interface HTMLRuxIconImageElement extends Components.RuxIconImage, HTMLStencilElement {
    }
    var HTMLRuxIconImageElement: {
        prototype: HTMLRuxIconImageElement;
        new (): HTMLRuxIconImageElement;
    };
    interface HTMLRuxIconImageAspectRatioElement extends Components.RuxIconImageAspectRatio, HTMLStencilElement {
    }
    var HTMLRuxIconImageAspectRatioElement: {
        prototype: HTMLRuxIconImageAspectRatioElement;
        new (): HTMLRuxIconImageAspectRatioElement;
    };
    interface HTMLRuxIconImageSearchElement extends Components.RuxIconImageSearch, HTMLStencilElement {
    }
    var HTMLRuxIconImageSearchElement: {
        prototype: HTMLRuxIconImageSearchElement;
        new (): HTMLRuxIconImageSearchElement;
    };
    interface HTMLRuxIconImportContactsElement extends Components.RuxIconImportContacts, HTMLStencilElement {
    }
    var HTMLRuxIconImportContactsElement: {
        prototype: HTMLRuxIconImportContactsElement;
        new (): HTMLRuxIconImportContactsElement;
    };
    interface HTMLRuxIconImportExportElement extends Components.RuxIconImportExport, HTMLStencilElement {
    }
    var HTMLRuxIconImportExportElement: {
        prototype: HTMLRuxIconImportExportElement;
        new (): HTMLRuxIconImportExportElement;
    };
    interface HTMLRuxIconImportantDevicesElement extends Components.RuxIconImportantDevices, HTMLStencilElement {
    }
    var HTMLRuxIconImportantDevicesElement: {
        prototype: HTMLRuxIconImportantDevicesElement;
        new (): HTMLRuxIconImportantDevicesElement;
    };
    interface HTMLRuxIconInboxElement extends Components.RuxIconInbox, HTMLStencilElement {
    }
    var HTMLRuxIconInboxElement: {
        prototype: HTMLRuxIconInboxElement;
        new (): HTMLRuxIconInboxElement;
    };
    interface HTMLRuxIconIndeterminateCheckBoxElement extends Components.RuxIconIndeterminateCheckBox, HTMLStencilElement {
    }
    var HTMLRuxIconIndeterminateCheckBoxElement: {
        prototype: HTMLRuxIconIndeterminateCheckBoxElement;
        new (): HTMLRuxIconIndeterminateCheckBoxElement;
    };
    interface HTMLRuxIconInfoElement extends Components.RuxIconInfo, HTMLStencilElement {
    }
    var HTMLRuxIconInfoElement: {
        prototype: HTMLRuxIconInfoElement;
        new (): HTMLRuxIconInfoElement;
    };
    interface HTMLRuxIconInputElement extends Components.RuxIconInput, HTMLStencilElement {
    }
    var HTMLRuxIconInputElement: {
        prototype: HTMLRuxIconInputElement;
        new (): HTMLRuxIconInputElement;
    };
    interface HTMLRuxIconInsertChartElement extends Components.RuxIconInsertChart, HTMLStencilElement {
    }
    var HTMLRuxIconInsertChartElement: {
        prototype: HTMLRuxIconInsertChartElement;
        new (): HTMLRuxIconInsertChartElement;
    };
    interface HTMLRuxIconInsertChartOutlinedElement extends Components.RuxIconInsertChartOutlined, HTMLStencilElement {
    }
    var HTMLRuxIconInsertChartOutlinedElement: {
        prototype: HTMLRuxIconInsertChartOutlinedElement;
        new (): HTMLRuxIconInsertChartOutlinedElement;
    };
    interface HTMLRuxIconInsertCommentElement extends Components.RuxIconInsertComment, HTMLStencilElement {
    }
    var HTMLRuxIconInsertCommentElement: {
        prototype: HTMLRuxIconInsertCommentElement;
        new (): HTMLRuxIconInsertCommentElement;
    };
    interface HTMLRuxIconInsertDriveFileElement extends Components.RuxIconInsertDriveFile, HTMLStencilElement {
    }
    var HTMLRuxIconInsertDriveFileElement: {
        prototype: HTMLRuxIconInsertDriveFileElement;
        new (): HTMLRuxIconInsertDriveFileElement;
    };
    interface HTMLRuxIconInsertEmoticonElement extends Components.RuxIconInsertEmoticon, HTMLStencilElement {
    }
    var HTMLRuxIconInsertEmoticonElement: {
        prototype: HTMLRuxIconInsertEmoticonElement;
        new (): HTMLRuxIconInsertEmoticonElement;
    };
    interface HTMLRuxIconInsertInvitationElement extends Components.RuxIconInsertInvitation, HTMLStencilElement {
    }
    var HTMLRuxIconInsertInvitationElement: {
        prototype: HTMLRuxIconInsertInvitationElement;
        new (): HTMLRuxIconInsertInvitationElement;
    };
    interface HTMLRuxIconInsertLinkElement extends Components.RuxIconInsertLink, HTMLStencilElement {
    }
    var HTMLRuxIconInsertLinkElement: {
        prototype: HTMLRuxIconInsertLinkElement;
        new (): HTMLRuxIconInsertLinkElement;
    };
    interface HTMLRuxIconInsertPhotoElement extends Components.RuxIconInsertPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconInsertPhotoElement: {
        prototype: HTMLRuxIconInsertPhotoElement;
        new (): HTMLRuxIconInsertPhotoElement;
    };
    interface HTMLRuxIconInvertColorsElement extends Components.RuxIconInvertColors, HTMLStencilElement {
    }
    var HTMLRuxIconInvertColorsElement: {
        prototype: HTMLRuxIconInvertColorsElement;
        new (): HTMLRuxIconInvertColorsElement;
    };
    interface HTMLRuxIconInvertColorsOffElement extends Components.RuxIconInvertColorsOff, HTMLStencilElement {
    }
    var HTMLRuxIconInvertColorsOffElement: {
        prototype: HTMLRuxIconInvertColorsOffElement;
        new (): HTMLRuxIconInvertColorsOffElement;
    };
    interface HTMLRuxIconIsoElement extends Components.RuxIconIso, HTMLStencilElement {
    }
    var HTMLRuxIconIsoElement: {
        prototype: HTMLRuxIconIsoElement;
        new (): HTMLRuxIconIsoElement;
    };
    interface HTMLRuxIconKeyboardElement extends Components.RuxIconKeyboard, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardElement: {
        prototype: HTMLRuxIconKeyboardElement;
        new (): HTMLRuxIconKeyboardElement;
    };
    interface HTMLRuxIconKeyboardArrowDownElement extends Components.RuxIconKeyboardArrowDown, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowDownElement: {
        prototype: HTMLRuxIconKeyboardArrowDownElement;
        new (): HTMLRuxIconKeyboardArrowDownElement;
    };
    interface HTMLRuxIconKeyboardArrowLeftElement extends Components.RuxIconKeyboardArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowLeftElement: {
        prototype: HTMLRuxIconKeyboardArrowLeftElement;
        new (): HTMLRuxIconKeyboardArrowLeftElement;
    };
    interface HTMLRuxIconKeyboardArrowRightElement extends Components.RuxIconKeyboardArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowRightElement: {
        prototype: HTMLRuxIconKeyboardArrowRightElement;
        new (): HTMLRuxIconKeyboardArrowRightElement;
    };
    interface HTMLRuxIconKeyboardArrowUpElement extends Components.RuxIconKeyboardArrowUp, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardArrowUpElement: {
        prototype: HTMLRuxIconKeyboardArrowUpElement;
        new (): HTMLRuxIconKeyboardArrowUpElement;
    };
    interface HTMLRuxIconKeyboardBackspaceElement extends Components.RuxIconKeyboardBackspace, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardBackspaceElement: {
        prototype: HTMLRuxIconKeyboardBackspaceElement;
        new (): HTMLRuxIconKeyboardBackspaceElement;
    };
    interface HTMLRuxIconKeyboardCapslockElement extends Components.RuxIconKeyboardCapslock, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardCapslockElement: {
        prototype: HTMLRuxIconKeyboardCapslockElement;
        new (): HTMLRuxIconKeyboardCapslockElement;
    };
    interface HTMLRuxIconKeyboardHideElement extends Components.RuxIconKeyboardHide, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardHideElement: {
        prototype: HTMLRuxIconKeyboardHideElement;
        new (): HTMLRuxIconKeyboardHideElement;
    };
    interface HTMLRuxIconKeyboardReturnElement extends Components.RuxIconKeyboardReturn, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardReturnElement: {
        prototype: HTMLRuxIconKeyboardReturnElement;
        new (): HTMLRuxIconKeyboardReturnElement;
    };
    interface HTMLRuxIconKeyboardTabElement extends Components.RuxIconKeyboardTab, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardTabElement: {
        prototype: HTMLRuxIconKeyboardTabElement;
        new (): HTMLRuxIconKeyboardTabElement;
    };
    interface HTMLRuxIconKeyboardVoiceElement extends Components.RuxIconKeyboardVoice, HTMLStencilElement {
    }
    var HTMLRuxIconKeyboardVoiceElement: {
        prototype: HTMLRuxIconKeyboardVoiceElement;
        new (): HTMLRuxIconKeyboardVoiceElement;
    };
    interface HTMLRuxIconKitchenElement extends Components.RuxIconKitchen, HTMLStencilElement {
    }
    var HTMLRuxIconKitchenElement: {
        prototype: HTMLRuxIconKitchenElement;
        new (): HTMLRuxIconKitchenElement;
    };
    interface HTMLRuxIconLabelElement extends Components.RuxIconLabel, HTMLStencilElement {
    }
    var HTMLRuxIconLabelElement: {
        prototype: HTMLRuxIconLabelElement;
        new (): HTMLRuxIconLabelElement;
    };
    interface HTMLRuxIconLabelImportantElement extends Components.RuxIconLabelImportant, HTMLStencilElement {
    }
    var HTMLRuxIconLabelImportantElement: {
        prototype: HTMLRuxIconLabelImportantElement;
        new (): HTMLRuxIconLabelImportantElement;
    };
    interface HTMLRuxIconLabelOffElement extends Components.RuxIconLabelOff, HTMLStencilElement {
    }
    var HTMLRuxIconLabelOffElement: {
        prototype: HTMLRuxIconLabelOffElement;
        new (): HTMLRuxIconLabelOffElement;
    };
    interface HTMLRuxIconLandscapeElement extends Components.RuxIconLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconLandscapeElement: {
        prototype: HTMLRuxIconLandscapeElement;
        new (): HTMLRuxIconLandscapeElement;
    };
    interface HTMLRuxIconLanguageElement extends Components.RuxIconLanguage, HTMLStencilElement {
    }
    var HTMLRuxIconLanguageElement: {
        prototype: HTMLRuxIconLanguageElement;
        new (): HTMLRuxIconLanguageElement;
    };
    interface HTMLRuxIconLaptopElement extends Components.RuxIconLaptop, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopElement: {
        prototype: HTMLRuxIconLaptopElement;
        new (): HTMLRuxIconLaptopElement;
    };
    interface HTMLRuxIconLaptopChromebookElement extends Components.RuxIconLaptopChromebook, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopChromebookElement: {
        prototype: HTMLRuxIconLaptopChromebookElement;
        new (): HTMLRuxIconLaptopChromebookElement;
    };
    interface HTMLRuxIconLaptopMacElement extends Components.RuxIconLaptopMac, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopMacElement: {
        prototype: HTMLRuxIconLaptopMacElement;
        new (): HTMLRuxIconLaptopMacElement;
    };
    interface HTMLRuxIconLaptopWindowsElement extends Components.RuxIconLaptopWindows, HTMLStencilElement {
    }
    var HTMLRuxIconLaptopWindowsElement: {
        prototype: HTMLRuxIconLaptopWindowsElement;
        new (): HTMLRuxIconLaptopWindowsElement;
    };
    interface HTMLRuxIconLastPageElement extends Components.RuxIconLastPage, HTMLStencilElement {
    }
    var HTMLRuxIconLastPageElement: {
        prototype: HTMLRuxIconLastPageElement;
        new (): HTMLRuxIconLastPageElement;
    };
    interface HTMLRuxIconLaunchElement extends Components.RuxIconLaunch, HTMLStencilElement {
    }
    var HTMLRuxIconLaunchElement: {
        prototype: HTMLRuxIconLaunchElement;
        new (): HTMLRuxIconLaunchElement;
    };
    interface HTMLRuxIconLayersElement extends Components.RuxIconLayers, HTMLStencilElement {
    }
    var HTMLRuxIconLayersElement: {
        prototype: HTMLRuxIconLayersElement;
        new (): HTMLRuxIconLayersElement;
    };
    interface HTMLRuxIconLayersClearElement extends Components.RuxIconLayersClear, HTMLStencilElement {
    }
    var HTMLRuxIconLayersClearElement: {
        prototype: HTMLRuxIconLayersClearElement;
        new (): HTMLRuxIconLayersClearElement;
    };
    interface HTMLRuxIconLeakAddElement extends Components.RuxIconLeakAdd, HTMLStencilElement {
    }
    var HTMLRuxIconLeakAddElement: {
        prototype: HTMLRuxIconLeakAddElement;
        new (): HTMLRuxIconLeakAddElement;
    };
    interface HTMLRuxIconLeakRemoveElement extends Components.RuxIconLeakRemove, HTMLStencilElement {
    }
    var HTMLRuxIconLeakRemoveElement: {
        prototype: HTMLRuxIconLeakRemoveElement;
        new (): HTMLRuxIconLeakRemoveElement;
    };
    interface HTMLRuxIconLensElement extends Components.RuxIconLens, HTMLStencilElement {
    }
    var HTMLRuxIconLensElement: {
        prototype: HTMLRuxIconLensElement;
        new (): HTMLRuxIconLensElement;
    };
    interface HTMLRuxIconLibraryAddElement extends Components.RuxIconLibraryAdd, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryAddElement: {
        prototype: HTMLRuxIconLibraryAddElement;
        new (): HTMLRuxIconLibraryAddElement;
    };
    interface HTMLRuxIconLibraryBooksElement extends Components.RuxIconLibraryBooks, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryBooksElement: {
        prototype: HTMLRuxIconLibraryBooksElement;
        new (): HTMLRuxIconLibraryBooksElement;
    };
    interface HTMLRuxIconLibraryMusicElement extends Components.RuxIconLibraryMusic, HTMLStencilElement {
    }
    var HTMLRuxIconLibraryMusicElement: {
        prototype: HTMLRuxIconLibraryMusicElement;
        new (): HTMLRuxIconLibraryMusicElement;
    };
    interface HTMLRuxIconLineStyleElement extends Components.RuxIconLineStyle, HTMLStencilElement {
    }
    var HTMLRuxIconLineStyleElement: {
        prototype: HTMLRuxIconLineStyleElement;
        new (): HTMLRuxIconLineStyleElement;
    };
    interface HTMLRuxIconLineWeightElement extends Components.RuxIconLineWeight, HTMLStencilElement {
    }
    var HTMLRuxIconLineWeightElement: {
        prototype: HTMLRuxIconLineWeightElement;
        new (): HTMLRuxIconLineWeightElement;
    };
    interface HTMLRuxIconLinearScaleElement extends Components.RuxIconLinearScale, HTMLStencilElement {
    }
    var HTMLRuxIconLinearScaleElement: {
        prototype: HTMLRuxIconLinearScaleElement;
        new (): HTMLRuxIconLinearScaleElement;
    };
    interface HTMLRuxIconLinkElement extends Components.RuxIconLink, HTMLStencilElement {
    }
    var HTMLRuxIconLinkElement: {
        prototype: HTMLRuxIconLinkElement;
        new (): HTMLRuxIconLinkElement;
    };
    interface HTMLRuxIconLinkOffElement extends Components.RuxIconLinkOff, HTMLStencilElement {
    }
    var HTMLRuxIconLinkOffElement: {
        prototype: HTMLRuxIconLinkOffElement;
        new (): HTMLRuxIconLinkOffElement;
    };
    interface HTMLRuxIconLinkedCameraElement extends Components.RuxIconLinkedCamera, HTMLStencilElement {
    }
    var HTMLRuxIconLinkedCameraElement: {
        prototype: HTMLRuxIconLinkedCameraElement;
        new (): HTMLRuxIconLinkedCameraElement;
    };
    interface HTMLRuxIconListElement extends Components.RuxIconList, HTMLStencilElement {
    }
    var HTMLRuxIconListElement: {
        prototype: HTMLRuxIconListElement;
        new (): HTMLRuxIconListElement;
    };
    interface HTMLRuxIconListAltElement extends Components.RuxIconListAlt, HTMLStencilElement {
    }
    var HTMLRuxIconListAltElement: {
        prototype: HTMLRuxIconListAltElement;
        new (): HTMLRuxIconListAltElement;
    };
    interface HTMLRuxIconLiveHelpElement extends Components.RuxIconLiveHelp, HTMLStencilElement {
    }
    var HTMLRuxIconLiveHelpElement: {
        prototype: HTMLRuxIconLiveHelpElement;
        new (): HTMLRuxIconLiveHelpElement;
    };
    interface HTMLRuxIconLiveTvElement extends Components.RuxIconLiveTv, HTMLStencilElement {
    }
    var HTMLRuxIconLiveTvElement: {
        prototype: HTMLRuxIconLiveTvElement;
        new (): HTMLRuxIconLiveTvElement;
    };
    interface HTMLRuxIconLocalActivityElement extends Components.RuxIconLocalActivity, HTMLStencilElement {
    }
    var HTMLRuxIconLocalActivityElement: {
        prototype: HTMLRuxIconLocalActivityElement;
        new (): HTMLRuxIconLocalActivityElement;
    };
    interface HTMLRuxIconLocalAirportElement extends Components.RuxIconLocalAirport, HTMLStencilElement {
    }
    var HTMLRuxIconLocalAirportElement: {
        prototype: HTMLRuxIconLocalAirportElement;
        new (): HTMLRuxIconLocalAirportElement;
    };
    interface HTMLRuxIconLocalAtmElement extends Components.RuxIconLocalAtm, HTMLStencilElement {
    }
    var HTMLRuxIconLocalAtmElement: {
        prototype: HTMLRuxIconLocalAtmElement;
        new (): HTMLRuxIconLocalAtmElement;
    };
    interface HTMLRuxIconLocalBarElement extends Components.RuxIconLocalBar, HTMLStencilElement {
    }
    var HTMLRuxIconLocalBarElement: {
        prototype: HTMLRuxIconLocalBarElement;
        new (): HTMLRuxIconLocalBarElement;
    };
    interface HTMLRuxIconLocalCafeElement extends Components.RuxIconLocalCafe, HTMLStencilElement {
    }
    var HTMLRuxIconLocalCafeElement: {
        prototype: HTMLRuxIconLocalCafeElement;
        new (): HTMLRuxIconLocalCafeElement;
    };
    interface HTMLRuxIconLocalCarWashElement extends Components.RuxIconLocalCarWash, HTMLStencilElement {
    }
    var HTMLRuxIconLocalCarWashElement: {
        prototype: HTMLRuxIconLocalCarWashElement;
        new (): HTMLRuxIconLocalCarWashElement;
    };
    interface HTMLRuxIconLocalConvenienceStoreElement extends Components.RuxIconLocalConvenienceStore, HTMLStencilElement {
    }
    var HTMLRuxIconLocalConvenienceStoreElement: {
        prototype: HTMLRuxIconLocalConvenienceStoreElement;
        new (): HTMLRuxIconLocalConvenienceStoreElement;
    };
    interface HTMLRuxIconLocalDiningElement extends Components.RuxIconLocalDining, HTMLStencilElement {
    }
    var HTMLRuxIconLocalDiningElement: {
        prototype: HTMLRuxIconLocalDiningElement;
        new (): HTMLRuxIconLocalDiningElement;
    };
    interface HTMLRuxIconLocalDrinkElement extends Components.RuxIconLocalDrink, HTMLStencilElement {
    }
    var HTMLRuxIconLocalDrinkElement: {
        prototype: HTMLRuxIconLocalDrinkElement;
        new (): HTMLRuxIconLocalDrinkElement;
    };
    interface HTMLRuxIconLocalGasStationElement extends Components.RuxIconLocalGasStation, HTMLStencilElement {
    }
    var HTMLRuxIconLocalGasStationElement: {
        prototype: HTMLRuxIconLocalGasStationElement;
        new (): HTMLRuxIconLocalGasStationElement;
    };
    interface HTMLRuxIconLocalGroceryStoreElement extends Components.RuxIconLocalGroceryStore, HTMLStencilElement {
    }
    var HTMLRuxIconLocalGroceryStoreElement: {
        prototype: HTMLRuxIconLocalGroceryStoreElement;
        new (): HTMLRuxIconLocalGroceryStoreElement;
    };
    interface HTMLRuxIconLocalHospitalElement extends Components.RuxIconLocalHospital, HTMLStencilElement {
    }
    var HTMLRuxIconLocalHospitalElement: {
        prototype: HTMLRuxIconLocalHospitalElement;
        new (): HTMLRuxIconLocalHospitalElement;
    };
    interface HTMLRuxIconLocalHotelElement extends Components.RuxIconLocalHotel, HTMLStencilElement {
    }
    var HTMLRuxIconLocalHotelElement: {
        prototype: HTMLRuxIconLocalHotelElement;
        new (): HTMLRuxIconLocalHotelElement;
    };
    interface HTMLRuxIconLocalLaundryServiceElement extends Components.RuxIconLocalLaundryService, HTMLStencilElement {
    }
    var HTMLRuxIconLocalLaundryServiceElement: {
        prototype: HTMLRuxIconLocalLaundryServiceElement;
        new (): HTMLRuxIconLocalLaundryServiceElement;
    };
    interface HTMLRuxIconLocalLibraryElement extends Components.RuxIconLocalLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconLocalLibraryElement: {
        prototype: HTMLRuxIconLocalLibraryElement;
        new (): HTMLRuxIconLocalLibraryElement;
    };
    interface HTMLRuxIconLocalMallElement extends Components.RuxIconLocalMall, HTMLStencilElement {
    }
    var HTMLRuxIconLocalMallElement: {
        prototype: HTMLRuxIconLocalMallElement;
        new (): HTMLRuxIconLocalMallElement;
    };
    interface HTMLRuxIconLocalMoviesElement extends Components.RuxIconLocalMovies, HTMLStencilElement {
    }
    var HTMLRuxIconLocalMoviesElement: {
        prototype: HTMLRuxIconLocalMoviesElement;
        new (): HTMLRuxIconLocalMoviesElement;
    };
    interface HTMLRuxIconLocalOfferElement extends Components.RuxIconLocalOffer, HTMLStencilElement {
    }
    var HTMLRuxIconLocalOfferElement: {
        prototype: HTMLRuxIconLocalOfferElement;
        new (): HTMLRuxIconLocalOfferElement;
    };
    interface HTMLRuxIconLocalParkingElement extends Components.RuxIconLocalParking, HTMLStencilElement {
    }
    var HTMLRuxIconLocalParkingElement: {
        prototype: HTMLRuxIconLocalParkingElement;
        new (): HTMLRuxIconLocalParkingElement;
    };
    interface HTMLRuxIconLocalPharmacyElement extends Components.RuxIconLocalPharmacy, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPharmacyElement: {
        prototype: HTMLRuxIconLocalPharmacyElement;
        new (): HTMLRuxIconLocalPharmacyElement;
    };
    interface HTMLRuxIconLocalPhoneElement extends Components.RuxIconLocalPhone, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPhoneElement: {
        prototype: HTMLRuxIconLocalPhoneElement;
        new (): HTMLRuxIconLocalPhoneElement;
    };
    interface HTMLRuxIconLocalPlayElement extends Components.RuxIconLocalPlay, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPlayElement: {
        prototype: HTMLRuxIconLocalPlayElement;
        new (): HTMLRuxIconLocalPlayElement;
    };
    interface HTMLRuxIconLocalPostOfficeElement extends Components.RuxIconLocalPostOffice, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPostOfficeElement: {
        prototype: HTMLRuxIconLocalPostOfficeElement;
        new (): HTMLRuxIconLocalPostOfficeElement;
    };
    interface HTMLRuxIconLocalPrintshopElement extends Components.RuxIconLocalPrintshop, HTMLStencilElement {
    }
    var HTMLRuxIconLocalPrintshopElement: {
        prototype: HTMLRuxIconLocalPrintshopElement;
        new (): HTMLRuxIconLocalPrintshopElement;
    };
    interface HTMLRuxIconLocalSeeElement extends Components.RuxIconLocalSee, HTMLStencilElement {
    }
    var HTMLRuxIconLocalSeeElement: {
        prototype: HTMLRuxIconLocalSeeElement;
        new (): HTMLRuxIconLocalSeeElement;
    };
    interface HTMLRuxIconLocalShippingElement extends Components.RuxIconLocalShipping, HTMLStencilElement {
    }
    var HTMLRuxIconLocalShippingElement: {
        prototype: HTMLRuxIconLocalShippingElement;
        new (): HTMLRuxIconLocalShippingElement;
    };
    interface HTMLRuxIconLocalTaxiElement extends Components.RuxIconLocalTaxi, HTMLStencilElement {
    }
    var HTMLRuxIconLocalTaxiElement: {
        prototype: HTMLRuxIconLocalTaxiElement;
        new (): HTMLRuxIconLocalTaxiElement;
    };
    interface HTMLRuxIconLocationCityElement extends Components.RuxIconLocationCity, HTMLStencilElement {
    }
    var HTMLRuxIconLocationCityElement: {
        prototype: HTMLRuxIconLocationCityElement;
        new (): HTMLRuxIconLocationCityElement;
    };
    interface HTMLRuxIconLocationDisabledElement extends Components.RuxIconLocationDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconLocationDisabledElement: {
        prototype: HTMLRuxIconLocationDisabledElement;
        new (): HTMLRuxIconLocationDisabledElement;
    };
    interface HTMLRuxIconLocationOffElement extends Components.RuxIconLocationOff, HTMLStencilElement {
    }
    var HTMLRuxIconLocationOffElement: {
        prototype: HTMLRuxIconLocationOffElement;
        new (): HTMLRuxIconLocationOffElement;
    };
    interface HTMLRuxIconLocationOnElement extends Components.RuxIconLocationOn, HTMLStencilElement {
    }
    var HTMLRuxIconLocationOnElement: {
        prototype: HTMLRuxIconLocationOnElement;
        new (): HTMLRuxIconLocationOnElement;
    };
    interface HTMLRuxIconLocationSearchingElement extends Components.RuxIconLocationSearching, HTMLStencilElement {
    }
    var HTMLRuxIconLocationSearchingElement: {
        prototype: HTMLRuxIconLocationSearchingElement;
        new (): HTMLRuxIconLocationSearchingElement;
    };
    interface HTMLRuxIconLockElement extends Components.RuxIconLock, HTMLStencilElement {
    }
    var HTMLRuxIconLockElement: {
        prototype: HTMLRuxIconLockElement;
        new (): HTMLRuxIconLockElement;
    };
    interface HTMLRuxIconLockOpenElement extends Components.RuxIconLockOpen, HTMLStencilElement {
    }
    var HTMLRuxIconLockOpenElement: {
        prototype: HTMLRuxIconLockOpenElement;
        new (): HTMLRuxIconLockOpenElement;
    };
    interface HTMLRuxIconLooksElement extends Components.RuxIconLooks, HTMLStencilElement {
    }
    var HTMLRuxIconLooksElement: {
        prototype: HTMLRuxIconLooksElement;
        new (): HTMLRuxIconLooksElement;
    };
    interface HTMLRuxIconLooks1Element extends Components.RuxIconLooks1, HTMLStencilElement {
    }
    var HTMLRuxIconLooks1Element: {
        prototype: HTMLRuxIconLooks1Element;
        new (): HTMLRuxIconLooks1Element;
    };
    interface HTMLRuxIconLooks2Element extends Components.RuxIconLooks2, HTMLStencilElement {
    }
    var HTMLRuxIconLooks2Element: {
        prototype: HTMLRuxIconLooks2Element;
        new (): HTMLRuxIconLooks2Element;
    };
    interface HTMLRuxIconLooks3Element extends Components.RuxIconLooks3, HTMLStencilElement {
    }
    var HTMLRuxIconLooks3Element: {
        prototype: HTMLRuxIconLooks3Element;
        new (): HTMLRuxIconLooks3Element;
    };
    interface HTMLRuxIconLooks4Element extends Components.RuxIconLooks4, HTMLStencilElement {
    }
    var HTMLRuxIconLooks4Element: {
        prototype: HTMLRuxIconLooks4Element;
        new (): HTMLRuxIconLooks4Element;
    };
    interface HTMLRuxIconLooks5Element extends Components.RuxIconLooks5, HTMLStencilElement {
    }
    var HTMLRuxIconLooks5Element: {
        prototype: HTMLRuxIconLooks5Element;
        new (): HTMLRuxIconLooks5Element;
    };
    interface HTMLRuxIconLooks6Element extends Components.RuxIconLooks6, HTMLStencilElement {
    }
    var HTMLRuxIconLooks6Element: {
        prototype: HTMLRuxIconLooks6Element;
        new (): HTMLRuxIconLooks6Element;
    };
    interface HTMLRuxIconLoopElement extends Components.RuxIconLoop, HTMLStencilElement {
    }
    var HTMLRuxIconLoopElement: {
        prototype: HTMLRuxIconLoopElement;
        new (): HTMLRuxIconLoopElement;
    };
    interface HTMLRuxIconLoupeElement extends Components.RuxIconLoupe, HTMLStencilElement {
    }
    var HTMLRuxIconLoupeElement: {
        prototype: HTMLRuxIconLoupeElement;
        new (): HTMLRuxIconLoupeElement;
    };
    interface HTMLRuxIconLowPriorityElement extends Components.RuxIconLowPriority, HTMLStencilElement {
    }
    var HTMLRuxIconLowPriorityElement: {
        prototype: HTMLRuxIconLowPriorityElement;
        new (): HTMLRuxIconLowPriorityElement;
    };
    interface HTMLRuxIconLoyaltyElement extends Components.RuxIconLoyalty, HTMLStencilElement {
    }
    var HTMLRuxIconLoyaltyElement: {
        prototype: HTMLRuxIconLoyaltyElement;
        new (): HTMLRuxIconLoyaltyElement;
    };
    interface HTMLRuxIconMailElement extends Components.RuxIconMail, HTMLStencilElement {
    }
    var HTMLRuxIconMailElement: {
        prototype: HTMLRuxIconMailElement;
        new (): HTMLRuxIconMailElement;
    };
    interface HTMLRuxIconMailOutlineElement extends Components.RuxIconMailOutline, HTMLStencilElement {
    }
    var HTMLRuxIconMailOutlineElement: {
        prototype: HTMLRuxIconMailOutlineElement;
        new (): HTMLRuxIconMailOutlineElement;
    };
    interface HTMLRuxIconMapElement extends Components.RuxIconMap, HTMLStencilElement {
    }
    var HTMLRuxIconMapElement: {
        prototype: HTMLRuxIconMapElement;
        new (): HTMLRuxIconMapElement;
    };
    interface HTMLRuxIconMarkunreadElement extends Components.RuxIconMarkunread, HTMLStencilElement {
    }
    var HTMLRuxIconMarkunreadElement: {
        prototype: HTMLRuxIconMarkunreadElement;
        new (): HTMLRuxIconMarkunreadElement;
    };
    interface HTMLRuxIconMarkunreadMailboxElement extends Components.RuxIconMarkunreadMailbox, HTMLStencilElement {
    }
    var HTMLRuxIconMarkunreadMailboxElement: {
        prototype: HTMLRuxIconMarkunreadMailboxElement;
        new (): HTMLRuxIconMarkunreadMailboxElement;
    };
    interface HTMLRuxIconMaximizeElement extends Components.RuxIconMaximize, HTMLStencilElement {
    }
    var HTMLRuxIconMaximizeElement: {
        prototype: HTMLRuxIconMaximizeElement;
        new (): HTMLRuxIconMaximizeElement;
    };
    interface HTMLRuxIconMeetingRoomElement extends Components.RuxIconMeetingRoom, HTMLStencilElement {
    }
    var HTMLRuxIconMeetingRoomElement: {
        prototype: HTMLRuxIconMeetingRoomElement;
        new (): HTMLRuxIconMeetingRoomElement;
    };
    interface HTMLRuxIconMemoryElement extends Components.RuxIconMemory, HTMLStencilElement {
    }
    var HTMLRuxIconMemoryElement: {
        prototype: HTMLRuxIconMemoryElement;
        new (): HTMLRuxIconMemoryElement;
    };
    interface HTMLRuxIconMenuElement extends Components.RuxIconMenu, HTMLStencilElement {
    }
    var HTMLRuxIconMenuElement: {
        prototype: HTMLRuxIconMenuElement;
        new (): HTMLRuxIconMenuElement;
    };
    interface HTMLRuxIconMergeTypeElement extends Components.RuxIconMergeType, HTMLStencilElement {
    }
    var HTMLRuxIconMergeTypeElement: {
        prototype: HTMLRuxIconMergeTypeElement;
        new (): HTMLRuxIconMergeTypeElement;
    };
    interface HTMLRuxIconMessageElement extends Components.RuxIconMessage, HTMLStencilElement {
    }
    var HTMLRuxIconMessageElement: {
        prototype: HTMLRuxIconMessageElement;
        new (): HTMLRuxIconMessageElement;
    };
    interface HTMLRuxIconMicElement extends Components.RuxIconMic, HTMLStencilElement {
    }
    var HTMLRuxIconMicElement: {
        prototype: HTMLRuxIconMicElement;
        new (): HTMLRuxIconMicElement;
    };
    interface HTMLRuxIconMicNoneElement extends Components.RuxIconMicNone, HTMLStencilElement {
    }
    var HTMLRuxIconMicNoneElement: {
        prototype: HTMLRuxIconMicNoneElement;
        new (): HTMLRuxIconMicNoneElement;
    };
    interface HTMLRuxIconMicOffElement extends Components.RuxIconMicOff, HTMLStencilElement {
    }
    var HTMLRuxIconMicOffElement: {
        prototype: HTMLRuxIconMicOffElement;
        new (): HTMLRuxIconMicOffElement;
    };
    interface HTMLRuxIconMinimizeElement extends Components.RuxIconMinimize, HTMLStencilElement {
    }
    var HTMLRuxIconMinimizeElement: {
        prototype: HTMLRuxIconMinimizeElement;
        new (): HTMLRuxIconMinimizeElement;
    };
    interface HTMLRuxIconMissedVideoCallElement extends Components.RuxIconMissedVideoCall, HTMLStencilElement {
    }
    var HTMLRuxIconMissedVideoCallElement: {
        prototype: HTMLRuxIconMissedVideoCallElement;
        new (): HTMLRuxIconMissedVideoCallElement;
    };
    interface HTMLRuxIconMissionElement extends Components.RuxIconMission, HTMLStencilElement {
    }
    var HTMLRuxIconMissionElement: {
        prototype: HTMLRuxIconMissionElement;
        new (): HTMLRuxIconMissionElement;
    };
    interface HTMLRuxIconMmsElement extends Components.RuxIconMms, HTMLStencilElement {
    }
    var HTMLRuxIconMmsElement: {
        prototype: HTMLRuxIconMmsElement;
        new (): HTMLRuxIconMmsElement;
    };
    interface HTMLRuxIconMobileFriendlyElement extends Components.RuxIconMobileFriendly, HTMLStencilElement {
    }
    var HTMLRuxIconMobileFriendlyElement: {
        prototype: HTMLRuxIconMobileFriendlyElement;
        new (): HTMLRuxIconMobileFriendlyElement;
    };
    interface HTMLRuxIconMobileOffElement extends Components.RuxIconMobileOff, HTMLStencilElement {
    }
    var HTMLRuxIconMobileOffElement: {
        prototype: HTMLRuxIconMobileOffElement;
        new (): HTMLRuxIconMobileOffElement;
    };
    interface HTMLRuxIconMobileScreenShareElement extends Components.RuxIconMobileScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconMobileScreenShareElement: {
        prototype: HTMLRuxIconMobileScreenShareElement;
        new (): HTMLRuxIconMobileScreenShareElement;
    };
    interface HTMLRuxIconModeCommentElement extends Components.RuxIconModeComment, HTMLStencilElement {
    }
    var HTMLRuxIconModeCommentElement: {
        prototype: HTMLRuxIconModeCommentElement;
        new (): HTMLRuxIconModeCommentElement;
    };
    interface HTMLRuxIconMonetizationOnElement extends Components.RuxIconMonetizationOn, HTMLStencilElement {
    }
    var HTMLRuxIconMonetizationOnElement: {
        prototype: HTMLRuxIconMonetizationOnElement;
        new (): HTMLRuxIconMonetizationOnElement;
    };
    interface HTMLRuxIconMoneyElement extends Components.RuxIconMoney, HTMLStencilElement {
    }
    var HTMLRuxIconMoneyElement: {
        prototype: HTMLRuxIconMoneyElement;
        new (): HTMLRuxIconMoneyElement;
    };
    interface HTMLRuxIconMoneyOffElement extends Components.RuxIconMoneyOff, HTMLStencilElement {
    }
    var HTMLRuxIconMoneyOffElement: {
        prototype: HTMLRuxIconMoneyOffElement;
        new (): HTMLRuxIconMoneyOffElement;
    };
    interface HTMLRuxIconMonochromePhotosElement extends Components.RuxIconMonochromePhotos, HTMLStencilElement {
    }
    var HTMLRuxIconMonochromePhotosElement: {
        prototype: HTMLRuxIconMonochromePhotosElement;
        new (): HTMLRuxIconMonochromePhotosElement;
    };
    interface HTMLRuxIconMoodElement extends Components.RuxIconMood, HTMLStencilElement {
    }
    var HTMLRuxIconMoodElement: {
        prototype: HTMLRuxIconMoodElement;
        new (): HTMLRuxIconMoodElement;
    };
    interface HTMLRuxIconMoodBadElement extends Components.RuxIconMoodBad, HTMLStencilElement {
    }
    var HTMLRuxIconMoodBadElement: {
        prototype: HTMLRuxIconMoodBadElement;
        new (): HTMLRuxIconMoodBadElement;
    };
    interface HTMLRuxIconMoreElement extends Components.RuxIconMore, HTMLStencilElement {
    }
    var HTMLRuxIconMoreElement: {
        prototype: HTMLRuxIconMoreElement;
        new (): HTMLRuxIconMoreElement;
    };
    interface HTMLRuxIconMoreHorizElement extends Components.RuxIconMoreHoriz, HTMLStencilElement {
    }
    var HTMLRuxIconMoreHorizElement: {
        prototype: HTMLRuxIconMoreHorizElement;
        new (): HTMLRuxIconMoreHorizElement;
    };
    interface HTMLRuxIconMoreVertElement extends Components.RuxIconMoreVert, HTMLStencilElement {
    }
    var HTMLRuxIconMoreVertElement: {
        prototype: HTMLRuxIconMoreVertElement;
        new (): HTMLRuxIconMoreVertElement;
    };
    interface HTMLRuxIconMotorcycleElement extends Components.RuxIconMotorcycle, HTMLStencilElement {
    }
    var HTMLRuxIconMotorcycleElement: {
        prototype: HTMLRuxIconMotorcycleElement;
        new (): HTMLRuxIconMotorcycleElement;
    };
    interface HTMLRuxIconMouseElement extends Components.RuxIconMouse, HTMLStencilElement {
    }
    var HTMLRuxIconMouseElement: {
        prototype: HTMLRuxIconMouseElement;
        new (): HTMLRuxIconMouseElement;
    };
    interface HTMLRuxIconMoveToInboxElement extends Components.RuxIconMoveToInbox, HTMLStencilElement {
    }
    var HTMLRuxIconMoveToInboxElement: {
        prototype: HTMLRuxIconMoveToInboxElement;
        new (): HTMLRuxIconMoveToInboxElement;
    };
    interface HTMLRuxIconMovieElement extends Components.RuxIconMovie, HTMLStencilElement {
    }
    var HTMLRuxIconMovieElement: {
        prototype: HTMLRuxIconMovieElement;
        new (): HTMLRuxIconMovieElement;
    };
    interface HTMLRuxIconMovieCreationElement extends Components.RuxIconMovieCreation, HTMLStencilElement {
    }
    var HTMLRuxIconMovieCreationElement: {
        prototype: HTMLRuxIconMovieCreationElement;
        new (): HTMLRuxIconMovieCreationElement;
    };
    interface HTMLRuxIconMovieFilterElement extends Components.RuxIconMovieFilter, HTMLStencilElement {
    }
    var HTMLRuxIconMovieFilterElement: {
        prototype: HTMLRuxIconMovieFilterElement;
        new (): HTMLRuxIconMovieFilterElement;
    };
    interface HTMLRuxIconMultilineChartElement extends Components.RuxIconMultilineChart, HTMLStencilElement {
    }
    var HTMLRuxIconMultilineChartElement: {
        prototype: HTMLRuxIconMultilineChartElement;
        new (): HTMLRuxIconMultilineChartElement;
    };
    interface HTMLRuxIconMusicNoteElement extends Components.RuxIconMusicNote, HTMLStencilElement {
    }
    var HTMLRuxIconMusicNoteElement: {
        prototype: HTMLRuxIconMusicNoteElement;
        new (): HTMLRuxIconMusicNoteElement;
    };
    interface HTMLRuxIconMusicOffElement extends Components.RuxIconMusicOff, HTMLStencilElement {
    }
    var HTMLRuxIconMusicOffElement: {
        prototype: HTMLRuxIconMusicOffElement;
        new (): HTMLRuxIconMusicOffElement;
    };
    interface HTMLRuxIconMusicVideoElement extends Components.RuxIconMusicVideo, HTMLStencilElement {
    }
    var HTMLRuxIconMusicVideoElement: {
        prototype: HTMLRuxIconMusicVideoElement;
        new (): HTMLRuxIconMusicVideoElement;
    };
    interface HTMLRuxIconMyLocationElement extends Components.RuxIconMyLocation, HTMLStencilElement {
    }
    var HTMLRuxIconMyLocationElement: {
        prototype: HTMLRuxIconMyLocationElement;
        new (): HTMLRuxIconMyLocationElement;
    };
    interface HTMLRuxIconNatureElement extends Components.RuxIconNature, HTMLStencilElement {
    }
    var HTMLRuxIconNatureElement: {
        prototype: HTMLRuxIconNatureElement;
        new (): HTMLRuxIconNatureElement;
    };
    interface HTMLRuxIconNaturePeopleElement extends Components.RuxIconNaturePeople, HTMLStencilElement {
    }
    var HTMLRuxIconNaturePeopleElement: {
        prototype: HTMLRuxIconNaturePeopleElement;
        new (): HTMLRuxIconNaturePeopleElement;
    };
    interface HTMLRuxIconNavigateBeforeElement extends Components.RuxIconNavigateBefore, HTMLStencilElement {
    }
    var HTMLRuxIconNavigateBeforeElement: {
        prototype: HTMLRuxIconNavigateBeforeElement;
        new (): HTMLRuxIconNavigateBeforeElement;
    };
    interface HTMLRuxIconNavigateNextElement extends Components.RuxIconNavigateNext, HTMLStencilElement {
    }
    var HTMLRuxIconNavigateNextElement: {
        prototype: HTMLRuxIconNavigateNextElement;
        new (): HTMLRuxIconNavigateNextElement;
    };
    interface HTMLRuxIconNavigationElement extends Components.RuxIconNavigation, HTMLStencilElement {
    }
    var HTMLRuxIconNavigationElement: {
        prototype: HTMLRuxIconNavigationElement;
        new (): HTMLRuxIconNavigationElement;
    };
    interface HTMLRuxIconNearMeElement extends Components.RuxIconNearMe, HTMLStencilElement {
    }
    var HTMLRuxIconNearMeElement: {
        prototype: HTMLRuxIconNearMeElement;
        new (): HTMLRuxIconNearMeElement;
    };
    interface HTMLRuxIconNetcomElement extends Components.RuxIconNetcom, HTMLStencilElement {
    }
    var HTMLRuxIconNetcomElement: {
        prototype: HTMLRuxIconNetcomElement;
        new (): HTMLRuxIconNetcomElement;
    };
    interface HTMLRuxIconNetworkCellElement extends Components.RuxIconNetworkCell, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkCellElement: {
        prototype: HTMLRuxIconNetworkCellElement;
        new (): HTMLRuxIconNetworkCellElement;
    };
    interface HTMLRuxIconNetworkCheckElement extends Components.RuxIconNetworkCheck, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkCheckElement: {
        prototype: HTMLRuxIconNetworkCheckElement;
        new (): HTMLRuxIconNetworkCheckElement;
    };
    interface HTMLRuxIconNetworkLockedElement extends Components.RuxIconNetworkLocked, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkLockedElement: {
        prototype: HTMLRuxIconNetworkLockedElement;
        new (): HTMLRuxIconNetworkLockedElement;
    };
    interface HTMLRuxIconNetworkWifiElement extends Components.RuxIconNetworkWifi, HTMLStencilElement {
    }
    var HTMLRuxIconNetworkWifiElement: {
        prototype: HTMLRuxIconNetworkWifiElement;
        new (): HTMLRuxIconNetworkWifiElement;
    };
    interface HTMLRuxIconNewReleasesElement extends Components.RuxIconNewReleases, HTMLStencilElement {
    }
    var HTMLRuxIconNewReleasesElement: {
        prototype: HTMLRuxIconNewReleasesElement;
        new (): HTMLRuxIconNewReleasesElement;
    };
    interface HTMLRuxIconNextWeekElement extends Components.RuxIconNextWeek, HTMLStencilElement {
    }
    var HTMLRuxIconNextWeekElement: {
        prototype: HTMLRuxIconNextWeekElement;
        new (): HTMLRuxIconNextWeekElement;
    };
    interface HTMLRuxIconNfcElement extends Components.RuxIconNfc, HTMLStencilElement {
    }
    var HTMLRuxIconNfcElement: {
        prototype: HTMLRuxIconNfcElement;
        new (): HTMLRuxIconNfcElement;
    };
    interface HTMLRuxIconNoEncryptionElement extends Components.RuxIconNoEncryption, HTMLStencilElement {
    }
    var HTMLRuxIconNoEncryptionElement: {
        prototype: HTMLRuxIconNoEncryptionElement;
        new (): HTMLRuxIconNoEncryptionElement;
    };
    interface HTMLRuxIconNoMeetingRoomElement extends Components.RuxIconNoMeetingRoom, HTMLStencilElement {
    }
    var HTMLRuxIconNoMeetingRoomElement: {
        prototype: HTMLRuxIconNoMeetingRoomElement;
        new (): HTMLRuxIconNoMeetingRoomElement;
    };
    interface HTMLRuxIconNoSimElement extends Components.RuxIconNoSim, HTMLStencilElement {
    }
    var HTMLRuxIconNoSimElement: {
        prototype: HTMLRuxIconNoSimElement;
        new (): HTMLRuxIconNoSimElement;
    };
    interface HTMLRuxIconNotInterestedElement extends Components.RuxIconNotInterested, HTMLStencilElement {
    }
    var HTMLRuxIconNotInterestedElement: {
        prototype: HTMLRuxIconNotInterestedElement;
        new (): HTMLRuxIconNotInterestedElement;
    };
    interface HTMLRuxIconNotListedLocationElement extends Components.RuxIconNotListedLocation, HTMLStencilElement {
    }
    var HTMLRuxIconNotListedLocationElement: {
        prototype: HTMLRuxIconNotListedLocationElement;
        new (): HTMLRuxIconNotListedLocationElement;
    };
    interface HTMLRuxIconNoteElement extends Components.RuxIconNote, HTMLStencilElement {
    }
    var HTMLRuxIconNoteElement: {
        prototype: HTMLRuxIconNoteElement;
        new (): HTMLRuxIconNoteElement;
    };
    interface HTMLRuxIconNoteAddElement extends Components.RuxIconNoteAdd, HTMLStencilElement {
    }
    var HTMLRuxIconNoteAddElement: {
        prototype: HTMLRuxIconNoteAddElement;
        new (): HTMLRuxIconNoteAddElement;
    };
    interface HTMLRuxIconNotesElement extends Components.RuxIconNotes, HTMLStencilElement {
    }
    var HTMLRuxIconNotesElement: {
        prototype: HTMLRuxIconNotesElement;
        new (): HTMLRuxIconNotesElement;
    };
    interface HTMLRuxIconNotificationImportantElement extends Components.RuxIconNotificationImportant, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationImportantElement: {
        prototype: HTMLRuxIconNotificationImportantElement;
        new (): HTMLRuxIconNotificationImportantElement;
    };
    interface HTMLRuxIconNotificationsElement extends Components.RuxIconNotifications, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsElement: {
        prototype: HTMLRuxIconNotificationsElement;
        new (): HTMLRuxIconNotificationsElement;
    };
    interface HTMLRuxIconNotificationsActiveElement extends Components.RuxIconNotificationsActive, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsActiveElement: {
        prototype: HTMLRuxIconNotificationsActiveElement;
        new (): HTMLRuxIconNotificationsActiveElement;
    };
    interface HTMLRuxIconNotificationsNoneElement extends Components.RuxIconNotificationsNone, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsNoneElement: {
        prototype: HTMLRuxIconNotificationsNoneElement;
        new (): HTMLRuxIconNotificationsNoneElement;
    };
    interface HTMLRuxIconNotificationsOffElement extends Components.RuxIconNotificationsOff, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsOffElement: {
        prototype: HTMLRuxIconNotificationsOffElement;
        new (): HTMLRuxIconNotificationsOffElement;
    };
    interface HTMLRuxIconNotificationsPausedElement extends Components.RuxIconNotificationsPaused, HTMLStencilElement {
    }
    var HTMLRuxIconNotificationsPausedElement: {
        prototype: HTMLRuxIconNotificationsPausedElement;
        new (): HTMLRuxIconNotificationsPausedElement;
    };
    interface HTMLRuxIconOfflineBoltElement extends Components.RuxIconOfflineBolt, HTMLStencilElement {
    }
    var HTMLRuxIconOfflineBoltElement: {
        prototype: HTMLRuxIconOfflineBoltElement;
        new (): HTMLRuxIconOfflineBoltElement;
    };
    interface HTMLRuxIconOfflinePinElement extends Components.RuxIconOfflinePin, HTMLStencilElement {
    }
    var HTMLRuxIconOfflinePinElement: {
        prototype: HTMLRuxIconOfflinePinElement;
        new (): HTMLRuxIconOfflinePinElement;
    };
    interface HTMLRuxIconOndemandVideoElement extends Components.RuxIconOndemandVideo, HTMLStencilElement {
    }
    var HTMLRuxIconOndemandVideoElement: {
        prototype: HTMLRuxIconOndemandVideoElement;
        new (): HTMLRuxIconOndemandVideoElement;
    };
    interface HTMLRuxIconOpacityElement extends Components.RuxIconOpacity, HTMLStencilElement {
    }
    var HTMLRuxIconOpacityElement: {
        prototype: HTMLRuxIconOpacityElement;
        new (): HTMLRuxIconOpacityElement;
    };
    interface HTMLRuxIconOpenInBrowserElement extends Components.RuxIconOpenInBrowser, HTMLStencilElement {
    }
    var HTMLRuxIconOpenInBrowserElement: {
        prototype: HTMLRuxIconOpenInBrowserElement;
        new (): HTMLRuxIconOpenInBrowserElement;
    };
    interface HTMLRuxIconOpenInNewElement extends Components.RuxIconOpenInNew, HTMLStencilElement {
    }
    var HTMLRuxIconOpenInNewElement: {
        prototype: HTMLRuxIconOpenInNewElement;
        new (): HTMLRuxIconOpenInNewElement;
    };
    interface HTMLRuxIconOpenWithElement extends Components.RuxIconOpenWith, HTMLStencilElement {
    }
    var HTMLRuxIconOpenWithElement: {
        prototype: HTMLRuxIconOpenWithElement;
        new (): HTMLRuxIconOpenWithElement;
    };
    interface HTMLRuxIconOutlinedFlagElement extends Components.RuxIconOutlinedFlag, HTMLStencilElement {
    }
    var HTMLRuxIconOutlinedFlagElement: {
        prototype: HTMLRuxIconOutlinedFlagElement;
        new (): HTMLRuxIconOutlinedFlagElement;
    };
    interface HTMLRuxIconPagesElement extends Components.RuxIconPages, HTMLStencilElement {
    }
    var HTMLRuxIconPagesElement: {
        prototype: HTMLRuxIconPagesElement;
        new (): HTMLRuxIconPagesElement;
    };
    interface HTMLRuxIconPageviewElement extends Components.RuxIconPageview, HTMLStencilElement {
    }
    var HTMLRuxIconPageviewElement: {
        prototype: HTMLRuxIconPageviewElement;
        new (): HTMLRuxIconPageviewElement;
    };
    interface HTMLRuxIconPaletteElement extends Components.RuxIconPalette, HTMLStencilElement {
    }
    var HTMLRuxIconPaletteElement: {
        prototype: HTMLRuxIconPaletteElement;
        new (): HTMLRuxIconPaletteElement;
    };
    interface HTMLRuxIconPanToolElement extends Components.RuxIconPanTool, HTMLStencilElement {
    }
    var HTMLRuxIconPanToolElement: {
        prototype: HTMLRuxIconPanToolElement;
        new (): HTMLRuxIconPanToolElement;
    };
    interface HTMLRuxIconPanoramaElement extends Components.RuxIconPanorama, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaElement: {
        prototype: HTMLRuxIconPanoramaElement;
        new (): HTMLRuxIconPanoramaElement;
    };
    interface HTMLRuxIconPanoramaFishEyeElement extends Components.RuxIconPanoramaFishEye, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaFishEyeElement: {
        prototype: HTMLRuxIconPanoramaFishEyeElement;
        new (): HTMLRuxIconPanoramaFishEyeElement;
    };
    interface HTMLRuxIconPanoramaHorizontalElement extends Components.RuxIconPanoramaHorizontal, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaHorizontalElement: {
        prototype: HTMLRuxIconPanoramaHorizontalElement;
        new (): HTMLRuxIconPanoramaHorizontalElement;
    };
    interface HTMLRuxIconPanoramaVerticalElement extends Components.RuxIconPanoramaVertical, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaVerticalElement: {
        prototype: HTMLRuxIconPanoramaVerticalElement;
        new (): HTMLRuxIconPanoramaVerticalElement;
    };
    interface HTMLRuxIconPanoramaWideAngleElement extends Components.RuxIconPanoramaWideAngle, HTMLStencilElement {
    }
    var HTMLRuxIconPanoramaWideAngleElement: {
        prototype: HTMLRuxIconPanoramaWideAngleElement;
        new (): HTMLRuxIconPanoramaWideAngleElement;
    };
    interface HTMLRuxIconPartyModeElement extends Components.RuxIconPartyMode, HTMLStencilElement {
    }
    var HTMLRuxIconPartyModeElement: {
        prototype: HTMLRuxIconPartyModeElement;
        new (): HTMLRuxIconPartyModeElement;
    };
    interface HTMLRuxIconPauseElement extends Components.RuxIconPause, HTMLStencilElement {
    }
    var HTMLRuxIconPauseElement: {
        prototype: HTMLRuxIconPauseElement;
        new (): HTMLRuxIconPauseElement;
    };
    interface HTMLRuxIconPauseCircleFilledElement extends Components.RuxIconPauseCircleFilled, HTMLStencilElement {
    }
    var HTMLRuxIconPauseCircleFilledElement: {
        prototype: HTMLRuxIconPauseCircleFilledElement;
        new (): HTMLRuxIconPauseCircleFilledElement;
    };
    interface HTMLRuxIconPauseCircleOutlineElement extends Components.RuxIconPauseCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPauseCircleOutlineElement: {
        prototype: HTMLRuxIconPauseCircleOutlineElement;
        new (): HTMLRuxIconPauseCircleOutlineElement;
    };
    interface HTMLRuxIconPausePresentationElement extends Components.RuxIconPausePresentation, HTMLStencilElement {
    }
    var HTMLRuxIconPausePresentationElement: {
        prototype: HTMLRuxIconPausePresentationElement;
        new (): HTMLRuxIconPausePresentationElement;
    };
    interface HTMLRuxIconPayloadElement extends Components.RuxIconPayload, HTMLStencilElement {
    }
    var HTMLRuxIconPayloadElement: {
        prototype: HTMLRuxIconPayloadElement;
        new (): HTMLRuxIconPayloadElement;
    };
    interface HTMLRuxIconPaymentElement extends Components.RuxIconPayment, HTMLStencilElement {
    }
    var HTMLRuxIconPaymentElement: {
        prototype: HTMLRuxIconPaymentElement;
        new (): HTMLRuxIconPaymentElement;
    };
    interface HTMLRuxIconPeopleOutlineElement extends Components.RuxIconPeopleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPeopleOutlineElement: {
        prototype: HTMLRuxIconPeopleOutlineElement;
        new (): HTMLRuxIconPeopleOutlineElement;
    };
    interface HTMLRuxIconPermCameraMicElement extends Components.RuxIconPermCameraMic, HTMLStencilElement {
    }
    var HTMLRuxIconPermCameraMicElement: {
        prototype: HTMLRuxIconPermCameraMicElement;
        new (): HTMLRuxIconPermCameraMicElement;
    };
    interface HTMLRuxIconPermContactCalendarElement extends Components.RuxIconPermContactCalendar, HTMLStencilElement {
    }
    var HTMLRuxIconPermContactCalendarElement: {
        prototype: HTMLRuxIconPermContactCalendarElement;
        new (): HTMLRuxIconPermContactCalendarElement;
    };
    interface HTMLRuxIconPermDataSettingElement extends Components.RuxIconPermDataSetting, HTMLStencilElement {
    }
    var HTMLRuxIconPermDataSettingElement: {
        prototype: HTMLRuxIconPermDataSettingElement;
        new (): HTMLRuxIconPermDataSettingElement;
    };
    interface HTMLRuxIconPermDeviceInformationElement extends Components.RuxIconPermDeviceInformation, HTMLStencilElement {
    }
    var HTMLRuxIconPermDeviceInformationElement: {
        prototype: HTMLRuxIconPermDeviceInformationElement;
        new (): HTMLRuxIconPermDeviceInformationElement;
    };
    interface HTMLRuxIconPermIdentityElement extends Components.RuxIconPermIdentity, HTMLStencilElement {
    }
    var HTMLRuxIconPermIdentityElement: {
        prototype: HTMLRuxIconPermIdentityElement;
        new (): HTMLRuxIconPermIdentityElement;
    };
    interface HTMLRuxIconPermMediaElement extends Components.RuxIconPermMedia, HTMLStencilElement {
    }
    var HTMLRuxIconPermMediaElement: {
        prototype: HTMLRuxIconPermMediaElement;
        new (): HTMLRuxIconPermMediaElement;
    };
    interface HTMLRuxIconPermPhoneMsgElement extends Components.RuxIconPermPhoneMsg, HTMLStencilElement {
    }
    var HTMLRuxIconPermPhoneMsgElement: {
        prototype: HTMLRuxIconPermPhoneMsgElement;
        new (): HTMLRuxIconPermPhoneMsgElement;
    };
    interface HTMLRuxIconPermScanWifiElement extends Components.RuxIconPermScanWifi, HTMLStencilElement {
    }
    var HTMLRuxIconPermScanWifiElement: {
        prototype: HTMLRuxIconPermScanWifiElement;
        new (): HTMLRuxIconPermScanWifiElement;
    };
    interface HTMLRuxIconPersonElement extends Components.RuxIconPerson, HTMLStencilElement {
    }
    var HTMLRuxIconPersonElement: {
        prototype: HTMLRuxIconPersonElement;
        new (): HTMLRuxIconPersonElement;
    };
    interface HTMLRuxIconPersonAddElement extends Components.RuxIconPersonAdd, HTMLStencilElement {
    }
    var HTMLRuxIconPersonAddElement: {
        prototype: HTMLRuxIconPersonAddElement;
        new (): HTMLRuxIconPersonAddElement;
    };
    interface HTMLRuxIconPersonAddDisabledElement extends Components.RuxIconPersonAddDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconPersonAddDisabledElement: {
        prototype: HTMLRuxIconPersonAddDisabledElement;
        new (): HTMLRuxIconPersonAddDisabledElement;
    };
    interface HTMLRuxIconPersonOutlineElement extends Components.RuxIconPersonOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPersonOutlineElement: {
        prototype: HTMLRuxIconPersonOutlineElement;
        new (): HTMLRuxIconPersonOutlineElement;
    };
    interface HTMLRuxIconPersonPinElement extends Components.RuxIconPersonPin, HTMLStencilElement {
    }
    var HTMLRuxIconPersonPinElement: {
        prototype: HTMLRuxIconPersonPinElement;
        new (): HTMLRuxIconPersonPinElement;
    };
    interface HTMLRuxIconPersonPinCircleElement extends Components.RuxIconPersonPinCircle, HTMLStencilElement {
    }
    var HTMLRuxIconPersonPinCircleElement: {
        prototype: HTMLRuxIconPersonPinCircleElement;
        new (): HTMLRuxIconPersonPinCircleElement;
    };
    interface HTMLRuxIconPersonalVideoElement extends Components.RuxIconPersonalVideo, HTMLStencilElement {
    }
    var HTMLRuxIconPersonalVideoElement: {
        prototype: HTMLRuxIconPersonalVideoElement;
        new (): HTMLRuxIconPersonalVideoElement;
    };
    interface HTMLRuxIconPetsElement extends Components.RuxIconPets, HTMLStencilElement {
    }
    var HTMLRuxIconPetsElement: {
        prototype: HTMLRuxIconPetsElement;
        new (): HTMLRuxIconPetsElement;
    };
    interface HTMLRuxIconPhoneElement extends Components.RuxIconPhone, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneElement: {
        prototype: HTMLRuxIconPhoneElement;
        new (): HTMLRuxIconPhoneElement;
    };
    interface HTMLRuxIconPhoneAndroidElement extends Components.RuxIconPhoneAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneAndroidElement: {
        prototype: HTMLRuxIconPhoneAndroidElement;
        new (): HTMLRuxIconPhoneAndroidElement;
    };
    interface HTMLRuxIconPhoneBluetoothSpeakerElement extends Components.RuxIconPhoneBluetoothSpeaker, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneBluetoothSpeakerElement: {
        prototype: HTMLRuxIconPhoneBluetoothSpeakerElement;
        new (): HTMLRuxIconPhoneBluetoothSpeakerElement;
    };
    interface HTMLRuxIconPhoneCallbackElement extends Components.RuxIconPhoneCallback, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneCallbackElement: {
        prototype: HTMLRuxIconPhoneCallbackElement;
        new (): HTMLRuxIconPhoneCallbackElement;
    };
    interface HTMLRuxIconPhoneForwardedElement extends Components.RuxIconPhoneForwarded, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneForwardedElement: {
        prototype: HTMLRuxIconPhoneForwardedElement;
        new (): HTMLRuxIconPhoneForwardedElement;
    };
    interface HTMLRuxIconPhoneInTalkElement extends Components.RuxIconPhoneInTalk, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneInTalkElement: {
        prototype: HTMLRuxIconPhoneInTalkElement;
        new (): HTMLRuxIconPhoneInTalkElement;
    };
    interface HTMLRuxIconPhoneIphoneElement extends Components.RuxIconPhoneIphone, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneIphoneElement: {
        prototype: HTMLRuxIconPhoneIphoneElement;
        new (): HTMLRuxIconPhoneIphoneElement;
    };
    interface HTMLRuxIconPhoneLockedElement extends Components.RuxIconPhoneLocked, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneLockedElement: {
        prototype: HTMLRuxIconPhoneLockedElement;
        new (): HTMLRuxIconPhoneLockedElement;
    };
    interface HTMLRuxIconPhoneMissedElement extends Components.RuxIconPhoneMissed, HTMLStencilElement {
    }
    var HTMLRuxIconPhoneMissedElement: {
        prototype: HTMLRuxIconPhoneMissedElement;
        new (): HTMLRuxIconPhoneMissedElement;
    };
    interface HTMLRuxIconPhonePausedElement extends Components.RuxIconPhonePaused, HTMLStencilElement {
    }
    var HTMLRuxIconPhonePausedElement: {
        prototype: HTMLRuxIconPhonePausedElement;
        new (): HTMLRuxIconPhonePausedElement;
    };
    interface HTMLRuxIconPhonelinkElement extends Components.RuxIconPhonelink, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkElement: {
        prototype: HTMLRuxIconPhonelinkElement;
        new (): HTMLRuxIconPhonelinkElement;
    };
    interface HTMLRuxIconPhonelinkEraseElement extends Components.RuxIconPhonelinkErase, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkEraseElement: {
        prototype: HTMLRuxIconPhonelinkEraseElement;
        new (): HTMLRuxIconPhonelinkEraseElement;
    };
    interface HTMLRuxIconPhonelinkLockElement extends Components.RuxIconPhonelinkLock, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkLockElement: {
        prototype: HTMLRuxIconPhonelinkLockElement;
        new (): HTMLRuxIconPhonelinkLockElement;
    };
    interface HTMLRuxIconPhonelinkOffElement extends Components.RuxIconPhonelinkOff, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkOffElement: {
        prototype: HTMLRuxIconPhonelinkOffElement;
        new (): HTMLRuxIconPhonelinkOffElement;
    };
    interface HTMLRuxIconPhonelinkRingElement extends Components.RuxIconPhonelinkRing, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkRingElement: {
        prototype: HTMLRuxIconPhonelinkRingElement;
        new (): HTMLRuxIconPhonelinkRingElement;
    };
    interface HTMLRuxIconPhonelinkSetupElement extends Components.RuxIconPhonelinkSetup, HTMLStencilElement {
    }
    var HTMLRuxIconPhonelinkSetupElement: {
        prototype: HTMLRuxIconPhonelinkSetupElement;
        new (): HTMLRuxIconPhonelinkSetupElement;
    };
    interface HTMLRuxIconPhotoElement extends Components.RuxIconPhoto, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoElement: {
        prototype: HTMLRuxIconPhotoElement;
        new (): HTMLRuxIconPhotoElement;
    };
    interface HTMLRuxIconPhotoAlbumElement extends Components.RuxIconPhotoAlbum, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoAlbumElement: {
        prototype: HTMLRuxIconPhotoAlbumElement;
        new (): HTMLRuxIconPhotoAlbumElement;
    };
    interface HTMLRuxIconPhotoCameraElement extends Components.RuxIconPhotoCamera, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoCameraElement: {
        prototype: HTMLRuxIconPhotoCameraElement;
        new (): HTMLRuxIconPhotoCameraElement;
    };
    interface HTMLRuxIconPhotoFilterElement extends Components.RuxIconPhotoFilter, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoFilterElement: {
        prototype: HTMLRuxIconPhotoFilterElement;
        new (): HTMLRuxIconPhotoFilterElement;
    };
    interface HTMLRuxIconPhotoLibraryElement extends Components.RuxIconPhotoLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoLibraryElement: {
        prototype: HTMLRuxIconPhotoLibraryElement;
        new (): HTMLRuxIconPhotoLibraryElement;
    };
    interface HTMLRuxIconPhotoSizeSelectActualElement extends Components.RuxIconPhotoSizeSelectActual, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectActualElement: {
        prototype: HTMLRuxIconPhotoSizeSelectActualElement;
        new (): HTMLRuxIconPhotoSizeSelectActualElement;
    };
    interface HTMLRuxIconPhotoSizeSelectLargeElement extends Components.RuxIconPhotoSizeSelectLarge, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectLargeElement: {
        prototype: HTMLRuxIconPhotoSizeSelectLargeElement;
        new (): HTMLRuxIconPhotoSizeSelectLargeElement;
    };
    interface HTMLRuxIconPhotoSizeSelectSmallElement extends Components.RuxIconPhotoSizeSelectSmall, HTMLStencilElement {
    }
    var HTMLRuxIconPhotoSizeSelectSmallElement: {
        prototype: HTMLRuxIconPhotoSizeSelectSmallElement;
        new (): HTMLRuxIconPhotoSizeSelectSmallElement;
    };
    interface HTMLRuxIconPictureAsPdfElement extends Components.RuxIconPictureAsPdf, HTMLStencilElement {
    }
    var HTMLRuxIconPictureAsPdfElement: {
        prototype: HTMLRuxIconPictureAsPdfElement;
        new (): HTMLRuxIconPictureAsPdfElement;
    };
    interface HTMLRuxIconPictureInPictureElement extends Components.RuxIconPictureInPicture, HTMLStencilElement {
    }
    var HTMLRuxIconPictureInPictureElement: {
        prototype: HTMLRuxIconPictureInPictureElement;
        new (): HTMLRuxIconPictureInPictureElement;
    };
    interface HTMLRuxIconPictureInPictureAltElement extends Components.RuxIconPictureInPictureAlt, HTMLStencilElement {
    }
    var HTMLRuxIconPictureInPictureAltElement: {
        prototype: HTMLRuxIconPictureInPictureAltElement;
        new (): HTMLRuxIconPictureInPictureAltElement;
    };
    interface HTMLRuxIconPieChartElement extends Components.RuxIconPieChart, HTMLStencilElement {
    }
    var HTMLRuxIconPieChartElement: {
        prototype: HTMLRuxIconPieChartElement;
        new (): HTMLRuxIconPieChartElement;
    };
    interface HTMLRuxIconPinDropElement extends Components.RuxIconPinDrop, HTMLStencilElement {
    }
    var HTMLRuxIconPinDropElement: {
        prototype: HTMLRuxIconPinDropElement;
        new (): HTMLRuxIconPinDropElement;
    };
    interface HTMLRuxIconPlaceElement extends Components.RuxIconPlace, HTMLStencilElement {
    }
    var HTMLRuxIconPlaceElement: {
        prototype: HTMLRuxIconPlaceElement;
        new (): HTMLRuxIconPlaceElement;
    };
    interface HTMLRuxIconPlayArrowElement extends Components.RuxIconPlayArrow, HTMLStencilElement {
    }
    var HTMLRuxIconPlayArrowElement: {
        prototype: HTMLRuxIconPlayArrowElement;
        new (): HTMLRuxIconPlayArrowElement;
    };
    interface HTMLRuxIconPlayCircleFilledElement extends Components.RuxIconPlayCircleFilled, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleFilledElement: {
        prototype: HTMLRuxIconPlayCircleFilledElement;
        new (): HTMLRuxIconPlayCircleFilledElement;
    };
    interface HTMLRuxIconPlayCircleFilledWhiteElement extends Components.RuxIconPlayCircleFilledWhite, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleFilledWhiteElement: {
        prototype: HTMLRuxIconPlayCircleFilledWhiteElement;
        new (): HTMLRuxIconPlayCircleFilledWhiteElement;
    };
    interface HTMLRuxIconPlayCircleOutlineElement extends Components.RuxIconPlayCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconPlayCircleOutlineElement: {
        prototype: HTMLRuxIconPlayCircleOutlineElement;
        new (): HTMLRuxIconPlayCircleOutlineElement;
    };
    interface HTMLRuxIconPlayForWorkElement extends Components.RuxIconPlayForWork, HTMLStencilElement {
    }
    var HTMLRuxIconPlayForWorkElement: {
        prototype: HTMLRuxIconPlayForWorkElement;
        new (): HTMLRuxIconPlayForWorkElement;
    };
    interface HTMLRuxIconPlaylistAddElement extends Components.RuxIconPlaylistAdd, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistAddElement: {
        prototype: HTMLRuxIconPlaylistAddElement;
        new (): HTMLRuxIconPlaylistAddElement;
    };
    interface HTMLRuxIconPlaylistAddCheckElement extends Components.RuxIconPlaylistAddCheck, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistAddCheckElement: {
        prototype: HTMLRuxIconPlaylistAddCheckElement;
        new (): HTMLRuxIconPlaylistAddCheckElement;
    };
    interface HTMLRuxIconPlaylistPlayElement extends Components.RuxIconPlaylistPlay, HTMLStencilElement {
    }
    var HTMLRuxIconPlaylistPlayElement: {
        prototype: HTMLRuxIconPlaylistPlayElement;
        new (): HTMLRuxIconPlaylistPlayElement;
    };
    interface HTMLRuxIconPlusOneElement extends Components.RuxIconPlusOne, HTMLStencilElement {
    }
    var HTMLRuxIconPlusOneElement: {
        prototype: HTMLRuxIconPlusOneElement;
        new (): HTMLRuxIconPlusOneElement;
    };
    interface HTMLRuxIconPollElement extends Components.RuxIconPoll, HTMLStencilElement {
    }
    var HTMLRuxIconPollElement: {
        prototype: HTMLRuxIconPollElement;
        new (): HTMLRuxIconPollElement;
    };
    interface HTMLRuxIconPoolElement extends Components.RuxIconPool, HTMLStencilElement {
    }
    var HTMLRuxIconPoolElement: {
        prototype: HTMLRuxIconPoolElement;
        new (): HTMLRuxIconPoolElement;
    };
    interface HTMLRuxIconPortableWifiOffElement extends Components.RuxIconPortableWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconPortableWifiOffElement: {
        prototype: HTMLRuxIconPortableWifiOffElement;
        new (): HTMLRuxIconPortableWifiOffElement;
    };
    interface HTMLRuxIconPortraitElement extends Components.RuxIconPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconPortraitElement: {
        prototype: HTMLRuxIconPortraitElement;
        new (): HTMLRuxIconPortraitElement;
    };
    interface HTMLRuxIconPowerElement extends Components.RuxIconPower, HTMLStencilElement {
    }
    var HTMLRuxIconPowerElement: {
        prototype: HTMLRuxIconPowerElement;
        new (): HTMLRuxIconPowerElement;
    };
    interface HTMLRuxIconPowerInputElement extends Components.RuxIconPowerInput, HTMLStencilElement {
    }
    var HTMLRuxIconPowerInputElement: {
        prototype: HTMLRuxIconPowerInputElement;
        new (): HTMLRuxIconPowerInputElement;
    };
    interface HTMLRuxIconPowerOffElement extends Components.RuxIconPowerOff, HTMLStencilElement {
    }
    var HTMLRuxIconPowerOffElement: {
        prototype: HTMLRuxIconPowerOffElement;
        new (): HTMLRuxIconPowerOffElement;
    };
    interface HTMLRuxIconPowerSettingsNewElement extends Components.RuxIconPowerSettingsNew, HTMLStencilElement {
    }
    var HTMLRuxIconPowerSettingsNewElement: {
        prototype: HTMLRuxIconPowerSettingsNewElement;
        new (): HTMLRuxIconPowerSettingsNewElement;
    };
    interface HTMLRuxIconPregnantWomanElement extends Components.RuxIconPregnantWoman, HTMLStencilElement {
    }
    var HTMLRuxIconPregnantWomanElement: {
        prototype: HTMLRuxIconPregnantWomanElement;
        new (): HTMLRuxIconPregnantWomanElement;
    };
    interface HTMLRuxIconPresentToAllElement extends Components.RuxIconPresentToAll, HTMLStencilElement {
    }
    var HTMLRuxIconPresentToAllElement: {
        prototype: HTMLRuxIconPresentToAllElement;
        new (): HTMLRuxIconPresentToAllElement;
    };
    interface HTMLRuxIconPrintElement extends Components.RuxIconPrint, HTMLStencilElement {
    }
    var HTMLRuxIconPrintElement: {
        prototype: HTMLRuxIconPrintElement;
        new (): HTMLRuxIconPrintElement;
    };
    interface HTMLRuxIconPrintDisabledElement extends Components.RuxIconPrintDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconPrintDisabledElement: {
        prototype: HTMLRuxIconPrintDisabledElement;
        new (): HTMLRuxIconPrintDisabledElement;
    };
    interface HTMLRuxIconPriorityHighElement extends Components.RuxIconPriorityHigh, HTMLStencilElement {
    }
    var HTMLRuxIconPriorityHighElement: {
        prototype: HTMLRuxIconPriorityHighElement;
        new (): HTMLRuxIconPriorityHighElement;
    };
    interface HTMLRuxIconProcessorElement extends Components.RuxIconProcessor, HTMLStencilElement {
    }
    var HTMLRuxIconProcessorElement: {
        prototype: HTMLRuxIconProcessorElement;
        new (): HTMLRuxIconProcessorElement;
    };
    interface HTMLRuxIconProcessorAltElement extends Components.RuxIconProcessorAlt, HTMLStencilElement {
    }
    var HTMLRuxIconProcessorAltElement: {
        prototype: HTMLRuxIconProcessorAltElement;
        new (): HTMLRuxIconProcessorAltElement;
    };
    interface HTMLRuxIconPropulsionPowerElement extends Components.RuxIconPropulsionPower, HTMLStencilElement {
    }
    var HTMLRuxIconPropulsionPowerElement: {
        prototype: HTMLRuxIconPropulsionPowerElement;
        new (): HTMLRuxIconPropulsionPowerElement;
    };
    interface HTMLRuxIconPublicElement extends Components.RuxIconPublic, HTMLStencilElement {
    }
    var HTMLRuxIconPublicElement: {
        prototype: HTMLRuxIconPublicElement;
        new (): HTMLRuxIconPublicElement;
    };
    interface HTMLRuxIconPublishElement extends Components.RuxIconPublish, HTMLStencilElement {
    }
    var HTMLRuxIconPublishElement: {
        prototype: HTMLRuxIconPublishElement;
        new (): HTMLRuxIconPublishElement;
    };
    interface HTMLRuxIconQueryBuilderElement extends Components.RuxIconQueryBuilder, HTMLStencilElement {
    }
    var HTMLRuxIconQueryBuilderElement: {
        prototype: HTMLRuxIconQueryBuilderElement;
        new (): HTMLRuxIconQueryBuilderElement;
    };
    interface HTMLRuxIconQuestionAnswerElement extends Components.RuxIconQuestionAnswer, HTMLStencilElement {
    }
    var HTMLRuxIconQuestionAnswerElement: {
        prototype: HTMLRuxIconQuestionAnswerElement;
        new (): HTMLRuxIconQuestionAnswerElement;
    };
    interface HTMLRuxIconQueueElement extends Components.RuxIconQueue, HTMLStencilElement {
    }
    var HTMLRuxIconQueueElement: {
        prototype: HTMLRuxIconQueueElement;
        new (): HTMLRuxIconQueueElement;
    };
    interface HTMLRuxIconQueueMusicElement extends Components.RuxIconQueueMusic, HTMLStencilElement {
    }
    var HTMLRuxIconQueueMusicElement: {
        prototype: HTMLRuxIconQueueMusicElement;
        new (): HTMLRuxIconQueueMusicElement;
    };
    interface HTMLRuxIconQueuePlayNextElement extends Components.RuxIconQueuePlayNext, HTMLStencilElement {
    }
    var HTMLRuxIconQueuePlayNextElement: {
        prototype: HTMLRuxIconQueuePlayNextElement;
        new (): HTMLRuxIconQueuePlayNextElement;
    };
    interface HTMLRuxIconRadioElement extends Components.RuxIconRadio, HTMLStencilElement {
    }
    var HTMLRuxIconRadioElement: {
        prototype: HTMLRuxIconRadioElement;
        new (): HTMLRuxIconRadioElement;
    };
    interface HTMLRuxIconRadioButtonCheckedElement extends Components.RuxIconRadioButtonChecked, HTMLStencilElement {
    }
    var HTMLRuxIconRadioButtonCheckedElement: {
        prototype: HTMLRuxIconRadioButtonCheckedElement;
        new (): HTMLRuxIconRadioButtonCheckedElement;
    };
    interface HTMLRuxIconRadioButtonUncheckedElement extends Components.RuxIconRadioButtonUnchecked, HTMLStencilElement {
    }
    var HTMLRuxIconRadioButtonUncheckedElement: {
        prototype: HTMLRuxIconRadioButtonUncheckedElement;
        new (): HTMLRuxIconRadioButtonUncheckedElement;
    };
    interface HTMLRuxIconRateReviewElement extends Components.RuxIconRateReview, HTMLStencilElement {
    }
    var HTMLRuxIconRateReviewElement: {
        prototype: HTMLRuxIconRateReviewElement;
        new (): HTMLRuxIconRateReviewElement;
    };
    interface HTMLRuxIconReceiptElement extends Components.RuxIconReceipt, HTMLStencilElement {
    }
    var HTMLRuxIconReceiptElement: {
        prototype: HTMLRuxIconReceiptElement;
        new (): HTMLRuxIconReceiptElement;
    };
    interface HTMLRuxIconRecentActorsElement extends Components.RuxIconRecentActors, HTMLStencilElement {
    }
    var HTMLRuxIconRecentActorsElement: {
        prototype: HTMLRuxIconRecentActorsElement;
        new (): HTMLRuxIconRecentActorsElement;
    };
    interface HTMLRuxIconRecordVoiceOverElement extends Components.RuxIconRecordVoiceOver, HTMLStencilElement {
    }
    var HTMLRuxIconRecordVoiceOverElement: {
        prototype: HTMLRuxIconRecordVoiceOverElement;
        new (): HTMLRuxIconRecordVoiceOverElement;
    };
    interface HTMLRuxIconRedeemElement extends Components.RuxIconRedeem, HTMLStencilElement {
    }
    var HTMLRuxIconRedeemElement: {
        prototype: HTMLRuxIconRedeemElement;
        new (): HTMLRuxIconRedeemElement;
    };
    interface HTMLRuxIconRedoElement extends Components.RuxIconRedo, HTMLStencilElement {
    }
    var HTMLRuxIconRedoElement: {
        prototype: HTMLRuxIconRedoElement;
        new (): HTMLRuxIconRedoElement;
    };
    interface HTMLRuxIconRefreshElement extends Components.RuxIconRefresh, HTMLStencilElement {
    }
    var HTMLRuxIconRefreshElement: {
        prototype: HTMLRuxIconRefreshElement;
        new (): HTMLRuxIconRefreshElement;
    };
    interface HTMLRuxIconReleaseElement extends Components.RuxIconRelease, HTMLStencilElement {
    }
    var HTMLRuxIconReleaseElement: {
        prototype: HTMLRuxIconReleaseElement;
        new (): HTMLRuxIconReleaseElement;
    };
    interface HTMLRuxIconRemoveElement extends Components.RuxIconRemove, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveElement: {
        prototype: HTMLRuxIconRemoveElement;
        new (): HTMLRuxIconRemoveElement;
    };
    interface HTMLRuxIconRemoveCircleElement extends Components.RuxIconRemoveCircle, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveCircleElement: {
        prototype: HTMLRuxIconRemoveCircleElement;
        new (): HTMLRuxIconRemoveCircleElement;
    };
    interface HTMLRuxIconRemoveCircleOutlineElement extends Components.RuxIconRemoveCircleOutline, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveCircleOutlineElement: {
        prototype: HTMLRuxIconRemoveCircleOutlineElement;
        new (): HTMLRuxIconRemoveCircleOutlineElement;
    };
    interface HTMLRuxIconRemoveFromQueueElement extends Components.RuxIconRemoveFromQueue, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveFromQueueElement: {
        prototype: HTMLRuxIconRemoveFromQueueElement;
        new (): HTMLRuxIconRemoveFromQueueElement;
    };
    interface HTMLRuxIconRemoveRedEyeElement extends Components.RuxIconRemoveRedEye, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveRedEyeElement: {
        prototype: HTMLRuxIconRemoveRedEyeElement;
        new (): HTMLRuxIconRemoveRedEyeElement;
    };
    interface HTMLRuxIconRemoveShoppingCartElement extends Components.RuxIconRemoveShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconRemoveShoppingCartElement: {
        prototype: HTMLRuxIconRemoveShoppingCartElement;
        new (): HTMLRuxIconRemoveShoppingCartElement;
    };
    interface HTMLRuxIconReorderElement extends Components.RuxIconReorder, HTMLStencilElement {
    }
    var HTMLRuxIconReorderElement: {
        prototype: HTMLRuxIconReorderElement;
        new (): HTMLRuxIconReorderElement;
    };
    interface HTMLRuxIconRepeatElement extends Components.RuxIconRepeat, HTMLStencilElement {
    }
    var HTMLRuxIconRepeatElement: {
        prototype: HTMLRuxIconRepeatElement;
        new (): HTMLRuxIconRepeatElement;
    };
    interface HTMLRuxIconRepeatOneElement extends Components.RuxIconRepeatOne, HTMLStencilElement {
    }
    var HTMLRuxIconRepeatOneElement: {
        prototype: HTMLRuxIconRepeatOneElement;
        new (): HTMLRuxIconRepeatOneElement;
    };
    interface HTMLRuxIconReplayElement extends Components.RuxIconReplay, HTMLStencilElement {
    }
    var HTMLRuxIconReplayElement: {
        prototype: HTMLRuxIconReplayElement;
        new (): HTMLRuxIconReplayElement;
    };
    interface HTMLRuxIconReplay10Element extends Components.RuxIconReplay10, HTMLStencilElement {
    }
    var HTMLRuxIconReplay10Element: {
        prototype: HTMLRuxIconReplay10Element;
        new (): HTMLRuxIconReplay10Element;
    };
    interface HTMLRuxIconReplay30Element extends Components.RuxIconReplay30, HTMLStencilElement {
    }
    var HTMLRuxIconReplay30Element: {
        prototype: HTMLRuxIconReplay30Element;
        new (): HTMLRuxIconReplay30Element;
    };
    interface HTMLRuxIconReplay5Element extends Components.RuxIconReplay5, HTMLStencilElement {
    }
    var HTMLRuxIconReplay5Element: {
        prototype: HTMLRuxIconReplay5Element;
        new (): HTMLRuxIconReplay5Element;
    };
    interface HTMLRuxIconReplyElement extends Components.RuxIconReply, HTMLStencilElement {
    }
    var HTMLRuxIconReplyElement: {
        prototype: HTMLRuxIconReplyElement;
        new (): HTMLRuxIconReplyElement;
    };
    interface HTMLRuxIconReplyAllElement extends Components.RuxIconReplyAll, HTMLStencilElement {
    }
    var HTMLRuxIconReplyAllElement: {
        prototype: HTMLRuxIconReplyAllElement;
        new (): HTMLRuxIconReplyAllElement;
    };
    interface HTMLRuxIconReportElement extends Components.RuxIconReport, HTMLStencilElement {
    }
    var HTMLRuxIconReportElement: {
        prototype: HTMLRuxIconReportElement;
        new (): HTMLRuxIconReportElement;
    };
    interface HTMLRuxIconReportOffElement extends Components.RuxIconReportOff, HTMLStencilElement {
    }
    var HTMLRuxIconReportOffElement: {
        prototype: HTMLRuxIconReportOffElement;
        new (): HTMLRuxIconReportOffElement;
    };
    interface HTMLRuxIconReportProblemElement extends Components.RuxIconReportProblem, HTMLStencilElement {
    }
    var HTMLRuxIconReportProblemElement: {
        prototype: HTMLRuxIconReportProblemElement;
        new (): HTMLRuxIconReportProblemElement;
    };
    interface HTMLRuxIconRestaurantElement extends Components.RuxIconRestaurant, HTMLStencilElement {
    }
    var HTMLRuxIconRestaurantElement: {
        prototype: HTMLRuxIconRestaurantElement;
        new (): HTMLRuxIconRestaurantElement;
    };
    interface HTMLRuxIconRestaurantMenuElement extends Components.RuxIconRestaurantMenu, HTMLStencilElement {
    }
    var HTMLRuxIconRestaurantMenuElement: {
        prototype: HTMLRuxIconRestaurantMenuElement;
        new (): HTMLRuxIconRestaurantMenuElement;
    };
    interface HTMLRuxIconRestoreElement extends Components.RuxIconRestore, HTMLStencilElement {
    }
    var HTMLRuxIconRestoreElement: {
        prototype: HTMLRuxIconRestoreElement;
        new (): HTMLRuxIconRestoreElement;
    };
    interface HTMLRuxIconRestoreFromTrashElement extends Components.RuxIconRestoreFromTrash, HTMLStencilElement {
    }
    var HTMLRuxIconRestoreFromTrashElement: {
        prototype: HTMLRuxIconRestoreFromTrashElement;
        new (): HTMLRuxIconRestoreFromTrashElement;
    };
    interface HTMLRuxIconRestorePageElement extends Components.RuxIconRestorePage, HTMLStencilElement {
    }
    var HTMLRuxIconRestorePageElement: {
        prototype: HTMLRuxIconRestorePageElement;
        new (): HTMLRuxIconRestorePageElement;
    };
    interface HTMLRuxIconRingVolumeElement extends Components.RuxIconRingVolume, HTMLStencilElement {
    }
    var HTMLRuxIconRingVolumeElement: {
        prototype: HTMLRuxIconRingVolumeElement;
        new (): HTMLRuxIconRingVolumeElement;
    };
    interface HTMLRuxIconRoomElement extends Components.RuxIconRoom, HTMLStencilElement {
    }
    var HTMLRuxIconRoomElement: {
        prototype: HTMLRuxIconRoomElement;
        new (): HTMLRuxIconRoomElement;
    };
    interface HTMLRuxIconRoomServiceElement extends Components.RuxIconRoomService, HTMLStencilElement {
    }
    var HTMLRuxIconRoomServiceElement: {
        prototype: HTMLRuxIconRoomServiceElement;
        new (): HTMLRuxIconRoomServiceElement;
    };
    interface HTMLRuxIconRotate90DegreesCcElement extends Components.RuxIconRotate90DegreesCc, HTMLStencilElement {
    }
    var HTMLRuxIconRotate90DegreesCcElement: {
        prototype: HTMLRuxIconRotate90DegreesCcElement;
        new (): HTMLRuxIconRotate90DegreesCcElement;
    };
    interface HTMLRuxIconRotateLeftElement extends Components.RuxIconRotateLeft, HTMLStencilElement {
    }
    var HTMLRuxIconRotateLeftElement: {
        prototype: HTMLRuxIconRotateLeftElement;
        new (): HTMLRuxIconRotateLeftElement;
    };
    interface HTMLRuxIconRotateRightElement extends Components.RuxIconRotateRight, HTMLStencilElement {
    }
    var HTMLRuxIconRotateRightElement: {
        prototype: HTMLRuxIconRotateRightElement;
        new (): HTMLRuxIconRotateRightElement;
    };
    interface HTMLRuxIconRoundedCornerElement extends Components.RuxIconRoundedCorner, HTMLStencilElement {
    }
    var HTMLRuxIconRoundedCornerElement: {
        prototype: HTMLRuxIconRoundedCornerElement;
        new (): HTMLRuxIconRoundedCornerElement;
    };
    interface HTMLRuxIconRouterElement extends Components.RuxIconRouter, HTMLStencilElement {
    }
    var HTMLRuxIconRouterElement: {
        prototype: HTMLRuxIconRouterElement;
        new (): HTMLRuxIconRouterElement;
    };
    interface HTMLRuxIconRowingElement extends Components.RuxIconRowing, HTMLStencilElement {
    }
    var HTMLRuxIconRowingElement: {
        prototype: HTMLRuxIconRowingElement;
        new (): HTMLRuxIconRowingElement;
    };
    interface HTMLRuxIconRssFeedElement extends Components.RuxIconRssFeed, HTMLStencilElement {
    }
    var HTMLRuxIconRssFeedElement: {
        prototype: HTMLRuxIconRssFeedElement;
        new (): HTMLRuxIconRssFeedElement;
    };
    interface HTMLRuxIconRvHookupElement extends Components.RuxIconRvHookup, HTMLStencilElement {
    }
    var HTMLRuxIconRvHookupElement: {
        prototype: HTMLRuxIconRvHookupElement;
        new (): HTMLRuxIconRvHookupElement;
    };
    interface HTMLRuxIconSatelliteElement extends Components.RuxIconSatellite, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteElement: {
        prototype: HTMLRuxIconSatelliteElement;
        new (): HTMLRuxIconSatelliteElement;
    };
    interface HTMLRuxIconSatelliteOffElement extends Components.RuxIconSatelliteOff, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteOffElement: {
        prototype: HTMLRuxIconSatelliteOffElement;
        new (): HTMLRuxIconSatelliteOffElement;
    };
    interface HTMLRuxIconSatelliteReceiveElement extends Components.RuxIconSatelliteReceive, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteReceiveElement: {
        prototype: HTMLRuxIconSatelliteReceiveElement;
        new (): HTMLRuxIconSatelliteReceiveElement;
    };
    interface HTMLRuxIconSatelliteTransmitElement extends Components.RuxIconSatelliteTransmit, HTMLStencilElement {
    }
    var HTMLRuxIconSatelliteTransmitElement: {
        prototype: HTMLRuxIconSatelliteTransmitElement;
        new (): HTMLRuxIconSatelliteTransmitElement;
    };
    interface HTMLRuxIconSaveElement extends Components.RuxIconSave, HTMLStencilElement {
    }
    var HTMLRuxIconSaveElement: {
        prototype: HTMLRuxIconSaveElement;
        new (): HTMLRuxIconSaveElement;
    };
    interface HTMLRuxIconSaveAltElement extends Components.RuxIconSaveAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSaveAltElement: {
        prototype: HTMLRuxIconSaveAltElement;
        new (): HTMLRuxIconSaveAltElement;
    };
    interface HTMLRuxIconScannerElement extends Components.RuxIconScanner, HTMLStencilElement {
    }
    var HTMLRuxIconScannerElement: {
        prototype: HTMLRuxIconScannerElement;
        new (): HTMLRuxIconScannerElement;
    };
    interface HTMLRuxIconScatterPlotElement extends Components.RuxIconScatterPlot, HTMLStencilElement {
    }
    var HTMLRuxIconScatterPlotElement: {
        prototype: HTMLRuxIconScatterPlotElement;
        new (): HTMLRuxIconScatterPlotElement;
    };
    interface HTMLRuxIconScheduleElement extends Components.RuxIconSchedule, HTMLStencilElement {
    }
    var HTMLRuxIconScheduleElement: {
        prototype: HTMLRuxIconScheduleElement;
        new (): HTMLRuxIconScheduleElement;
    };
    interface HTMLRuxIconSchoolElement extends Components.RuxIconSchool, HTMLStencilElement {
    }
    var HTMLRuxIconSchoolElement: {
        prototype: HTMLRuxIconSchoolElement;
        new (): HTMLRuxIconSchoolElement;
    };
    interface HTMLRuxIconScoreElement extends Components.RuxIconScore, HTMLStencilElement {
    }
    var HTMLRuxIconScoreElement: {
        prototype: HTMLRuxIconScoreElement;
        new (): HTMLRuxIconScoreElement;
    };
    interface HTMLRuxIconScreenLockLandscapeElement extends Components.RuxIconScreenLockLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockLandscapeElement: {
        prototype: HTMLRuxIconScreenLockLandscapeElement;
        new (): HTMLRuxIconScreenLockLandscapeElement;
    };
    interface HTMLRuxIconScreenLockPortraitElement extends Components.RuxIconScreenLockPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockPortraitElement: {
        prototype: HTMLRuxIconScreenLockPortraitElement;
        new (): HTMLRuxIconScreenLockPortraitElement;
    };
    interface HTMLRuxIconScreenLockRotationElement extends Components.RuxIconScreenLockRotation, HTMLStencilElement {
    }
    var HTMLRuxIconScreenLockRotationElement: {
        prototype: HTMLRuxIconScreenLockRotationElement;
        new (): HTMLRuxIconScreenLockRotationElement;
    };
    interface HTMLRuxIconScreenRotationElement extends Components.RuxIconScreenRotation, HTMLStencilElement {
    }
    var HTMLRuxIconScreenRotationElement: {
        prototype: HTMLRuxIconScreenRotationElement;
        new (): HTMLRuxIconScreenRotationElement;
    };
    interface HTMLRuxIconScreenShareElement extends Components.RuxIconScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconScreenShareElement: {
        prototype: HTMLRuxIconScreenShareElement;
        new (): HTMLRuxIconScreenShareElement;
    };
    interface HTMLRuxIconSdCardElement extends Components.RuxIconSdCard, HTMLStencilElement {
    }
    var HTMLRuxIconSdCardElement: {
        prototype: HTMLRuxIconSdCardElement;
        new (): HTMLRuxIconSdCardElement;
    };
    interface HTMLRuxIconSdStorageElement extends Components.RuxIconSdStorage, HTMLStencilElement {
    }
    var HTMLRuxIconSdStorageElement: {
        prototype: HTMLRuxIconSdStorageElement;
        new (): HTMLRuxIconSdStorageElement;
    };
    interface HTMLRuxIconSearchElement extends Components.RuxIconSearch, HTMLStencilElement {
    }
    var HTMLRuxIconSearchElement: {
        prototype: HTMLRuxIconSearchElement;
        new (): HTMLRuxIconSearchElement;
    };
    interface HTMLRuxIconSeatElement extends Components.RuxIconSeat, HTMLStencilElement {
    }
    var HTMLRuxIconSeatElement: {
        prototype: HTMLRuxIconSeatElement;
        new (): HTMLRuxIconSeatElement;
    };
    interface HTMLRuxIconSecurityElement extends Components.RuxIconSecurity, HTMLStencilElement {
    }
    var HTMLRuxIconSecurityElement: {
        prototype: HTMLRuxIconSecurityElement;
        new (): HTMLRuxIconSecurityElement;
    };
    interface HTMLRuxIconSelectAllElement extends Components.RuxIconSelectAll, HTMLStencilElement {
    }
    var HTMLRuxIconSelectAllElement: {
        prototype: HTMLRuxIconSelectAllElement;
        new (): HTMLRuxIconSelectAllElement;
    };
    interface HTMLRuxIconSendElement extends Components.RuxIconSend, HTMLStencilElement {
    }
    var HTMLRuxIconSendElement: {
        prototype: HTMLRuxIconSendElement;
        new (): HTMLRuxIconSendElement;
    };
    interface HTMLRuxIconSentimentDissatisfiedElement extends Components.RuxIconSentimentDissatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentDissatisfiedElement: {
        prototype: HTMLRuxIconSentimentDissatisfiedElement;
        new (): HTMLRuxIconSentimentDissatisfiedElement;
    };
    interface HTMLRuxIconSentimentSatisfiedElement extends Components.RuxIconSentimentSatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentSatisfiedElement: {
        prototype: HTMLRuxIconSentimentSatisfiedElement;
        new (): HTMLRuxIconSentimentSatisfiedElement;
    };
    interface HTMLRuxIconSentimentSatisfiedAltElement extends Components.RuxIconSentimentSatisfiedAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentSatisfiedAltElement: {
        prototype: HTMLRuxIconSentimentSatisfiedAltElement;
        new (): HTMLRuxIconSentimentSatisfiedAltElement;
    };
    interface HTMLRuxIconSentimentVeryDissatisfiedElement extends Components.RuxIconSentimentVeryDissatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentVeryDissatisfiedElement: {
        prototype: HTMLRuxIconSentimentVeryDissatisfiedElement;
        new (): HTMLRuxIconSentimentVeryDissatisfiedElement;
    };
    interface HTMLRuxIconSentimentVerySatisfiedElement extends Components.RuxIconSentimentVerySatisfied, HTMLStencilElement {
    }
    var HTMLRuxIconSentimentVerySatisfiedElement: {
        prototype: HTMLRuxIconSentimentVerySatisfiedElement;
        new (): HTMLRuxIconSentimentVerySatisfiedElement;
    };
    interface HTMLRuxIconSetPowerElement extends Components.RuxIconSetPower, HTMLStencilElement {
    }
    var HTMLRuxIconSetPowerElement: {
        prototype: HTMLRuxIconSetPowerElement;
        new (): HTMLRuxIconSetPowerElement;
    };
    interface HTMLRuxIconSettingsElement extends Components.RuxIconSettings, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsElement: {
        prototype: HTMLRuxIconSettingsElement;
        new (): HTMLRuxIconSettingsElement;
    };
    interface HTMLRuxIconSettingsApplicationsElement extends Components.RuxIconSettingsApplications, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsApplicationsElement: {
        prototype: HTMLRuxIconSettingsApplicationsElement;
        new (): HTMLRuxIconSettingsApplicationsElement;
    };
    interface HTMLRuxIconSettingsBackupRestoreElement extends Components.RuxIconSettingsBackupRestore, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBackupRestoreElement: {
        prototype: HTMLRuxIconSettingsBackupRestoreElement;
        new (): HTMLRuxIconSettingsBackupRestoreElement;
    };
    interface HTMLRuxIconSettingsBluetoothElement extends Components.RuxIconSettingsBluetooth, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBluetoothElement: {
        prototype: HTMLRuxIconSettingsBluetoothElement;
        new (): HTMLRuxIconSettingsBluetoothElement;
    };
    interface HTMLRuxIconSettingsBrightnessElement extends Components.RuxIconSettingsBrightness, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsBrightnessElement: {
        prototype: HTMLRuxIconSettingsBrightnessElement;
        new (): HTMLRuxIconSettingsBrightnessElement;
    };
    interface HTMLRuxIconSettingsCellElement extends Components.RuxIconSettingsCell, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsCellElement: {
        prototype: HTMLRuxIconSettingsCellElement;
        new (): HTMLRuxIconSettingsCellElement;
    };
    interface HTMLRuxIconSettingsEthernetElement extends Components.RuxIconSettingsEthernet, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsEthernetElement: {
        prototype: HTMLRuxIconSettingsEthernetElement;
        new (): HTMLRuxIconSettingsEthernetElement;
    };
    interface HTMLRuxIconSettingsInputAntennaElement extends Components.RuxIconSettingsInputAntenna, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputAntennaElement: {
        prototype: HTMLRuxIconSettingsInputAntennaElement;
        new (): HTMLRuxIconSettingsInputAntennaElement;
    };
    interface HTMLRuxIconSettingsInputComponentElement extends Components.RuxIconSettingsInputComponent, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputComponentElement: {
        prototype: HTMLRuxIconSettingsInputComponentElement;
        new (): HTMLRuxIconSettingsInputComponentElement;
    };
    interface HTMLRuxIconSettingsInputCompositeElement extends Components.RuxIconSettingsInputComposite, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputCompositeElement: {
        prototype: HTMLRuxIconSettingsInputCompositeElement;
        new (): HTMLRuxIconSettingsInputCompositeElement;
    };
    interface HTMLRuxIconSettingsInputHdmiElement extends Components.RuxIconSettingsInputHdmi, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputHdmiElement: {
        prototype: HTMLRuxIconSettingsInputHdmiElement;
        new (): HTMLRuxIconSettingsInputHdmiElement;
    };
    interface HTMLRuxIconSettingsInputSvideoElement extends Components.RuxIconSettingsInputSvideo, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsInputSvideoElement: {
        prototype: HTMLRuxIconSettingsInputSvideoElement;
        new (): HTMLRuxIconSettingsInputSvideoElement;
    };
    interface HTMLRuxIconSettingsOverscanElement extends Components.RuxIconSettingsOverscan, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsOverscanElement: {
        prototype: HTMLRuxIconSettingsOverscanElement;
        new (): HTMLRuxIconSettingsOverscanElement;
    };
    interface HTMLRuxIconSettingsPhoneElement extends Components.RuxIconSettingsPhone, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsPhoneElement: {
        prototype: HTMLRuxIconSettingsPhoneElement;
        new (): HTMLRuxIconSettingsPhoneElement;
    };
    interface HTMLRuxIconSettingsPowerElement extends Components.RuxIconSettingsPower, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsPowerElement: {
        prototype: HTMLRuxIconSettingsPowerElement;
        new (): HTMLRuxIconSettingsPowerElement;
    };
    interface HTMLRuxIconSettingsRemoteElement extends Components.RuxIconSettingsRemote, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsRemoteElement: {
        prototype: HTMLRuxIconSettingsRemoteElement;
        new (): HTMLRuxIconSettingsRemoteElement;
    };
    interface HTMLRuxIconSettingsSystemDaydreamElement extends Components.RuxIconSettingsSystemDaydream, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsSystemDaydreamElement: {
        prototype: HTMLRuxIconSettingsSystemDaydreamElement;
        new (): HTMLRuxIconSettingsSystemDaydreamElement;
    };
    interface HTMLRuxIconSettingsVoiceElement extends Components.RuxIconSettingsVoice, HTMLStencilElement {
    }
    var HTMLRuxIconSettingsVoiceElement: {
        prototype: HTMLRuxIconSettingsVoiceElement;
        new (): HTMLRuxIconSettingsVoiceElement;
    };
    interface HTMLRuxIconShareElement extends Components.RuxIconShare, HTMLStencilElement {
    }
    var HTMLRuxIconShareElement: {
        prototype: HTMLRuxIconShareElement;
        new (): HTMLRuxIconShareElement;
    };
    interface HTMLRuxIconShopElement extends Components.RuxIconShop, HTMLStencilElement {
    }
    var HTMLRuxIconShopElement: {
        prototype: HTMLRuxIconShopElement;
        new (): HTMLRuxIconShopElement;
    };
    interface HTMLRuxIconShopTwoElement extends Components.RuxIconShopTwo, HTMLStencilElement {
    }
    var HTMLRuxIconShopTwoElement: {
        prototype: HTMLRuxIconShopTwoElement;
        new (): HTMLRuxIconShopTwoElement;
    };
    interface HTMLRuxIconShoppingBasketElement extends Components.RuxIconShoppingBasket, HTMLStencilElement {
    }
    var HTMLRuxIconShoppingBasketElement: {
        prototype: HTMLRuxIconShoppingBasketElement;
        new (): HTMLRuxIconShoppingBasketElement;
    };
    interface HTMLRuxIconShoppingCartElement extends Components.RuxIconShoppingCart, HTMLStencilElement {
    }
    var HTMLRuxIconShoppingCartElement: {
        prototype: HTMLRuxIconShoppingCartElement;
        new (): HTMLRuxIconShoppingCartElement;
    };
    interface HTMLRuxIconShortTextElement extends Components.RuxIconShortText, HTMLStencilElement {
    }
    var HTMLRuxIconShortTextElement: {
        prototype: HTMLRuxIconShortTextElement;
        new (): HTMLRuxIconShortTextElement;
    };
    interface HTMLRuxIconShowChartElement extends Components.RuxIconShowChart, HTMLStencilElement {
    }
    var HTMLRuxIconShowChartElement: {
        prototype: HTMLRuxIconShowChartElement;
        new (): HTMLRuxIconShowChartElement;
    };
    interface HTMLRuxIconShuffleElement extends Components.RuxIconShuffle, HTMLStencilElement {
    }
    var HTMLRuxIconShuffleElement: {
        prototype: HTMLRuxIconShuffleElement;
        new (): HTMLRuxIconShuffleElement;
    };
    interface HTMLRuxIconShutterSpeedElement extends Components.RuxIconShutterSpeed, HTMLStencilElement {
    }
    var HTMLRuxIconShutterSpeedElement: {
        prototype: HTMLRuxIconShutterSpeedElement;
        new (): HTMLRuxIconShutterSpeedElement;
    };
    interface HTMLRuxIconSignalCellular0BarElement extends Components.RuxIconSignalCellular0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular0BarElement: {
        prototype: HTMLRuxIconSignalCellular0BarElement;
        new (): HTMLRuxIconSignalCellular0BarElement;
    };
    interface HTMLRuxIconSignalCellular1BarElement extends Components.RuxIconSignalCellular1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular1BarElement: {
        prototype: HTMLRuxIconSignalCellular1BarElement;
        new (): HTMLRuxIconSignalCellular1BarElement;
    };
    interface HTMLRuxIconSignalCellular2BarElement extends Components.RuxIconSignalCellular2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular2BarElement: {
        prototype: HTMLRuxIconSignalCellular2BarElement;
        new (): HTMLRuxIconSignalCellular2BarElement;
    };
    interface HTMLRuxIconSignalCellular3BarElement extends Components.RuxIconSignalCellular3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular3BarElement: {
        prototype: HTMLRuxIconSignalCellular3BarElement;
        new (): HTMLRuxIconSignalCellular3BarElement;
    };
    interface HTMLRuxIconSignalCellular4BarElement extends Components.RuxIconSignalCellular4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellular4BarElement: {
        prototype: HTMLRuxIconSignalCellular4BarElement;
        new (): HTMLRuxIconSignalCellular4BarElement;
    };
    interface HTMLRuxIconSignalCellularAltElement extends Components.RuxIconSignalCellularAlt, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularAltElement: {
        prototype: HTMLRuxIconSignalCellularAltElement;
        new (): HTMLRuxIconSignalCellularAltElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet0BarElement extends Components.RuxIconSignalCellularConnectedNoInternet0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet0BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet1BarElement extends Components.RuxIconSignalCellularConnectedNoInternet1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet1BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet2BarElement extends Components.RuxIconSignalCellularConnectedNoInternet2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet2BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet3BarElement extends Components.RuxIconSignalCellularConnectedNoInternet3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet3BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
    };
    interface HTMLRuxIconSignalCellularConnectedNoInternet4BarElement extends Components.RuxIconSignalCellularConnectedNoInternet4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularConnectedNoInternet4BarElement: {
        prototype: HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
        new (): HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
    };
    interface HTMLRuxIconSignalCellularNoSimElement extends Components.RuxIconSignalCellularNoSim, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularNoSimElement: {
        prototype: HTMLRuxIconSignalCellularNoSimElement;
        new (): HTMLRuxIconSignalCellularNoSimElement;
    };
    interface HTMLRuxIconSignalCellularNullElement extends Components.RuxIconSignalCellularNull, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularNullElement: {
        prototype: HTMLRuxIconSignalCellularNullElement;
        new (): HTMLRuxIconSignalCellularNullElement;
    };
    interface HTMLRuxIconSignalCellularOffElement extends Components.RuxIconSignalCellularOff, HTMLStencilElement {
    }
    var HTMLRuxIconSignalCellularOffElement: {
        prototype: HTMLRuxIconSignalCellularOffElement;
        new (): HTMLRuxIconSignalCellularOffElement;
    };
    interface HTMLRuxIconSignalWifi0BarElement extends Components.RuxIconSignalWifi0Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi0BarElement: {
        prototype: HTMLRuxIconSignalWifi0BarElement;
        new (): HTMLRuxIconSignalWifi0BarElement;
    };
    interface HTMLRuxIconSignalWifi1BarElement extends Components.RuxIconSignalWifi1Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi1BarElement: {
        prototype: HTMLRuxIconSignalWifi1BarElement;
        new (): HTMLRuxIconSignalWifi1BarElement;
    };
    interface HTMLRuxIconSignalWifi1BarLockElement extends Components.RuxIconSignalWifi1BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi1BarLockElement: {
        prototype: HTMLRuxIconSignalWifi1BarLockElement;
        new (): HTMLRuxIconSignalWifi1BarLockElement;
    };
    interface HTMLRuxIconSignalWifi2BarElement extends Components.RuxIconSignalWifi2Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi2BarElement: {
        prototype: HTMLRuxIconSignalWifi2BarElement;
        new (): HTMLRuxIconSignalWifi2BarElement;
    };
    interface HTMLRuxIconSignalWifi2BarLockElement extends Components.RuxIconSignalWifi2BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi2BarLockElement: {
        prototype: HTMLRuxIconSignalWifi2BarLockElement;
        new (): HTMLRuxIconSignalWifi2BarLockElement;
    };
    interface HTMLRuxIconSignalWifi3BarElement extends Components.RuxIconSignalWifi3Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi3BarElement: {
        prototype: HTMLRuxIconSignalWifi3BarElement;
        new (): HTMLRuxIconSignalWifi3BarElement;
    };
    interface HTMLRuxIconSignalWifi3BarLockElement extends Components.RuxIconSignalWifi3BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi3BarLockElement: {
        prototype: HTMLRuxIconSignalWifi3BarLockElement;
        new (): HTMLRuxIconSignalWifi3BarLockElement;
    };
    interface HTMLRuxIconSignalWifi4BarElement extends Components.RuxIconSignalWifi4Bar, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi4BarElement: {
        prototype: HTMLRuxIconSignalWifi4BarElement;
        new (): HTMLRuxIconSignalWifi4BarElement;
    };
    interface HTMLRuxIconSignalWifi4BarLockElement extends Components.RuxIconSignalWifi4BarLock, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifi4BarLockElement: {
        prototype: HTMLRuxIconSignalWifi4BarLockElement;
        new (): HTMLRuxIconSignalWifi4BarLockElement;
    };
    interface HTMLRuxIconSignalWifiOffElement extends Components.RuxIconSignalWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconSignalWifiOffElement: {
        prototype: HTMLRuxIconSignalWifiOffElement;
        new (): HTMLRuxIconSignalWifiOffElement;
    };
    interface HTMLRuxIconSimCardElement extends Components.RuxIconSimCard, HTMLStencilElement {
    }
    var HTMLRuxIconSimCardElement: {
        prototype: HTMLRuxIconSimCardElement;
        new (): HTMLRuxIconSimCardElement;
    };
    interface HTMLRuxIconSkipNextElement extends Components.RuxIconSkipNext, HTMLStencilElement {
    }
    var HTMLRuxIconSkipNextElement: {
        prototype: HTMLRuxIconSkipNextElement;
        new (): HTMLRuxIconSkipNextElement;
    };
    interface HTMLRuxIconSkipPreviousElement extends Components.RuxIconSkipPrevious, HTMLStencilElement {
    }
    var HTMLRuxIconSkipPreviousElement: {
        prototype: HTMLRuxIconSkipPreviousElement;
        new (): HTMLRuxIconSkipPreviousElement;
    };
    interface HTMLRuxIconSlideshowElement extends Components.RuxIconSlideshow, HTMLStencilElement {
    }
    var HTMLRuxIconSlideshowElement: {
        prototype: HTMLRuxIconSlideshowElement;
        new (): HTMLRuxIconSlideshowElement;
    };
    interface HTMLRuxIconSlowMotionVideoElement extends Components.RuxIconSlowMotionVideo, HTMLStencilElement {
    }
    var HTMLRuxIconSlowMotionVideoElement: {
        prototype: HTMLRuxIconSlowMotionVideoElement;
        new (): HTMLRuxIconSlowMotionVideoElement;
    };
    interface HTMLRuxIconSmartphoneElement extends Components.RuxIconSmartphone, HTMLStencilElement {
    }
    var HTMLRuxIconSmartphoneElement: {
        prototype: HTMLRuxIconSmartphoneElement;
        new (): HTMLRuxIconSmartphoneElement;
    };
    interface HTMLRuxIconSmokeFreeElement extends Components.RuxIconSmokeFree, HTMLStencilElement {
    }
    var HTMLRuxIconSmokeFreeElement: {
        prototype: HTMLRuxIconSmokeFreeElement;
        new (): HTMLRuxIconSmokeFreeElement;
    };
    interface HTMLRuxIconSmokingRoomsElement extends Components.RuxIconSmokingRooms, HTMLStencilElement {
    }
    var HTMLRuxIconSmokingRoomsElement: {
        prototype: HTMLRuxIconSmokingRoomsElement;
        new (): HTMLRuxIconSmokingRoomsElement;
    };
    interface HTMLRuxIconSmsElement extends Components.RuxIconSms, HTMLStencilElement {
    }
    var HTMLRuxIconSmsElement: {
        prototype: HTMLRuxIconSmsElement;
        new (): HTMLRuxIconSmsElement;
    };
    interface HTMLRuxIconSmsFailedElement extends Components.RuxIconSmsFailed, HTMLStencilElement {
    }
    var HTMLRuxIconSmsFailedElement: {
        prototype: HTMLRuxIconSmsFailedElement;
        new (): HTMLRuxIconSmsFailedElement;
    };
    interface HTMLRuxIconSnoozeElement extends Components.RuxIconSnooze, HTMLStencilElement {
    }
    var HTMLRuxIconSnoozeElement: {
        prototype: HTMLRuxIconSnoozeElement;
        new (): HTMLRuxIconSnoozeElement;
    };
    interface HTMLRuxIconSolarElement extends Components.RuxIconSolar, HTMLStencilElement {
    }
    var HTMLRuxIconSolarElement: {
        prototype: HTMLRuxIconSolarElement;
        new (): HTMLRuxIconSolarElement;
    };
    interface HTMLRuxIconSortElement extends Components.RuxIconSort, HTMLStencilElement {
    }
    var HTMLRuxIconSortElement: {
        prototype: HTMLRuxIconSortElement;
        new (): HTMLRuxIconSortElement;
    };
    interface HTMLRuxIconSortByAlphaElement extends Components.RuxIconSortByAlpha, HTMLStencilElement {
    }
    var HTMLRuxIconSortByAlphaElement: {
        prototype: HTMLRuxIconSortByAlphaElement;
        new (): HTMLRuxIconSortByAlphaElement;
    };
    interface HTMLRuxIconSpaElement extends Components.RuxIconSpa, HTMLStencilElement {
    }
    var HTMLRuxIconSpaElement: {
        prototype: HTMLRuxIconSpaElement;
        new (): HTMLRuxIconSpaElement;
    };
    interface HTMLRuxIconSpaceBarElement extends Components.RuxIconSpaceBar, HTMLStencilElement {
    }
    var HTMLRuxIconSpaceBarElement: {
        prototype: HTMLRuxIconSpaceBarElement;
        new (): HTMLRuxIconSpaceBarElement;
    };
    interface HTMLRuxIconSpeakerElement extends Components.RuxIconSpeaker, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerElement: {
        prototype: HTMLRuxIconSpeakerElement;
        new (): HTMLRuxIconSpeakerElement;
    };
    interface HTMLRuxIconSpeakerGroupElement extends Components.RuxIconSpeakerGroup, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerGroupElement: {
        prototype: HTMLRuxIconSpeakerGroupElement;
        new (): HTMLRuxIconSpeakerGroupElement;
    };
    interface HTMLRuxIconSpeakerNotesElement extends Components.RuxIconSpeakerNotes, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerNotesElement: {
        prototype: HTMLRuxIconSpeakerNotesElement;
        new (): HTMLRuxIconSpeakerNotesElement;
    };
    interface HTMLRuxIconSpeakerNotesOffElement extends Components.RuxIconSpeakerNotesOff, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerNotesOffElement: {
        prototype: HTMLRuxIconSpeakerNotesOffElement;
        new (): HTMLRuxIconSpeakerNotesOffElement;
    };
    interface HTMLRuxIconSpeakerPhoneElement extends Components.RuxIconSpeakerPhone, HTMLStencilElement {
    }
    var HTMLRuxIconSpeakerPhoneElement: {
        prototype: HTMLRuxIconSpeakerPhoneElement;
        new (): HTMLRuxIconSpeakerPhoneElement;
    };
    interface HTMLRuxIconSpellcheckElement extends Components.RuxIconSpellcheck, HTMLStencilElement {
    }
    var HTMLRuxIconSpellcheckElement: {
        prototype: HTMLRuxIconSpellcheckElement;
        new (): HTMLRuxIconSpellcheckElement;
    };
    interface HTMLRuxIconStarElement extends Components.RuxIconStar, HTMLStencilElement {
    }
    var HTMLRuxIconStarElement: {
        prototype: HTMLRuxIconStarElement;
        new (): HTMLRuxIconStarElement;
    };
    interface HTMLRuxIconStarBorderElement extends Components.RuxIconStarBorder, HTMLStencilElement {
    }
    var HTMLRuxIconStarBorderElement: {
        prototype: HTMLRuxIconStarBorderElement;
        new (): HTMLRuxIconStarBorderElement;
    };
    interface HTMLRuxIconStarHalfElement extends Components.RuxIconStarHalf, HTMLStencilElement {
    }
    var HTMLRuxIconStarHalfElement: {
        prototype: HTMLRuxIconStarHalfElement;
        new (): HTMLRuxIconStarHalfElement;
    };
    interface HTMLRuxIconStarRateElement extends Components.RuxIconStarRate, HTMLStencilElement {
    }
    var HTMLRuxIconStarRateElement: {
        prototype: HTMLRuxIconStarRateElement;
        new (): HTMLRuxIconStarRateElement;
    };
    interface HTMLRuxIconStarsElement extends Components.RuxIconStars, HTMLStencilElement {
    }
    var HTMLRuxIconStarsElement: {
        prototype: HTMLRuxIconStarsElement;
        new (): HTMLRuxIconStarsElement;
    };
    interface HTMLRuxIconStayCurrentLandscapeElement extends Components.RuxIconStayCurrentLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconStayCurrentLandscapeElement: {
        prototype: HTMLRuxIconStayCurrentLandscapeElement;
        new (): HTMLRuxIconStayCurrentLandscapeElement;
    };
    interface HTMLRuxIconStayCurrentPortraitElement extends Components.RuxIconStayCurrentPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconStayCurrentPortraitElement: {
        prototype: HTMLRuxIconStayCurrentPortraitElement;
        new (): HTMLRuxIconStayCurrentPortraitElement;
    };
    interface HTMLRuxIconStayPrimaryLandscapeElement extends Components.RuxIconStayPrimaryLandscape, HTMLStencilElement {
    }
    var HTMLRuxIconStayPrimaryLandscapeElement: {
        prototype: HTMLRuxIconStayPrimaryLandscapeElement;
        new (): HTMLRuxIconStayPrimaryLandscapeElement;
    };
    interface HTMLRuxIconStayPrimaryPortraitElement extends Components.RuxIconStayPrimaryPortrait, HTMLStencilElement {
    }
    var HTMLRuxIconStayPrimaryPortraitElement: {
        prototype: HTMLRuxIconStayPrimaryPortraitElement;
        new (): HTMLRuxIconStayPrimaryPortraitElement;
    };
    interface HTMLRuxIconStopElement extends Components.RuxIconStop, HTMLStencilElement {
    }
    var HTMLRuxIconStopElement: {
        prototype: HTMLRuxIconStopElement;
        new (): HTMLRuxIconStopElement;
    };
    interface HTMLRuxIconStopScreenShareElement extends Components.RuxIconStopScreenShare, HTMLStencilElement {
    }
    var HTMLRuxIconStopScreenShareElement: {
        prototype: HTMLRuxIconStopScreenShareElement;
        new (): HTMLRuxIconStopScreenShareElement;
    };
    interface HTMLRuxIconStorageElement extends Components.RuxIconStorage, HTMLStencilElement {
    }
    var HTMLRuxIconStorageElement: {
        prototype: HTMLRuxIconStorageElement;
        new (): HTMLRuxIconStorageElement;
    };
    interface HTMLRuxIconStoreElement extends Components.RuxIconStore, HTMLStencilElement {
    }
    var HTMLRuxIconStoreElement: {
        prototype: HTMLRuxIconStoreElement;
        new (): HTMLRuxIconStoreElement;
    };
    interface HTMLRuxIconStoreMallDirectoryElement extends Components.RuxIconStoreMallDirectory, HTMLStencilElement {
    }
    var HTMLRuxIconStoreMallDirectoryElement: {
        prototype: HTMLRuxIconStoreMallDirectoryElement;
        new (): HTMLRuxIconStoreMallDirectoryElement;
    };
    interface HTMLRuxIconStraightenElement extends Components.RuxIconStraighten, HTMLStencilElement {
    }
    var HTMLRuxIconStraightenElement: {
        prototype: HTMLRuxIconStraightenElement;
        new (): HTMLRuxIconStraightenElement;
    };
    interface HTMLRuxIconStreetviewElement extends Components.RuxIconStreetview, HTMLStencilElement {
    }
    var HTMLRuxIconStreetviewElement: {
        prototype: HTMLRuxIconStreetviewElement;
        new (): HTMLRuxIconStreetviewElement;
    };
    interface HTMLRuxIconStrikethroughSElement extends Components.RuxIconStrikethroughS, HTMLStencilElement {
    }
    var HTMLRuxIconStrikethroughSElement: {
        prototype: HTMLRuxIconStrikethroughSElement;
        new (): HTMLRuxIconStrikethroughSElement;
    };
    interface HTMLRuxIconStyleElement extends Components.RuxIconStyle, HTMLStencilElement {
    }
    var HTMLRuxIconStyleElement: {
        prototype: HTMLRuxIconStyleElement;
        new (): HTMLRuxIconStyleElement;
    };
    interface HTMLRuxIconSubdirectoryArrowLeftElement extends Components.RuxIconSubdirectoryArrowLeft, HTMLStencilElement {
    }
    var HTMLRuxIconSubdirectoryArrowLeftElement: {
        prototype: HTMLRuxIconSubdirectoryArrowLeftElement;
        new (): HTMLRuxIconSubdirectoryArrowLeftElement;
    };
    interface HTMLRuxIconSubdirectoryArrowRightElement extends Components.RuxIconSubdirectoryArrowRight, HTMLStencilElement {
    }
    var HTMLRuxIconSubdirectoryArrowRightElement: {
        prototype: HTMLRuxIconSubdirectoryArrowRightElement;
        new (): HTMLRuxIconSubdirectoryArrowRightElement;
    };
    interface HTMLRuxIconSubjectElement extends Components.RuxIconSubject, HTMLStencilElement {
    }
    var HTMLRuxIconSubjectElement: {
        prototype: HTMLRuxIconSubjectElement;
        new (): HTMLRuxIconSubjectElement;
    };
    interface HTMLRuxIconSubscriptionsElement extends Components.RuxIconSubscriptions, HTMLStencilElement {
    }
    var HTMLRuxIconSubscriptionsElement: {
        prototype: HTMLRuxIconSubscriptionsElement;
        new (): HTMLRuxIconSubscriptionsElement;
    };
    interface HTMLRuxIconSubtitlesElement extends Components.RuxIconSubtitles, HTMLStencilElement {
    }
    var HTMLRuxIconSubtitlesElement: {
        prototype: HTMLRuxIconSubtitlesElement;
        new (): HTMLRuxIconSubtitlesElement;
    };
    interface HTMLRuxIconSubwayElement extends Components.RuxIconSubway, HTMLStencilElement {
    }
    var HTMLRuxIconSubwayElement: {
        prototype: HTMLRuxIconSubwayElement;
        new (): HTMLRuxIconSubwayElement;
    };
    interface HTMLRuxIconSupervisedUserCircleElement extends Components.RuxIconSupervisedUserCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSupervisedUserCircleElement: {
        prototype: HTMLRuxIconSupervisedUserCircleElement;
        new (): HTMLRuxIconSupervisedUserCircleElement;
    };
    interface HTMLRuxIconSupervisorAccountElement extends Components.RuxIconSupervisorAccount, HTMLStencilElement {
    }
    var HTMLRuxIconSupervisorAccountElement: {
        prototype: HTMLRuxIconSupervisorAccountElement;
        new (): HTMLRuxIconSupervisorAccountElement;
    };
    interface HTMLRuxIconSurroundSoundElement extends Components.RuxIconSurroundSound, HTMLStencilElement {
    }
    var HTMLRuxIconSurroundSoundElement: {
        prototype: HTMLRuxIconSurroundSoundElement;
        new (): HTMLRuxIconSurroundSoundElement;
    };
    interface HTMLRuxIconSwapCallsElement extends Components.RuxIconSwapCalls, HTMLStencilElement {
    }
    var HTMLRuxIconSwapCallsElement: {
        prototype: HTMLRuxIconSwapCallsElement;
        new (): HTMLRuxIconSwapCallsElement;
    };
    interface HTMLRuxIconSwapHorizElement extends Components.RuxIconSwapHoriz, HTMLStencilElement {
    }
    var HTMLRuxIconSwapHorizElement: {
        prototype: HTMLRuxIconSwapHorizElement;
        new (): HTMLRuxIconSwapHorizElement;
    };
    interface HTMLRuxIconSwapHorizontalCircleElement extends Components.RuxIconSwapHorizontalCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSwapHorizontalCircleElement: {
        prototype: HTMLRuxIconSwapHorizontalCircleElement;
        new (): HTMLRuxIconSwapHorizontalCircleElement;
    };
    interface HTMLRuxIconSwapVertElement extends Components.RuxIconSwapVert, HTMLStencilElement {
    }
    var HTMLRuxIconSwapVertElement: {
        prototype: HTMLRuxIconSwapVertElement;
        new (): HTMLRuxIconSwapVertElement;
    };
    interface HTMLRuxIconSwapVerticalCircleElement extends Components.RuxIconSwapVerticalCircle, HTMLStencilElement {
    }
    var HTMLRuxIconSwapVerticalCircleElement: {
        prototype: HTMLRuxIconSwapVerticalCircleElement;
        new (): HTMLRuxIconSwapVerticalCircleElement;
    };
    interface HTMLRuxIconSwitchCameraElement extends Components.RuxIconSwitchCamera, HTMLStencilElement {
    }
    var HTMLRuxIconSwitchCameraElement: {
        prototype: HTMLRuxIconSwitchCameraElement;
        new (): HTMLRuxIconSwitchCameraElement;
    };
    interface HTMLRuxIconSwitchVideoElement extends Components.RuxIconSwitchVideo, HTMLStencilElement {
    }
    var HTMLRuxIconSwitchVideoElement: {
        prototype: HTMLRuxIconSwitchVideoElement;
        new (): HTMLRuxIconSwitchVideoElement;
    };
    interface HTMLRuxIconSyncElement extends Components.RuxIconSync, HTMLStencilElement {
    }
    var HTMLRuxIconSyncElement: {
        prototype: HTMLRuxIconSyncElement;
        new (): HTMLRuxIconSyncElement;
    };
    interface HTMLRuxIconSyncDisabledElement extends Components.RuxIconSyncDisabled, HTMLStencilElement {
    }
    var HTMLRuxIconSyncDisabledElement: {
        prototype: HTMLRuxIconSyncDisabledElement;
        new (): HTMLRuxIconSyncDisabledElement;
    };
    interface HTMLRuxIconSyncProblemElement extends Components.RuxIconSyncProblem, HTMLStencilElement {
    }
    var HTMLRuxIconSyncProblemElement: {
        prototype: HTMLRuxIconSyncProblemElement;
        new (): HTMLRuxIconSyncProblemElement;
    };
    interface HTMLRuxIconSystemUpdateElement extends Components.RuxIconSystemUpdate, HTMLStencilElement {
    }
    var HTMLRuxIconSystemUpdateElement: {
        prototype: HTMLRuxIconSystemUpdateElement;
        new (): HTMLRuxIconSystemUpdateElement;
    };
    interface HTMLRuxIconTabElement extends Components.RuxIconTab, HTMLStencilElement {
    }
    var HTMLRuxIconTabElement: {
        prototype: HTMLRuxIconTabElement;
        new (): HTMLRuxIconTabElement;
    };
    interface HTMLRuxIconTabUnselectedElement extends Components.RuxIconTabUnselected, HTMLStencilElement {
    }
    var HTMLRuxIconTabUnselectedElement: {
        prototype: HTMLRuxIconTabUnselectedElement;
        new (): HTMLRuxIconTabUnselectedElement;
    };
    interface HTMLRuxIconTableChartElement extends Components.RuxIconTableChart, HTMLStencilElement {
    }
    var HTMLRuxIconTableChartElement: {
        prototype: HTMLRuxIconTableChartElement;
        new (): HTMLRuxIconTableChartElement;
    };
    interface HTMLRuxIconTabletElement extends Components.RuxIconTablet, HTMLStencilElement {
    }
    var HTMLRuxIconTabletElement: {
        prototype: HTMLRuxIconTabletElement;
        new (): HTMLRuxIconTabletElement;
    };
    interface HTMLRuxIconTabletAndroidElement extends Components.RuxIconTabletAndroid, HTMLStencilElement {
    }
    var HTMLRuxIconTabletAndroidElement: {
        prototype: HTMLRuxIconTabletAndroidElement;
        new (): HTMLRuxIconTabletAndroidElement;
    };
    interface HTMLRuxIconTabletMacElement extends Components.RuxIconTabletMac, HTMLStencilElement {
    }
    var HTMLRuxIconTabletMacElement: {
        prototype: HTMLRuxIconTabletMacElement;
        new (): HTMLRuxIconTabletMacElement;
    };
    interface HTMLRuxIconTagFacesElement extends Components.RuxIconTagFaces, HTMLStencilElement {
    }
    var HTMLRuxIconTagFacesElement: {
        prototype: HTMLRuxIconTagFacesElement;
        new (): HTMLRuxIconTagFacesElement;
    };
    interface HTMLRuxIconTapAndPlayElement extends Components.RuxIconTapAndPlay, HTMLStencilElement {
    }
    var HTMLRuxIconTapAndPlayElement: {
        prototype: HTMLRuxIconTapAndPlayElement;
        new (): HTMLRuxIconTapAndPlayElement;
    };
    interface HTMLRuxIconTerrainElement extends Components.RuxIconTerrain, HTMLStencilElement {
    }
    var HTMLRuxIconTerrainElement: {
        prototype: HTMLRuxIconTerrainElement;
        new (): HTMLRuxIconTerrainElement;
    };
    interface HTMLRuxIconTextFieldsElement extends Components.RuxIconTextFields, HTMLStencilElement {
    }
    var HTMLRuxIconTextFieldsElement: {
        prototype: HTMLRuxIconTextFieldsElement;
        new (): HTMLRuxIconTextFieldsElement;
    };
    interface HTMLRuxIconTextFormatElement extends Components.RuxIconTextFormat, HTMLStencilElement {
    }
    var HTMLRuxIconTextFormatElement: {
        prototype: HTMLRuxIconTextFormatElement;
        new (): HTMLRuxIconTextFormatElement;
    };
    interface HTMLRuxIconTextRotateUpElement extends Components.RuxIconTextRotateUp, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotateUpElement: {
        prototype: HTMLRuxIconTextRotateUpElement;
        new (): HTMLRuxIconTextRotateUpElement;
    };
    interface HTMLRuxIconTextRotateVerticalElement extends Components.RuxIconTextRotateVertical, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotateVerticalElement: {
        prototype: HTMLRuxIconTextRotateVerticalElement;
        new (): HTMLRuxIconTextRotateVerticalElement;
    };
    interface HTMLRuxIconTextRotationNoneElement extends Components.RuxIconTextRotationNone, HTMLStencilElement {
    }
    var HTMLRuxIconTextRotationNoneElement: {
        prototype: HTMLRuxIconTextRotationNoneElement;
        new (): HTMLRuxIconTextRotationNoneElement;
    };
    interface HTMLRuxIconTextsmsElement extends Components.RuxIconTextsms, HTMLStencilElement {
    }
    var HTMLRuxIconTextsmsElement: {
        prototype: HTMLRuxIconTextsmsElement;
        new (): HTMLRuxIconTextsmsElement;
    };
    interface HTMLRuxIconTextureElement extends Components.RuxIconTexture, HTMLStencilElement {
    }
    var HTMLRuxIconTextureElement: {
        prototype: HTMLRuxIconTextureElement;
        new (): HTMLRuxIconTextureElement;
    };
    interface HTMLRuxIconTheatersElement extends Components.RuxIconTheaters, HTMLStencilElement {
    }
    var HTMLRuxIconTheatersElement: {
        prototype: HTMLRuxIconTheatersElement;
        new (): HTMLRuxIconTheatersElement;
    };
    interface HTMLRuxIconThermalElement extends Components.RuxIconThermal, HTMLStencilElement {
    }
    var HTMLRuxIconThermalElement: {
        prototype: HTMLRuxIconThermalElement;
        new (): HTMLRuxIconThermalElement;
    };
    interface HTMLRuxIconThumbDownElement extends Components.RuxIconThumbDown, HTMLStencilElement {
    }
    var HTMLRuxIconThumbDownElement: {
        prototype: HTMLRuxIconThumbDownElement;
        new (): HTMLRuxIconThumbDownElement;
    };
    interface HTMLRuxIconThumbDownAltElement extends Components.RuxIconThumbDownAlt, HTMLStencilElement {
    }
    var HTMLRuxIconThumbDownAltElement: {
        prototype: HTMLRuxIconThumbDownAltElement;
        new (): HTMLRuxIconThumbDownAltElement;
    };
    interface HTMLRuxIconThumbUpElement extends Components.RuxIconThumbUp, HTMLStencilElement {
    }
    var HTMLRuxIconThumbUpElement: {
        prototype: HTMLRuxIconThumbUpElement;
        new (): HTMLRuxIconThumbUpElement;
    };
    interface HTMLRuxIconThumbUpAltElement extends Components.RuxIconThumbUpAlt, HTMLStencilElement {
    }
    var HTMLRuxIconThumbUpAltElement: {
        prototype: HTMLRuxIconThumbUpAltElement;
        new (): HTMLRuxIconThumbUpAltElement;
    };
    interface HTMLRuxIconThumbsUpDownElement extends Components.RuxIconThumbsUpDown, HTMLStencilElement {
    }
    var HTMLRuxIconThumbsUpDownElement: {
        prototype: HTMLRuxIconThumbsUpDownElement;
        new (): HTMLRuxIconThumbsUpDownElement;
    };
    interface HTMLRuxIconTimeToLeaveElement extends Components.RuxIconTimeToLeave, HTMLStencilElement {
    }
    var HTMLRuxIconTimeToLeaveElement: {
        prototype: HTMLRuxIconTimeToLeaveElement;
        new (): HTMLRuxIconTimeToLeaveElement;
    };
    interface HTMLRuxIconTimelapseElement extends Components.RuxIconTimelapse, HTMLStencilElement {
    }
    var HTMLRuxIconTimelapseElement: {
        prototype: HTMLRuxIconTimelapseElement;
        new (): HTMLRuxIconTimelapseElement;
    };
    interface HTMLRuxIconTimelineElement extends Components.RuxIconTimeline, HTMLStencilElement {
    }
    var HTMLRuxIconTimelineElement: {
        prototype: HTMLRuxIconTimelineElement;
        new (): HTMLRuxIconTimelineElement;
    };
    interface HTMLRuxIconTimerElement extends Components.RuxIconTimer, HTMLStencilElement {
    }
    var HTMLRuxIconTimerElement: {
        prototype: HTMLRuxIconTimerElement;
        new (): HTMLRuxIconTimerElement;
    };
    interface HTMLRuxIconTimer10Element extends Components.RuxIconTimer10, HTMLStencilElement {
    }
    var HTMLRuxIconTimer10Element: {
        prototype: HTMLRuxIconTimer10Element;
        new (): HTMLRuxIconTimer10Element;
    };
    interface HTMLRuxIconTimer3Element extends Components.RuxIconTimer3, HTMLStencilElement {
    }
    var HTMLRuxIconTimer3Element: {
        prototype: HTMLRuxIconTimer3Element;
        new (): HTMLRuxIconTimer3Element;
    };
    interface HTMLRuxIconTimerOffElement extends Components.RuxIconTimerOff, HTMLStencilElement {
    }
    var HTMLRuxIconTimerOffElement: {
        prototype: HTMLRuxIconTimerOffElement;
        new (): HTMLRuxIconTimerOffElement;
    };
    interface HTMLRuxIconTitleElement extends Components.RuxIconTitle, HTMLStencilElement {
    }
    var HTMLRuxIconTitleElement: {
        prototype: HTMLRuxIconTitleElement;
        new (): HTMLRuxIconTitleElement;
    };
    interface HTMLRuxIconTocElement extends Components.RuxIconToc, HTMLStencilElement {
    }
    var HTMLRuxIconTocElement: {
        prototype: HTMLRuxIconTocElement;
        new (): HTMLRuxIconTocElement;
    };
    interface HTMLRuxIconTodayElement extends Components.RuxIconToday, HTMLStencilElement {
    }
    var HTMLRuxIconTodayElement: {
        prototype: HTMLRuxIconTodayElement;
        new (): HTMLRuxIconTodayElement;
    };
    interface HTMLRuxIconToggleOffElement extends Components.RuxIconToggleOff, HTMLStencilElement {
    }
    var HTMLRuxIconToggleOffElement: {
        prototype: HTMLRuxIconToggleOffElement;
        new (): HTMLRuxIconToggleOffElement;
    };
    interface HTMLRuxIconToggleOnElement extends Components.RuxIconToggleOn, HTMLStencilElement {
    }
    var HTMLRuxIconToggleOnElement: {
        prototype: HTMLRuxIconToggleOnElement;
        new (): HTMLRuxIconToggleOnElement;
    };
    interface HTMLRuxIconTollElement extends Components.RuxIconToll, HTMLStencilElement {
    }
    var HTMLRuxIconTollElement: {
        prototype: HTMLRuxIconTollElement;
        new (): HTMLRuxIconTollElement;
    };
    interface HTMLRuxIconTonalityElement extends Components.RuxIconTonality, HTMLStencilElement {
    }
    var HTMLRuxIconTonalityElement: {
        prototype: HTMLRuxIconTonalityElement;
        new (): HTMLRuxIconTonalityElement;
    };
    interface HTMLRuxIconTouchAppElement extends Components.RuxIconTouchApp, HTMLStencilElement {
    }
    var HTMLRuxIconTouchAppElement: {
        prototype: HTMLRuxIconTouchAppElement;
        new (): HTMLRuxIconTouchAppElement;
    };
    interface HTMLRuxIconToysElement extends Components.RuxIconToys, HTMLStencilElement {
    }
    var HTMLRuxIconToysElement: {
        prototype: HTMLRuxIconToysElement;
        new (): HTMLRuxIconToysElement;
    };
    interface HTMLRuxIconTrackChangesElement extends Components.RuxIconTrackChanges, HTMLStencilElement {
    }
    var HTMLRuxIconTrackChangesElement: {
        prototype: HTMLRuxIconTrackChangesElement;
        new (): HTMLRuxIconTrackChangesElement;
    };
    interface HTMLRuxIconTrafficElement extends Components.RuxIconTraffic, HTMLStencilElement {
    }
    var HTMLRuxIconTrafficElement: {
        prototype: HTMLRuxIconTrafficElement;
        new (): HTMLRuxIconTrafficElement;
    };
    interface HTMLRuxIconTrainElement extends Components.RuxIconTrain, HTMLStencilElement {
    }
    var HTMLRuxIconTrainElement: {
        prototype: HTMLRuxIconTrainElement;
        new (): HTMLRuxIconTrainElement;
    };
    interface HTMLRuxIconTramElement extends Components.RuxIconTram, HTMLStencilElement {
    }
    var HTMLRuxIconTramElement: {
        prototype: HTMLRuxIconTramElement;
        new (): HTMLRuxIconTramElement;
    };
    interface HTMLRuxIconTransferWithinAStationElement extends Components.RuxIconTransferWithinAStation, HTMLStencilElement {
    }
    var HTMLRuxIconTransferWithinAStationElement: {
        prototype: HTMLRuxIconTransferWithinAStationElement;
        new (): HTMLRuxIconTransferWithinAStationElement;
    };
    interface HTMLRuxIconTransformElement extends Components.RuxIconTransform, HTMLStencilElement {
    }
    var HTMLRuxIconTransformElement: {
        prototype: HTMLRuxIconTransformElement;
        new (): HTMLRuxIconTransformElement;
    };
    interface HTMLRuxIconTransitEnterexitElement extends Components.RuxIconTransitEnterexit, HTMLStencilElement {
    }
    var HTMLRuxIconTransitEnterexitElement: {
        prototype: HTMLRuxIconTransitEnterexitElement;
        new (): HTMLRuxIconTransitEnterexitElement;
    };
    interface HTMLRuxIconTranslateElement extends Components.RuxIconTranslate, HTMLStencilElement {
    }
    var HTMLRuxIconTranslateElement: {
        prototype: HTMLRuxIconTranslateElement;
        new (): HTMLRuxIconTranslateElement;
    };
    interface HTMLRuxIconTrendingDownElement extends Components.RuxIconTrendingDown, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingDownElement: {
        prototype: HTMLRuxIconTrendingDownElement;
        new (): HTMLRuxIconTrendingDownElement;
    };
    interface HTMLRuxIconTrendingFlatElement extends Components.RuxIconTrendingFlat, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingFlatElement: {
        prototype: HTMLRuxIconTrendingFlatElement;
        new (): HTMLRuxIconTrendingFlatElement;
    };
    interface HTMLRuxIconTrendingUpElement extends Components.RuxIconTrendingUp, HTMLStencilElement {
    }
    var HTMLRuxIconTrendingUpElement: {
        prototype: HTMLRuxIconTrendingUpElement;
        new (): HTMLRuxIconTrendingUpElement;
    };
    interface HTMLRuxIconTripOriginElement extends Components.RuxIconTripOrigin, HTMLStencilElement {
    }
    var HTMLRuxIconTripOriginElement: {
        prototype: HTMLRuxIconTripOriginElement;
        new (): HTMLRuxIconTripOriginElement;
    };
    interface HTMLRuxIconTuneElement extends Components.RuxIconTune, HTMLStencilElement {
    }
    var HTMLRuxIconTuneElement: {
        prototype: HTMLRuxIconTuneElement;
        new (): HTMLRuxIconTuneElement;
    };
    interface HTMLRuxIconTurnedInElement extends Components.RuxIconTurnedIn, HTMLStencilElement {
    }
    var HTMLRuxIconTurnedInElement: {
        prototype: HTMLRuxIconTurnedInElement;
        new (): HTMLRuxIconTurnedInElement;
    };
    interface HTMLRuxIconTurnedInNotElement extends Components.RuxIconTurnedInNot, HTMLStencilElement {
    }
    var HTMLRuxIconTurnedInNotElement: {
        prototype: HTMLRuxIconTurnedInNotElement;
        new (): HTMLRuxIconTurnedInNotElement;
    };
    interface HTMLRuxIconTvElement extends Components.RuxIconTv, HTMLStencilElement {
    }
    var HTMLRuxIconTvElement: {
        prototype: HTMLRuxIconTvElement;
        new (): HTMLRuxIconTvElement;
    };
    interface HTMLRuxIconTvOffElement extends Components.RuxIconTvOff, HTMLStencilElement {
    }
    var HTMLRuxIconTvOffElement: {
        prototype: HTMLRuxIconTvOffElement;
        new (): HTMLRuxIconTvOffElement;
    };
    interface HTMLRuxIconUnarchiveElement extends Components.RuxIconUnarchive, HTMLStencilElement {
    }
    var HTMLRuxIconUnarchiveElement: {
        prototype: HTMLRuxIconUnarchiveElement;
        new (): HTMLRuxIconUnarchiveElement;
    };
    interface HTMLRuxIconUndoElement extends Components.RuxIconUndo, HTMLStencilElement {
    }
    var HTMLRuxIconUndoElement: {
        prototype: HTMLRuxIconUndoElement;
        new (): HTMLRuxIconUndoElement;
    };
    interface HTMLRuxIconUnfoldLessElement extends Components.RuxIconUnfoldLess, HTMLStencilElement {
    }
    var HTMLRuxIconUnfoldLessElement: {
        prototype: HTMLRuxIconUnfoldLessElement;
        new (): HTMLRuxIconUnfoldLessElement;
    };
    interface HTMLRuxIconUnfoldMoreElement extends Components.RuxIconUnfoldMore, HTMLStencilElement {
    }
    var HTMLRuxIconUnfoldMoreElement: {
        prototype: HTMLRuxIconUnfoldMoreElement;
        new (): HTMLRuxIconUnfoldMoreElement;
    };
    interface HTMLRuxIconUnsubscribeElement extends Components.RuxIconUnsubscribe, HTMLStencilElement {
    }
    var HTMLRuxIconUnsubscribeElement: {
        prototype: HTMLRuxIconUnsubscribeElement;
        new (): HTMLRuxIconUnsubscribeElement;
    };
    interface HTMLRuxIconUpdateElement extends Components.RuxIconUpdate, HTMLStencilElement {
    }
    var HTMLRuxIconUpdateElement: {
        prototype: HTMLRuxIconUpdateElement;
        new (): HTMLRuxIconUpdateElement;
    };
    interface HTMLRuxIconUsbElement extends Components.RuxIconUsb, HTMLStencilElement {
    }
    var HTMLRuxIconUsbElement: {
        prototype: HTMLRuxIconUsbElement;
        new (): HTMLRuxIconUsbElement;
    };
    interface HTMLRuxIconVerifiedUserElement extends Components.RuxIconVerifiedUser, HTMLStencilElement {
    }
    var HTMLRuxIconVerifiedUserElement: {
        prototype: HTMLRuxIconVerifiedUserElement;
        new (): HTMLRuxIconVerifiedUserElement;
    };
    interface HTMLRuxIconVerticalAlignBottomElement extends Components.RuxIconVerticalAlignBottom, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignBottomElement: {
        prototype: HTMLRuxIconVerticalAlignBottomElement;
        new (): HTMLRuxIconVerticalAlignBottomElement;
    };
    interface HTMLRuxIconVerticalAlignCenterElement extends Components.RuxIconVerticalAlignCenter, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignCenterElement: {
        prototype: HTMLRuxIconVerticalAlignCenterElement;
        new (): HTMLRuxIconVerticalAlignCenterElement;
    };
    interface HTMLRuxIconVerticalAlignTopElement extends Components.RuxIconVerticalAlignTop, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalAlignTopElement: {
        prototype: HTMLRuxIconVerticalAlignTopElement;
        new (): HTMLRuxIconVerticalAlignTopElement;
    };
    interface HTMLRuxIconVerticalSplitElement extends Components.RuxIconVerticalSplit, HTMLStencilElement {
    }
    var HTMLRuxIconVerticalSplitElement: {
        prototype: HTMLRuxIconVerticalSplitElement;
        new (): HTMLRuxIconVerticalSplitElement;
    };
    interface HTMLRuxIconVibrationElement extends Components.RuxIconVibration, HTMLStencilElement {
    }
    var HTMLRuxIconVibrationElement: {
        prototype: HTMLRuxIconVibrationElement;
        new (): HTMLRuxIconVibrationElement;
    };
    interface HTMLRuxIconVideoCallElement extends Components.RuxIconVideoCall, HTMLStencilElement {
    }
    var HTMLRuxIconVideoCallElement: {
        prototype: HTMLRuxIconVideoCallElement;
        new (): HTMLRuxIconVideoCallElement;
    };
    interface HTMLRuxIconVideoLabelElement extends Components.RuxIconVideoLabel, HTMLStencilElement {
    }
    var HTMLRuxIconVideoLabelElement: {
        prototype: HTMLRuxIconVideoLabelElement;
        new (): HTMLRuxIconVideoLabelElement;
    };
    interface HTMLRuxIconVideoLibraryElement extends Components.RuxIconVideoLibrary, HTMLStencilElement {
    }
    var HTMLRuxIconVideoLibraryElement: {
        prototype: HTMLRuxIconVideoLibraryElement;
        new (): HTMLRuxIconVideoLibraryElement;
    };
    interface HTMLRuxIconVideocamElement extends Components.RuxIconVideocam, HTMLStencilElement {
    }
    var HTMLRuxIconVideocamElement: {
        prototype: HTMLRuxIconVideocamElement;
        new (): HTMLRuxIconVideocamElement;
    };
    interface HTMLRuxIconVideocamOffElement extends Components.RuxIconVideocamOff, HTMLStencilElement {
    }
    var HTMLRuxIconVideocamOffElement: {
        prototype: HTMLRuxIconVideocamOffElement;
        new (): HTMLRuxIconVideocamOffElement;
    };
    interface HTMLRuxIconVideogameAssetElement extends Components.RuxIconVideogameAsset, HTMLStencilElement {
    }
    var HTMLRuxIconVideogameAssetElement: {
        prototype: HTMLRuxIconVideogameAssetElement;
        new (): HTMLRuxIconVideogameAssetElement;
    };
    interface HTMLRuxIconViewAgendaElement extends Components.RuxIconViewAgenda, HTMLStencilElement {
    }
    var HTMLRuxIconViewAgendaElement: {
        prototype: HTMLRuxIconViewAgendaElement;
        new (): HTMLRuxIconViewAgendaElement;
    };
    interface HTMLRuxIconViewArrayElement extends Components.RuxIconViewArray, HTMLStencilElement {
    }
    var HTMLRuxIconViewArrayElement: {
        prototype: HTMLRuxIconViewArrayElement;
        new (): HTMLRuxIconViewArrayElement;
    };
    interface HTMLRuxIconViewCarouselElement extends Components.RuxIconViewCarousel, HTMLStencilElement {
    }
    var HTMLRuxIconViewCarouselElement: {
        prototype: HTMLRuxIconViewCarouselElement;
        new (): HTMLRuxIconViewCarouselElement;
    };
    interface HTMLRuxIconViewColumnElement extends Components.RuxIconViewColumn, HTMLStencilElement {
    }
    var HTMLRuxIconViewColumnElement: {
        prototype: HTMLRuxIconViewColumnElement;
        new (): HTMLRuxIconViewColumnElement;
    };
    interface HTMLRuxIconViewComfyElement extends Components.RuxIconViewComfy, HTMLStencilElement {
    }
    var HTMLRuxIconViewComfyElement: {
        prototype: HTMLRuxIconViewComfyElement;
        new (): HTMLRuxIconViewComfyElement;
    };
    interface HTMLRuxIconViewCompactElement extends Components.RuxIconViewCompact, HTMLStencilElement {
    }
    var HTMLRuxIconViewCompactElement: {
        prototype: HTMLRuxIconViewCompactElement;
        new (): HTMLRuxIconViewCompactElement;
    };
    interface HTMLRuxIconViewDayElement extends Components.RuxIconViewDay, HTMLStencilElement {
    }
    var HTMLRuxIconViewDayElement: {
        prototype: HTMLRuxIconViewDayElement;
        new (): HTMLRuxIconViewDayElement;
    };
    interface HTMLRuxIconViewHeadlineElement extends Components.RuxIconViewHeadline, HTMLStencilElement {
    }
    var HTMLRuxIconViewHeadlineElement: {
        prototype: HTMLRuxIconViewHeadlineElement;
        new (): HTMLRuxIconViewHeadlineElement;
    };
    interface HTMLRuxIconViewListElement extends Components.RuxIconViewList, HTMLStencilElement {
    }
    var HTMLRuxIconViewListElement: {
        prototype: HTMLRuxIconViewListElement;
        new (): HTMLRuxIconViewListElement;
    };
    interface HTMLRuxIconViewModuleElement extends Components.RuxIconViewModule, HTMLStencilElement {
    }
    var HTMLRuxIconViewModuleElement: {
        prototype: HTMLRuxIconViewModuleElement;
        new (): HTMLRuxIconViewModuleElement;
    };
    interface HTMLRuxIconViewQuiltElement extends Components.RuxIconViewQuilt, HTMLStencilElement {
    }
    var HTMLRuxIconViewQuiltElement: {
        prototype: HTMLRuxIconViewQuiltElement;
        new (): HTMLRuxIconViewQuiltElement;
    };
    interface HTMLRuxIconViewStreamElement extends Components.RuxIconViewStream, HTMLStencilElement {
    }
    var HTMLRuxIconViewStreamElement: {
        prototype: HTMLRuxIconViewStreamElement;
        new (): HTMLRuxIconViewStreamElement;
    };
    interface HTMLRuxIconViewWeekElement extends Components.RuxIconViewWeek, HTMLStencilElement {
    }
    var HTMLRuxIconViewWeekElement: {
        prototype: HTMLRuxIconViewWeekElement;
        new (): HTMLRuxIconViewWeekElement;
    };
    interface HTMLRuxIconVignetteElement extends Components.RuxIconVignette, HTMLStencilElement {
    }
    var HTMLRuxIconVignetteElement: {
        prototype: HTMLRuxIconVignetteElement;
        new (): HTMLRuxIconVignetteElement;
    };
    interface HTMLRuxIconVisibilityElement extends Components.RuxIconVisibility, HTMLStencilElement {
    }
    var HTMLRuxIconVisibilityElement: {
        prototype: HTMLRuxIconVisibilityElement;
        new (): HTMLRuxIconVisibilityElement;
    };
    interface HTMLRuxIconVisibilityOffElement extends Components.RuxIconVisibilityOff, HTMLStencilElement {
    }
    var HTMLRuxIconVisibilityOffElement: {
        prototype: HTMLRuxIconVisibilityOffElement;
        new (): HTMLRuxIconVisibilityOffElement;
    };
    interface HTMLRuxIconVoiceChatElement extends Components.RuxIconVoiceChat, HTMLStencilElement {
    }
    var HTMLRuxIconVoiceChatElement: {
        prototype: HTMLRuxIconVoiceChatElement;
        new (): HTMLRuxIconVoiceChatElement;
    };
    interface HTMLRuxIconVoiceOverOffElement extends Components.RuxIconVoiceOverOff, HTMLStencilElement {
    }
    var HTMLRuxIconVoiceOverOffElement: {
        prototype: HTMLRuxIconVoiceOverOffElement;
        new (): HTMLRuxIconVoiceOverOffElement;
    };
    interface HTMLRuxIconVoicemailElement extends Components.RuxIconVoicemail, HTMLStencilElement {
    }
    var HTMLRuxIconVoicemailElement: {
        prototype: HTMLRuxIconVoicemailElement;
        new (): HTMLRuxIconVoicemailElement;
    };
    interface HTMLRuxIconVolumeDownElement extends Components.RuxIconVolumeDown, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeDownElement: {
        prototype: HTMLRuxIconVolumeDownElement;
        new (): HTMLRuxIconVolumeDownElement;
    };
    interface HTMLRuxIconVolumeMuteElement extends Components.RuxIconVolumeMute, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeMuteElement: {
        prototype: HTMLRuxIconVolumeMuteElement;
        new (): HTMLRuxIconVolumeMuteElement;
    };
    interface HTMLRuxIconVolumeOffElement extends Components.RuxIconVolumeOff, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeOffElement: {
        prototype: HTMLRuxIconVolumeOffElement;
        new (): HTMLRuxIconVolumeOffElement;
    };
    interface HTMLRuxIconVolumeUpElement extends Components.RuxIconVolumeUp, HTMLStencilElement {
    }
    var HTMLRuxIconVolumeUpElement: {
        prototype: HTMLRuxIconVolumeUpElement;
        new (): HTMLRuxIconVolumeUpElement;
    };
    interface HTMLRuxIconVpnKeyElement extends Components.RuxIconVpnKey, HTMLStencilElement {
    }
    var HTMLRuxIconVpnKeyElement: {
        prototype: HTMLRuxIconVpnKeyElement;
        new (): HTMLRuxIconVpnKeyElement;
    };
    interface HTMLRuxIconVpnLockElement extends Components.RuxIconVpnLock, HTMLStencilElement {
    }
    var HTMLRuxIconVpnLockElement: {
        prototype: HTMLRuxIconVpnLockElement;
        new (): HTMLRuxIconVpnLockElement;
    };
    interface HTMLRuxIconWallpaperElement extends Components.RuxIconWallpaper, HTMLStencilElement {
    }
    var HTMLRuxIconWallpaperElement: {
        prototype: HTMLRuxIconWallpaperElement;
        new (): HTMLRuxIconWallpaperElement;
    };
    interface HTMLRuxIconWarningElement extends Components.RuxIconWarning, HTMLStencilElement {
    }
    var HTMLRuxIconWarningElement: {
        prototype: HTMLRuxIconWarningElement;
        new (): HTMLRuxIconWarningElement;
    };
    interface HTMLRuxIconWatchElement extends Components.RuxIconWatch, HTMLStencilElement {
    }
    var HTMLRuxIconWatchElement: {
        prototype: HTMLRuxIconWatchElement;
        new (): HTMLRuxIconWatchElement;
    };
    interface HTMLRuxIconWatchLaterElement extends Components.RuxIconWatchLater, HTMLStencilElement {
    }
    var HTMLRuxIconWatchLaterElement: {
        prototype: HTMLRuxIconWatchLaterElement;
        new (): HTMLRuxIconWatchLaterElement;
    };
    interface HTMLRuxIconWavesElement extends Components.RuxIconWaves, HTMLStencilElement {
    }
    var HTMLRuxIconWavesElement: {
        prototype: HTMLRuxIconWavesElement;
        new (): HTMLRuxIconWavesElement;
    };
    interface HTMLRuxIconWbAutoElement extends Components.RuxIconWbAuto, HTMLStencilElement {
    }
    var HTMLRuxIconWbAutoElement: {
        prototype: HTMLRuxIconWbAutoElement;
        new (): HTMLRuxIconWbAutoElement;
    };
    interface HTMLRuxIconWbCloudyElement extends Components.RuxIconWbCloudy, HTMLStencilElement {
    }
    var HTMLRuxIconWbCloudyElement: {
        prototype: HTMLRuxIconWbCloudyElement;
        new (): HTMLRuxIconWbCloudyElement;
    };
    interface HTMLRuxIconWbIncandescentElement extends Components.RuxIconWbIncandescent, HTMLStencilElement {
    }
    var HTMLRuxIconWbIncandescentElement: {
        prototype: HTMLRuxIconWbIncandescentElement;
        new (): HTMLRuxIconWbIncandescentElement;
    };
    interface HTMLRuxIconWbIridescentElement extends Components.RuxIconWbIridescent, HTMLStencilElement {
    }
    var HTMLRuxIconWbIridescentElement: {
        prototype: HTMLRuxIconWbIridescentElement;
        new (): HTMLRuxIconWbIridescentElement;
    };
    interface HTMLRuxIconWbSunnyElement extends Components.RuxIconWbSunny, HTMLStencilElement {
    }
    var HTMLRuxIconWbSunnyElement: {
        prototype: HTMLRuxIconWbSunnyElement;
        new (): HTMLRuxIconWbSunnyElement;
    };
    interface HTMLRuxIconWcElement extends Components.RuxIconWc, HTMLStencilElement {
    }
    var HTMLRuxIconWcElement: {
        prototype: HTMLRuxIconWcElement;
        new (): HTMLRuxIconWcElement;
    };
    interface HTMLRuxIconWebElement extends Components.RuxIconWeb, HTMLStencilElement {
    }
    var HTMLRuxIconWebElement: {
        prototype: HTMLRuxIconWebElement;
        new (): HTMLRuxIconWebElement;
    };
    interface HTMLRuxIconWebAssetElement extends Components.RuxIconWebAsset, HTMLStencilElement {
    }
    var HTMLRuxIconWebAssetElement: {
        prototype: HTMLRuxIconWebAssetElement;
        new (): HTMLRuxIconWebAssetElement;
    };
    interface HTMLRuxIconWeekendElement extends Components.RuxIconWeekend, HTMLStencilElement {
    }
    var HTMLRuxIconWeekendElement: {
        prototype: HTMLRuxIconWeekendElement;
        new (): HTMLRuxIconWeekendElement;
    };
    interface HTMLRuxIconWhatshotElement extends Components.RuxIconWhatshot, HTMLStencilElement {
    }
    var HTMLRuxIconWhatshotElement: {
        prototype: HTMLRuxIconWhatshotElement;
        new (): HTMLRuxIconWhatshotElement;
    };
    interface HTMLRuxIconWhereToVoteElement extends Components.RuxIconWhereToVote, HTMLStencilElement {
    }
    var HTMLRuxIconWhereToVoteElement: {
        prototype: HTMLRuxIconWhereToVoteElement;
        new (): HTMLRuxIconWhereToVoteElement;
    };
    interface HTMLRuxIconWidgetsElement extends Components.RuxIconWidgets, HTMLStencilElement {
    }
    var HTMLRuxIconWidgetsElement: {
        prototype: HTMLRuxIconWidgetsElement;
        new (): HTMLRuxIconWidgetsElement;
    };
    interface HTMLRuxIconWifiElement extends Components.RuxIconWifi, HTMLStencilElement {
    }
    var HTMLRuxIconWifiElement: {
        prototype: HTMLRuxIconWifiElement;
        new (): HTMLRuxIconWifiElement;
    };
    interface HTMLRuxIconWifiLockElement extends Components.RuxIconWifiLock, HTMLStencilElement {
    }
    var HTMLRuxIconWifiLockElement: {
        prototype: HTMLRuxIconWifiLockElement;
        new (): HTMLRuxIconWifiLockElement;
    };
    interface HTMLRuxIconWifiOffElement extends Components.RuxIconWifiOff, HTMLStencilElement {
    }
    var HTMLRuxIconWifiOffElement: {
        prototype: HTMLRuxIconWifiOffElement;
        new (): HTMLRuxIconWifiOffElement;
    };
    interface HTMLRuxIconWifiTetheringElement extends Components.RuxIconWifiTethering, HTMLStencilElement {
    }
    var HTMLRuxIconWifiTetheringElement: {
        prototype: HTMLRuxIconWifiTetheringElement;
        new (): HTMLRuxIconWifiTetheringElement;
    };
    interface HTMLRuxIconWorkElement extends Components.RuxIconWork, HTMLStencilElement {
    }
    var HTMLRuxIconWorkElement: {
        prototype: HTMLRuxIconWorkElement;
        new (): HTMLRuxIconWorkElement;
    };
    interface HTMLRuxIconWorkOffElement extends Components.RuxIconWorkOff, HTMLStencilElement {
    }
    var HTMLRuxIconWorkOffElement: {
        prototype: HTMLRuxIconWorkOffElement;
        new (): HTMLRuxIconWorkOffElement;
    };
    interface HTMLRuxIconWorkOutlineElement extends Components.RuxIconWorkOutline, HTMLStencilElement {
    }
    var HTMLRuxIconWorkOutlineElement: {
        prototype: HTMLRuxIconWorkOutlineElement;
        new (): HTMLRuxIconWorkOutlineElement;
    };
    interface HTMLRuxIconWrapTextElement extends Components.RuxIconWrapText, HTMLStencilElement {
    }
    var HTMLRuxIconWrapTextElement: {
        prototype: HTMLRuxIconWrapTextElement;
        new (): HTMLRuxIconWrapTextElement;
    };
    interface HTMLRuxIconYoutubeSearchedForElement extends Components.RuxIconYoutubeSearchedFor, HTMLStencilElement {
    }
    var HTMLRuxIconYoutubeSearchedForElement: {
        prototype: HTMLRuxIconYoutubeSearchedForElement;
        new (): HTMLRuxIconYoutubeSearchedForElement;
    };
    interface HTMLRuxIconZoomInElement extends Components.RuxIconZoomIn, HTMLStencilElement {
    }
    var HTMLRuxIconZoomInElement: {
        prototype: HTMLRuxIconZoomInElement;
        new (): HTMLRuxIconZoomInElement;
    };
    interface HTMLRuxIconZoomInMapElement extends Components.RuxIconZoomInMap, HTMLStencilElement {
    }
    var HTMLRuxIconZoomInMapElement: {
        prototype: HTMLRuxIconZoomInMapElement;
        new (): HTMLRuxIconZoomInMapElement;
    };
    interface HTMLRuxIconZoomOutElement extends Components.RuxIconZoomOut, HTMLStencilElement {
    }
    var HTMLRuxIconZoomOutElement: {
        prototype: HTMLRuxIconZoomOutElement;
        new (): HTMLRuxIconZoomOutElement;
    };
    interface HTMLRuxIconZoomOutMapElement extends Components.RuxIconZoomOutMap, HTMLStencilElement {
    }
    var HTMLRuxIconZoomOutMapElement: {
        prototype: HTMLRuxIconZoomOutMapElement;
        new (): HTMLRuxIconZoomOutMapElement;
    };
    interface HTMLRuxIndeterminateProgressElement extends Components.RuxIndeterminateProgress, HTMLStencilElement {
    }
    var HTMLRuxIndeterminateProgressElement: {
        prototype: HTMLRuxIndeterminateProgressElement;
        new (): HTMLRuxIndeterminateProgressElement;
    };
    interface HTMLRuxInputElement extends Components.RuxInput, HTMLStencilElement {
    }
    var HTMLRuxInputElement: {
        prototype: HTMLRuxInputElement;
        new (): HTMLRuxInputElement;
    };
    interface HTMLRuxLogElement extends Components.RuxLog, HTMLStencilElement {
    }
    var HTMLRuxLogElement: {
        prototype: HTMLRuxLogElement;
        new (): HTMLRuxLogElement;
    };
    interface HTMLRuxMenuElement extends Components.RuxMenu, HTMLStencilElement {
    }
    var HTMLRuxMenuElement: {
        prototype: HTMLRuxMenuElement;
        new (): HTMLRuxMenuElement;
    };
    interface HTMLRuxMenuItemElement extends Components.RuxMenuItem, HTMLStencilElement {
    }
    var HTMLRuxMenuItemElement: {
        prototype: HTMLRuxMenuItemElement;
        new (): HTMLRuxMenuItemElement;
    };
    interface HTMLRuxMenuItemDividerElement extends Components.RuxMenuItemDivider, HTMLStencilElement {
    }
    var HTMLRuxMenuItemDividerElement: {
        prototype: HTMLRuxMenuItemDividerElement;
        new (): HTMLRuxMenuItemDividerElement;
    };
    interface HTMLRuxMonitoringIconElement extends Components.RuxMonitoringIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringIconElement: {
        prototype: HTMLRuxMonitoringIconElement;
        new (): HTMLRuxMonitoringIconElement;
    };
    interface HTMLRuxMonitoringProgressIconElement extends Components.RuxMonitoringProgressIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringProgressIconElement: {
        prototype: HTMLRuxMonitoringProgressIconElement;
        new (): HTMLRuxMonitoringProgressIconElement;
    };
    interface HTMLRuxNotificationElement extends Components.RuxNotification, HTMLStencilElement {
    }
    var HTMLRuxNotificationElement: {
        prototype: HTMLRuxNotificationElement;
        new (): HTMLRuxNotificationElement;
    };
    interface HTMLRuxOptionElement extends Components.RuxOption, HTMLStencilElement {
    }
    var HTMLRuxOptionElement: {
        prototype: HTMLRuxOptionElement;
        new (): HTMLRuxOptionElement;
    };
    interface HTMLRuxOptionGroupElement extends Components.RuxOptionGroup, HTMLStencilElement {
    }
    var HTMLRuxOptionGroupElement: {
        prototype: HTMLRuxOptionGroupElement;
        new (): HTMLRuxOptionGroupElement;
    };
    interface HTMLRuxPopUpElement extends Components.RuxPopUp, HTMLStencilElement {
    }
    var HTMLRuxPopUpElement: {
        prototype: HTMLRuxPopUpElement;
        new (): HTMLRuxPopUpElement;
    };
    interface HTMLRuxProgressElement extends Components.RuxProgress, HTMLStencilElement {
    }
    var HTMLRuxProgressElement: {
        prototype: HTMLRuxProgressElement;
        new (): HTMLRuxProgressElement;
    };
    interface HTMLRuxPushButtonElement extends Components.RuxPushButton, HTMLStencilElement {
    }
    var HTMLRuxPushButtonElement: {
        prototype: HTMLRuxPushButtonElement;
        new (): HTMLRuxPushButtonElement;
    };
    interface HTMLRuxRadioElement extends Components.RuxRadio, HTMLStencilElement {
    }
    var HTMLRuxRadioElement: {
        prototype: HTMLRuxRadioElement;
        new (): HTMLRuxRadioElement;
    };
    interface HTMLRuxRadioGroupElement extends Components.RuxRadioGroup, HTMLStencilElement {
    }
    var HTMLRuxRadioGroupElement: {
        prototype: HTMLRuxRadioGroupElement;
        new (): HTMLRuxRadioGroupElement;
    };
    interface HTMLRuxRulerElement extends Components.RuxRuler, HTMLStencilElement {
    }
    var HTMLRuxRulerElement: {
        prototype: HTMLRuxRulerElement;
        new (): HTMLRuxRulerElement;
    };
    interface HTMLRuxSegmentedButtonElement extends Components.RuxSegmentedButton, HTMLStencilElement {
    }
    var HTMLRuxSegmentedButtonElement: {
        prototype: HTMLRuxSegmentedButtonElement;
        new (): HTMLRuxSegmentedButtonElement;
    };
    interface HTMLRuxSelectElement extends Components.RuxSelect, HTMLStencilElement {
    }
    var HTMLRuxSelectElement: {
        prototype: HTMLRuxSelectElement;
        new (): HTMLRuxSelectElement;
    };
    interface HTMLRuxSliderElement extends Components.RuxSlider, HTMLStencilElement {
    }
    var HTMLRuxSliderElement: {
        prototype: HTMLRuxSliderElement;
        new (): HTMLRuxSliderElement;
    };
    interface HTMLRuxStatusElement extends Components.RuxStatus, HTMLStencilElement {
    }
    var HTMLRuxStatusElement: {
        prototype: HTMLRuxStatusElement;
        new (): HTMLRuxStatusElement;
    };
    interface HTMLRuxSwitchElement extends Components.RuxSwitch, HTMLStencilElement {
    }
    var HTMLRuxSwitchElement: {
        prototype: HTMLRuxSwitchElement;
        new (): HTMLRuxSwitchElement;
    };
    interface HTMLRuxTabElement extends Components.RuxTab, HTMLStencilElement {
    }
    var HTMLRuxTabElement: {
        prototype: HTMLRuxTabElement;
        new (): HTMLRuxTabElement;
    };
    interface HTMLRuxTabPanelElement extends Components.RuxTabPanel, HTMLStencilElement {
    }
    var HTMLRuxTabPanelElement: {
        prototype: HTMLRuxTabPanelElement;
        new (): HTMLRuxTabPanelElement;
    };
    interface HTMLRuxTabPanelsElement extends Components.RuxTabPanels, HTMLStencilElement {
    }
    var HTMLRuxTabPanelsElement: {
        prototype: HTMLRuxTabPanelsElement;
        new (): HTMLRuxTabPanelsElement;
    };
    interface HTMLRuxTableElement extends Components.RuxTable, HTMLStencilElement {
    }
    var HTMLRuxTableElement: {
        prototype: HTMLRuxTableElement;
        new (): HTMLRuxTableElement;
    };
    interface HTMLRuxTableBodyElement extends Components.RuxTableBody, HTMLStencilElement {
    }
    var HTMLRuxTableBodyElement: {
        prototype: HTMLRuxTableBodyElement;
        new (): HTMLRuxTableBodyElement;
    };
    interface HTMLRuxTableCellElement extends Components.RuxTableCell, HTMLStencilElement {
    }
    var HTMLRuxTableCellElement: {
        prototype: HTMLRuxTableCellElement;
        new (): HTMLRuxTableCellElement;
    };
    interface HTMLRuxTableHeaderElement extends Components.RuxTableHeader, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderElement: {
        prototype: HTMLRuxTableHeaderElement;
        new (): HTMLRuxTableHeaderElement;
    };
    interface HTMLRuxTableHeaderCellElement extends Components.RuxTableHeaderCell, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderCellElement: {
        prototype: HTMLRuxTableHeaderCellElement;
        new (): HTMLRuxTableHeaderCellElement;
    };
    interface HTMLRuxTableHeaderRowElement extends Components.RuxTableHeaderRow, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderRowElement: {
        prototype: HTMLRuxTableHeaderRowElement;
        new (): HTMLRuxTableHeaderRowElement;
    };
    interface HTMLRuxTableRowElement extends Components.RuxTableRow, HTMLStencilElement {
    }
    var HTMLRuxTableRowElement: {
        prototype: HTMLRuxTableRowElement;
        new (): HTMLRuxTableRowElement;
    };
    interface HTMLRuxTabsElement extends Components.RuxTabs, HTMLStencilElement {
    }
    var HTMLRuxTabsElement: {
        prototype: HTMLRuxTabsElement;
        new (): HTMLRuxTabsElement;
    };
    interface HTMLRuxTagElement extends Components.RuxTag, HTMLStencilElement {
    }
    var HTMLRuxTagElement: {
        prototype: HTMLRuxTagElement;
        new (): HTMLRuxTagElement;
    };
    interface HTMLRuxTextareaElement extends Components.RuxTextarea, HTMLStencilElement {
    }
    var HTMLRuxTextareaElement: {
        prototype: HTMLRuxTextareaElement;
        new (): HTMLRuxTextareaElement;
    };
    interface HTMLRuxTimeRegionElement extends Components.RuxTimeRegion, HTMLStencilElement {
    }
    var HTMLRuxTimeRegionElement: {
        prototype: HTMLRuxTimeRegionElement;
        new (): HTMLRuxTimeRegionElement;
    };
    interface HTMLRuxTimelineElement extends Components.RuxTimeline, HTMLStencilElement {
    }
    var HTMLRuxTimelineElement: {
        prototype: HTMLRuxTimelineElement;
        new (): HTMLRuxTimelineElement;
    };
    interface HTMLRuxTooltipElement extends Components.RuxTooltip, HTMLStencilElement {
    }
    var HTMLRuxTooltipElement: {
        prototype: HTMLRuxTooltipElement;
        new (): HTMLRuxTooltipElement;
    };
    interface HTMLRuxTrackElement extends Components.RuxTrack, HTMLStencilElement {
    }
    var HTMLRuxTrackElement: {
        prototype: HTMLRuxTrackElement;
        new (): HTMLRuxTrackElement;
    };
    interface HTMLRuxTreeElement extends Components.RuxTree, HTMLStencilElement {
    }
    var HTMLRuxTreeElement: {
        prototype: HTMLRuxTreeElement;
        new (): HTMLRuxTreeElement;
    };
    interface HTMLRuxTreeNodeElement extends Components.RuxTreeNode, HTMLStencilElement {
    }
    var HTMLRuxTreeNodeElement: {
        prototype: HTMLRuxTreeNodeElement;
        new (): HTMLRuxTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "rux-accordion": HTMLRuxAccordionElement;
        "rux-accordion-item": HTMLRuxAccordionItemElement;
        "rux-breadcrumb": HTMLRuxBreadcrumbElement;
        "rux-breadcrumb-item": HTMLRuxBreadcrumbItemElement;
        "rux-button": HTMLRuxButtonElement;
        "rux-button-group": HTMLRuxButtonGroupElement;
        "rux-card": HTMLRuxCardElement;
        "rux-checkbox": HTMLRuxCheckboxElement;
        "rux-checkbox-group": HTMLRuxCheckboxGroupElement;
        "rux-classification-marking": HTMLRuxClassificationMarkingElement;
        "rux-clock": HTMLRuxClockElement;
        "rux-container": HTMLRuxContainerElement;
        "rux-datetime": HTMLRuxDatetimeElement;
        "rux-dialog": HTMLRuxDialogElement;
        "rux-global-status-bar": HTMLRuxGlobalStatusBarElement;
        "rux-icon": HTMLRuxIconElement;
        "rux-icon-360": HTMLRuxIcon360Element;
        "rux-icon-3d-rotation": HTMLRuxIcon3dRotationElement;
        "rux-icon-4k": HTMLRuxIcon4kElement;
        "rux-icon-ac-unit": HTMLRuxIconAcUnitElement;
        "rux-icon-access-alarms": HTMLRuxIconAccessAlarmsElement;
        "rux-icon-access-time": HTMLRuxIconAccessTimeElement;
        "rux-icon-accessibility": HTMLRuxIconAccessibilityElement;
        "rux-icon-accessibility-new": HTMLRuxIconAccessibilityNewElement;
        "rux-icon-accessible": HTMLRuxIconAccessibleElement;
        "rux-icon-accessible-forward": HTMLRuxIconAccessibleForwardElement;
        "rux-icon-account-balance": HTMLRuxIconAccountBalanceElement;
        "rux-icon-account-balance-wallet": HTMLRuxIconAccountBalanceWalletElement;
        "rux-icon-account-box": HTMLRuxIconAccountBoxElement;
        "rux-icon-account-circle": HTMLRuxIconAccountCircleElement;
        "rux-icon-adb": HTMLRuxIconAdbElement;
        "rux-icon-add": HTMLRuxIconAddElement;
        "rux-icon-add-a-photo": HTMLRuxIconAddAPhotoElement;
        "rux-icon-add-alarm": HTMLRuxIconAddAlarmElement;
        "rux-icon-add-alert": HTMLRuxIconAddAlertElement;
        "rux-icon-add-box": HTMLRuxIconAddBoxElement;
        "rux-icon-add-circle": HTMLRuxIconAddCircleElement;
        "rux-icon-add-circle-outline": HTMLRuxIconAddCircleOutlineElement;
        "rux-icon-add-comment": HTMLRuxIconAddCommentElement;
        "rux-icon-add-location": HTMLRuxIconAddLocationElement;
        "rux-icon-add-photo-alternate": HTMLRuxIconAddPhotoAlternateElement;
        "rux-icon-add-shopping-cart": HTMLRuxIconAddShoppingCartElement;
        "rux-icon-add-to-home-screen": HTMLRuxIconAddToHomeScreenElement;
        "rux-icon-add-to-photos": HTMLRuxIconAddToPhotosElement;
        "rux-icon-add-to-queue": HTMLRuxIconAddToQueueElement;
        "rux-icon-adjust": HTMLRuxIconAdjustElement;
        "rux-icon-airline-seat-flat": HTMLRuxIconAirlineSeatFlatElement;
        "rux-icon-airline-seat-flat-angled": HTMLRuxIconAirlineSeatFlatAngledElement;
        "rux-icon-airline-seat-individual-suite": HTMLRuxIconAirlineSeatIndividualSuiteElement;
        "rux-icon-airline-seat-legroom-extra": HTMLRuxIconAirlineSeatLegroomExtraElement;
        "rux-icon-airline-seat-legroom-normal": HTMLRuxIconAirlineSeatLegroomNormalElement;
        "rux-icon-airline-seat-legroom-reduced": HTMLRuxIconAirlineSeatLegroomReducedElement;
        "rux-icon-airline-seat-recline-extra": HTMLRuxIconAirlineSeatReclineExtraElement;
        "rux-icon-airline-seat-recline-normal": HTMLRuxIconAirlineSeatReclineNormalElement;
        "rux-icon-airplanemode-active": HTMLRuxIconAirplanemodeActiveElement;
        "rux-icon-airplanemode-inactive": HTMLRuxIconAirplanemodeInactiveElement;
        "rux-icon-airplay": HTMLRuxIconAirplayElement;
        "rux-icon-airport-shuttle": HTMLRuxIconAirportShuttleElement;
        "rux-icon-alarm": HTMLRuxIconAlarmElement;
        "rux-icon-alarm-add": HTMLRuxIconAlarmAddElement;
        "rux-icon-alarm-off": HTMLRuxIconAlarmOffElement;
        "rux-icon-alarm-on": HTMLRuxIconAlarmOnElement;
        "rux-icon-album": HTMLRuxIconAlbumElement;
        "rux-icon-all-inbox": HTMLRuxIconAllInboxElement;
        "rux-icon-all-inclusive": HTMLRuxIconAllInclusiveElement;
        "rux-icon-all-out": HTMLRuxIconAllOutElement;
        "rux-icon-alternate-email": HTMLRuxIconAlternateEmailElement;
        "rux-icon-altitude": HTMLRuxIconAltitudeElement;
        "rux-icon-android": HTMLRuxIconAndroidElement;
        "rux-icon-announcement": HTMLRuxIconAnnouncementElement;
        "rux-icon-antenna": HTMLRuxIconAntennaElement;
        "rux-icon-antenna-off": HTMLRuxIconAntennaOffElement;
        "rux-icon-antenna-receive": HTMLRuxIconAntennaReceiveElement;
        "rux-icon-antenna-transmit": HTMLRuxIconAntennaTransmitElement;
        "rux-icon-apps": HTMLRuxIconAppsElement;
        "rux-icon-archive": HTMLRuxIconArchiveElement;
        "rux-icon-arrow-back": HTMLRuxIconArrowBackElement;
        "rux-icon-arrow-back-ios": HTMLRuxIconArrowBackIosElement;
        "rux-icon-arrow-downward": HTMLRuxIconArrowDownwardElement;
        "rux-icon-arrow-drop-down": HTMLRuxIconArrowDropDownElement;
        "rux-icon-arrow-drop-down-circle": HTMLRuxIconArrowDropDownCircleElement;
        "rux-icon-arrow-drop-up": HTMLRuxIconArrowDropUpElement;
        "rux-icon-arrow-forward": HTMLRuxIconArrowForwardElement;
        "rux-icon-arrow-forward-ios": HTMLRuxIconArrowForwardIosElement;
        "rux-icon-arrow-left": HTMLRuxIconArrowLeftElement;
        "rux-icon-arrow-right": HTMLRuxIconArrowRightElement;
        "rux-icon-arrow-right-alt": HTMLRuxIconArrowRightAltElement;
        "rux-icon-arrow-upward": HTMLRuxIconArrowUpwardElement;
        "rux-icon-art-track": HTMLRuxIconArtTrackElement;
        "rux-icon-aspect-ratio": HTMLRuxIconAspectRatioElement;
        "rux-icon-assessment": HTMLRuxIconAssessmentElement;
        "rux-icon-assignment": HTMLRuxIconAssignmentElement;
        "rux-icon-assignment-find": HTMLRuxIconAssignmentFindElement;
        "rux-icon-assignment-late": HTMLRuxIconAssignmentLateElement;
        "rux-icon-assignment-return": HTMLRuxIconAssignmentReturnElement;
        "rux-icon-assignment-returned": HTMLRuxIconAssignmentReturnedElement;
        "rux-icon-assignment-turned-in": HTMLRuxIconAssignmentTurnedInElement;
        "rux-icon-assistant": HTMLRuxIconAssistantElement;
        "rux-icon-assistant-photo": HTMLRuxIconAssistantPhotoElement;
        "rux-icon-attach-file": HTMLRuxIconAttachFileElement;
        "rux-icon-attach-money": HTMLRuxIconAttachMoneyElement;
        "rux-icon-attachment": HTMLRuxIconAttachmentElement;
        "rux-icon-audiotrack": HTMLRuxIconAudiotrackElement;
        "rux-icon-autorenew": HTMLRuxIconAutorenewElement;
        "rux-icon-av-timer": HTMLRuxIconAvTimerElement;
        "rux-icon-backspace": HTMLRuxIconBackspaceElement;
        "rux-icon-backup": HTMLRuxIconBackupElement;
        "rux-icon-ballot": HTMLRuxIconBallotElement;
        "rux-icon-bar-chart": HTMLRuxIconBarChartElement;
        "rux-icon-battery-20": HTMLRuxIconBattery20Element;
        "rux-icon-battery-30": HTMLRuxIconBattery30Element;
        "rux-icon-battery-50": HTMLRuxIconBattery50Element;
        "rux-icon-battery-60": HTMLRuxIconBattery60Element;
        "rux-icon-battery-80": HTMLRuxIconBattery80Element;
        "rux-icon-battery-90": HTMLRuxIconBattery90Element;
        "rux-icon-battery-alert": HTMLRuxIconBatteryAlertElement;
        "rux-icon-battery-charging-20": HTMLRuxIconBatteryCharging20Element;
        "rux-icon-battery-charging-30": HTMLRuxIconBatteryCharging30Element;
        "rux-icon-battery-charging-50": HTMLRuxIconBatteryCharging50Element;
        "rux-icon-battery-charging-60": HTMLRuxIconBatteryCharging60Element;
        "rux-icon-battery-charging-80": HTMLRuxIconBatteryCharging80Element;
        "rux-icon-battery-charging-90": HTMLRuxIconBatteryCharging90Element;
        "rux-icon-battery-charging-full": HTMLRuxIconBatteryChargingFullElement;
        "rux-icon-battery-full": HTMLRuxIconBatteryFullElement;
        "rux-icon-battery-std": HTMLRuxIconBatteryStdElement;
        "rux-icon-battery-unknown": HTMLRuxIconBatteryUnknownElement;
        "rux-icon-beach-access": HTMLRuxIconBeachAccessElement;
        "rux-icon-beenhere": HTMLRuxIconBeenhereElement;
        "rux-icon-block": HTMLRuxIconBlockElement;
        "rux-icon-bluetooth": HTMLRuxIconBluetoothElement;
        "rux-icon-bluetooth-audio": HTMLRuxIconBluetoothAudioElement;
        "rux-icon-bluetooth-connected": HTMLRuxIconBluetoothConnectedElement;
        "rux-icon-bluetooth-disabled": HTMLRuxIconBluetoothDisabledElement;
        "rux-icon-bluetooth-searching": HTMLRuxIconBluetoothSearchingElement;
        "rux-icon-blur-circular": HTMLRuxIconBlurCircularElement;
        "rux-icon-blur-linear": HTMLRuxIconBlurLinearElement;
        "rux-icon-blur-off": HTMLRuxIconBlurOffElement;
        "rux-icon-blur-on": HTMLRuxIconBlurOnElement;
        "rux-icon-book": HTMLRuxIconBookElement;
        "rux-icon-bookmark": HTMLRuxIconBookmarkElement;
        "rux-icon-bookmark-border": HTMLRuxIconBookmarkBorderElement;
        "rux-icon-bookmarks": HTMLRuxIconBookmarksElement;
        "rux-icon-border-all": HTMLRuxIconBorderAllElement;
        "rux-icon-border-bottom": HTMLRuxIconBorderBottomElement;
        "rux-icon-border-clear": HTMLRuxIconBorderClearElement;
        "rux-icon-border-color": HTMLRuxIconBorderColorElement;
        "rux-icon-border-horizontal": HTMLRuxIconBorderHorizontalElement;
        "rux-icon-border-inner": HTMLRuxIconBorderInnerElement;
        "rux-icon-border-left": HTMLRuxIconBorderLeftElement;
        "rux-icon-border-outer": HTMLRuxIconBorderOuterElement;
        "rux-icon-border-right": HTMLRuxIconBorderRightElement;
        "rux-icon-border-style": HTMLRuxIconBorderStyleElement;
        "rux-icon-border-top": HTMLRuxIconBorderTopElement;
        "rux-icon-border-vertical": HTMLRuxIconBorderVerticalElement;
        "rux-icon-branding-watermark": HTMLRuxIconBrandingWatermarkElement;
        "rux-icon-brightness-1": HTMLRuxIconBrightness1Element;
        "rux-icon-brightness-2": HTMLRuxIconBrightness2Element;
        "rux-icon-brightness-3": HTMLRuxIconBrightness3Element;
        "rux-icon-brightness-4": HTMLRuxIconBrightness4Element;
        "rux-icon-brightness-5": HTMLRuxIconBrightness5Element;
        "rux-icon-brightness-6": HTMLRuxIconBrightness6Element;
        "rux-icon-brightness-7": HTMLRuxIconBrightness7Element;
        "rux-icon-brightness-auto": HTMLRuxIconBrightnessAutoElement;
        "rux-icon-brightness-high": HTMLRuxIconBrightnessHighElement;
        "rux-icon-brightness-low": HTMLRuxIconBrightnessLowElement;
        "rux-icon-brightness-medium": HTMLRuxIconBrightnessMediumElement;
        "rux-icon-broken-image": HTMLRuxIconBrokenImageElement;
        "rux-icon-brush": HTMLRuxIconBrushElement;
        "rux-icon-bubble-chart": HTMLRuxIconBubbleChartElement;
        "rux-icon-bug-report": HTMLRuxIconBugReportElement;
        "rux-icon-build": HTMLRuxIconBuildElement;
        "rux-icon-burst-mode": HTMLRuxIconBurstModeElement;
        "rux-icon-business": HTMLRuxIconBusinessElement;
        "rux-icon-business-center": HTMLRuxIconBusinessCenterElement;
        "rux-icon-cached": HTMLRuxIconCachedElement;
        "rux-icon-cake": HTMLRuxIconCakeElement;
        "rux-icon-calendar-today": HTMLRuxIconCalendarTodayElement;
        "rux-icon-calendar-view-day": HTMLRuxIconCalendarViewDayElement;
        "rux-icon-call": HTMLRuxIconCallElement;
        "rux-icon-call-end": HTMLRuxIconCallEndElement;
        "rux-icon-call-made": HTMLRuxIconCallMadeElement;
        "rux-icon-call-merge": HTMLRuxIconCallMergeElement;
        "rux-icon-call-missed": HTMLRuxIconCallMissedElement;
        "rux-icon-call-missed-outgoing": HTMLRuxIconCallMissedOutgoingElement;
        "rux-icon-call-received": HTMLRuxIconCallReceivedElement;
        "rux-icon-call-split": HTMLRuxIconCallSplitElement;
        "rux-icon-call-to-action": HTMLRuxIconCallToActionElement;
        "rux-icon-camera": HTMLRuxIconCameraElement;
        "rux-icon-camera-alt": HTMLRuxIconCameraAltElement;
        "rux-icon-camera-enhance": HTMLRuxIconCameraEnhanceElement;
        "rux-icon-camera-front": HTMLRuxIconCameraFrontElement;
        "rux-icon-camera-rear": HTMLRuxIconCameraRearElement;
        "rux-icon-camera-roll": HTMLRuxIconCameraRollElement;
        "rux-icon-cancel": HTMLRuxIconCancelElement;
        "rux-icon-cancel-presentation": HTMLRuxIconCancelPresentationElement;
        "rux-icon-card-giftcard": HTMLRuxIconCardGiftcardElement;
        "rux-icon-card-membership": HTMLRuxIconCardMembershipElement;
        "rux-icon-card-travel": HTMLRuxIconCardTravelElement;
        "rux-icon-casino": HTMLRuxIconCasinoElement;
        "rux-icon-cast": HTMLRuxIconCastElement;
        "rux-icon-cast-connected": HTMLRuxIconCastConnectedElement;
        "rux-icon-cast-for-education": HTMLRuxIconCastForEducationElement;
        "rux-icon-category": HTMLRuxIconCategoryElement;
        "rux-icon-cell-wifi": HTMLRuxIconCellWifiElement;
        "rux-icon-center-focus-strong": HTMLRuxIconCenterFocusStrongElement;
        "rux-icon-center-focus-weak": HTMLRuxIconCenterFocusWeakElement;
        "rux-icon-change-history": HTMLRuxIconChangeHistoryElement;
        "rux-icon-chat": HTMLRuxIconChatElement;
        "rux-icon-chat-bubble": HTMLRuxIconChatBubbleElement;
        "rux-icon-chat-bubble-outline": HTMLRuxIconChatBubbleOutlineElement;
        "rux-icon-check": HTMLRuxIconCheckElement;
        "rux-icon-check-box": HTMLRuxIconCheckBoxElement;
        "rux-icon-check-box-outline-blank": HTMLRuxIconCheckBoxOutlineBlankElement;
        "rux-icon-check-circle": HTMLRuxIconCheckCircleElement;
        "rux-icon-check-circle-outline": HTMLRuxIconCheckCircleOutlineElement;
        "rux-icon-chevron-left": HTMLRuxIconChevronLeftElement;
        "rux-icon-chevron-right": HTMLRuxIconChevronRightElement;
        "rux-icon-child-care": HTMLRuxIconChildCareElement;
        "rux-icon-child-friendly": HTMLRuxIconChildFriendlyElement;
        "rux-icon-chrome-reader-mode": HTMLRuxIconChromeReaderModeElement;
        "rux-icon-class": HTMLRuxIconClassElement;
        "rux-icon-clear": HTMLRuxIconClearElement;
        "rux-icon-clear-all": HTMLRuxIconClearAllElement;
        "rux-icon-close": HTMLRuxIconCloseElement;
        "rux-icon-closed-caption": HTMLRuxIconClosedCaptionElement;
        "rux-icon-cloud": HTMLRuxIconCloudElement;
        "rux-icon-cloud-circle": HTMLRuxIconCloudCircleElement;
        "rux-icon-cloud-done": HTMLRuxIconCloudDoneElement;
        "rux-icon-cloud-download": HTMLRuxIconCloudDownloadElement;
        "rux-icon-cloud-off": HTMLRuxIconCloudOffElement;
        "rux-icon-cloud-queue": HTMLRuxIconCloudQueueElement;
        "rux-icon-cloud-upload": HTMLRuxIconCloudUploadElement;
        "rux-icon-code": HTMLRuxIconCodeElement;
        "rux-icon-collections": HTMLRuxIconCollectionsElement;
        "rux-icon-collections-bookmark": HTMLRuxIconCollectionsBookmarkElement;
        "rux-icon-color-lens": HTMLRuxIconColorLensElement;
        "rux-icon-colorize": HTMLRuxIconColorizeElement;
        "rux-icon-comment": HTMLRuxIconCommentElement;
        "rux-icon-commute": HTMLRuxIconCommuteElement;
        "rux-icon-compare": HTMLRuxIconCompareElement;
        "rux-icon-compare-arrows": HTMLRuxIconCompareArrowsElement;
        "rux-icon-compass-calibration": HTMLRuxIconCompassCalibrationElement;
        "rux-icon-computer": HTMLRuxIconComputerElement;
        "rux-icon-confirmation-number": HTMLRuxIconConfirmationNumberElement;
        "rux-icon-contact-mail": HTMLRuxIconContactMailElement;
        "rux-icon-contact-phone": HTMLRuxIconContactPhoneElement;
        "rux-icon-contact-support": HTMLRuxIconContactSupportElement;
        "rux-icon-contacts": HTMLRuxIconContactsElement;
        "rux-icon-control-camera": HTMLRuxIconControlCameraElement;
        "rux-icon-control-point": HTMLRuxIconControlPointElement;
        "rux-icon-control-point-duplicate": HTMLRuxIconControlPointDuplicateElement;
        "rux-icon-copyright": HTMLRuxIconCopyrightElement;
        "rux-icon-create": HTMLRuxIconCreateElement;
        "rux-icon-create-new-folder": HTMLRuxIconCreateNewFolderElement;
        "rux-icon-credit-card": HTMLRuxIconCreditCardElement;
        "rux-icon-crop": HTMLRuxIconCropElement;
        "rux-icon-crop-16-9": HTMLRuxIconCrop169Element;
        "rux-icon-crop-3-2": HTMLRuxIconCrop32Element;
        "rux-icon-crop-5-4": HTMLRuxIconCrop54Element;
        "rux-icon-crop-7-5": HTMLRuxIconCrop75Element;
        "rux-icon-crop-din": HTMLRuxIconCropDinElement;
        "rux-icon-crop-free": HTMLRuxIconCropFreeElement;
        "rux-icon-crop-landscape": HTMLRuxIconCropLandscapeElement;
        "rux-icon-crop-original": HTMLRuxIconCropOriginalElement;
        "rux-icon-crop-portrait": HTMLRuxIconCropPortraitElement;
        "rux-icon-crop-rotate": HTMLRuxIconCropRotateElement;
        "rux-icon-crop-square": HTMLRuxIconCropSquareElement;
        "rux-icon-dashboard": HTMLRuxIconDashboardElement;
        "rux-icon-data-usage": HTMLRuxIconDataUsageElement;
        "rux-icon-date-range": HTMLRuxIconDateRangeElement;
        "rux-icon-dehaze": HTMLRuxIconDehazeElement;
        "rux-icon-delete": HTMLRuxIconDeleteElement;
        "rux-icon-delete-forever": HTMLRuxIconDeleteForeverElement;
        "rux-icon-delete-outline": HTMLRuxIconDeleteOutlineElement;
        "rux-icon-delete-sweep": HTMLRuxIconDeleteSweepElement;
        "rux-icon-departure-board": HTMLRuxIconDepartureBoardElement;
        "rux-icon-description": HTMLRuxIconDescriptionElement;
        "rux-icon-desktop-access-disabled": HTMLRuxIconDesktopAccessDisabledElement;
        "rux-icon-desktop-mac": HTMLRuxIconDesktopMacElement;
        "rux-icon-desktop-windows": HTMLRuxIconDesktopWindowsElement;
        "rux-icon-details": HTMLRuxIconDetailsElement;
        "rux-icon-developer-board": HTMLRuxIconDeveloperBoardElement;
        "rux-icon-developer-mode": HTMLRuxIconDeveloperModeElement;
        "rux-icon-device-hub": HTMLRuxIconDeviceHubElement;
        "rux-icon-device-unknown": HTMLRuxIconDeviceUnknownElement;
        "rux-icon-devices": HTMLRuxIconDevicesElement;
        "rux-icon-devices-other": HTMLRuxIconDevicesOtherElement;
        "rux-icon-dialer-sip": HTMLRuxIconDialerSipElement;
        "rux-icon-dialpad": HTMLRuxIconDialpadElement;
        "rux-icon-directions": HTMLRuxIconDirectionsElement;
        "rux-icon-directions-bike": HTMLRuxIconDirectionsBikeElement;
        "rux-icon-directions-boat": HTMLRuxIconDirectionsBoatElement;
        "rux-icon-directions-bus": HTMLRuxIconDirectionsBusElement;
        "rux-icon-directions-car": HTMLRuxIconDirectionsCarElement;
        "rux-icon-directions-railway": HTMLRuxIconDirectionsRailwayElement;
        "rux-icon-directions-run": HTMLRuxIconDirectionsRunElement;
        "rux-icon-directions-subway": HTMLRuxIconDirectionsSubwayElement;
        "rux-icon-directions-transit": HTMLRuxIconDirectionsTransitElement;
        "rux-icon-directions-walk": HTMLRuxIconDirectionsWalkElement;
        "rux-icon-disc-full": HTMLRuxIconDiscFullElement;
        "rux-icon-dns": HTMLRuxIconDnsElement;
        "rux-icon-dock": HTMLRuxIconDockElement;
        "rux-icon-domain": HTMLRuxIconDomainElement;
        "rux-icon-domain-disabled": HTMLRuxIconDomainDisabledElement;
        "rux-icon-done": HTMLRuxIconDoneElement;
        "rux-icon-done-all": HTMLRuxIconDoneAllElement;
        "rux-icon-done-outline": HTMLRuxIconDoneOutlineElement;
        "rux-icon-donut-large": HTMLRuxIconDonutLargeElement;
        "rux-icon-donut-small": HTMLRuxIconDonutSmallElement;
        "rux-icon-drafts": HTMLRuxIconDraftsElement;
        "rux-icon-drag-handle": HTMLRuxIconDragHandleElement;
        "rux-icon-drag-indicator": HTMLRuxIconDragIndicatorElement;
        "rux-icon-drive-eta": HTMLRuxIconDriveEtaElement;
        "rux-icon-duo": HTMLRuxIconDuoElement;
        "rux-icon-dvr": HTMLRuxIconDvrElement;
        "rux-icon-edit": HTMLRuxIconEditElement;
        "rux-icon-edit-attributes": HTMLRuxIconEditAttributesElement;
        "rux-icon-edit-location": HTMLRuxIconEditLocationElement;
        "rux-icon-eject": HTMLRuxIconEjectElement;
        "rux-icon-email": HTMLRuxIconEmailElement;
        "rux-icon-enhanced-encryption": HTMLRuxIconEnhancedEncryptionElement;
        "rux-icon-equalizer": HTMLRuxIconEqualizerElement;
        "rux-icon-equipment": HTMLRuxIconEquipmentElement;
        "rux-icon-error": HTMLRuxIconErrorElement;
        "rux-icon-error-outline": HTMLRuxIconErrorOutlineElement;
        "rux-icon-euro-symbol": HTMLRuxIconEuroSymbolElement;
        "rux-icon-ev-station": HTMLRuxIconEvStationElement;
        "rux-icon-event": HTMLRuxIconEventElement;
        "rux-icon-event-available": HTMLRuxIconEventAvailableElement;
        "rux-icon-event-busy": HTMLRuxIconEventBusyElement;
        "rux-icon-event-note": HTMLRuxIconEventNoteElement;
        "rux-icon-exit-to-app": HTMLRuxIconExitToAppElement;
        "rux-icon-expand-less": HTMLRuxIconExpandLessElement;
        "rux-icon-expand-more": HTMLRuxIconExpandMoreElement;
        "rux-icon-explicit": HTMLRuxIconExplicitElement;
        "rux-icon-explore": HTMLRuxIconExploreElement;
        "rux-icon-explore-off": HTMLRuxIconExploreOffElement;
        "rux-icon-exposure": HTMLRuxIconExposureElement;
        "rux-icon-exposure-neg-1": HTMLRuxIconExposureNeg1Element;
        "rux-icon-exposure-neg-2": HTMLRuxIconExposureNeg2Element;
        "rux-icon-exposure-plus-1": HTMLRuxIconExposurePlus1Element;
        "rux-icon-exposure-plus-2": HTMLRuxIconExposurePlus2Element;
        "rux-icon-exposure-zero": HTMLRuxIconExposureZeroElement;
        "rux-icon-extension": HTMLRuxIconExtensionElement;
        "rux-icon-face": HTMLRuxIconFaceElement;
        "rux-icon-fast-forward": HTMLRuxIconFastForwardElement;
        "rux-icon-fast-rewind": HTMLRuxIconFastRewindElement;
        "rux-icon-fastfood": HTMLRuxIconFastfoodElement;
        "rux-icon-favorite": HTMLRuxIconFavoriteElement;
        "rux-icon-favorite-border": HTMLRuxIconFavoriteBorderElement;
        "rux-icon-featured-play-list": HTMLRuxIconFeaturedPlayListElement;
        "rux-icon-featured-video": HTMLRuxIconFeaturedVideoElement;
        "rux-icon-feedback": HTMLRuxIconFeedbackElement;
        "rux-icon-fiber-dvr": HTMLRuxIconFiberDvrElement;
        "rux-icon-fiber-manual-record": HTMLRuxIconFiberManualRecordElement;
        "rux-icon-fiber-new": HTMLRuxIconFiberNewElement;
        "rux-icon-fiber-pin": HTMLRuxIconFiberPinElement;
        "rux-icon-fiber-smart-record": HTMLRuxIconFiberSmartRecordElement;
        "rux-icon-file-copy": HTMLRuxIconFileCopyElement;
        "rux-icon-filter": HTMLRuxIconFilterElement;
        "rux-icon-filter-1": HTMLRuxIconFilter1Element;
        "rux-icon-filter-2": HTMLRuxIconFilter2Element;
        "rux-icon-filter-3": HTMLRuxIconFilter3Element;
        "rux-icon-filter-4": HTMLRuxIconFilter4Element;
        "rux-icon-filter-5": HTMLRuxIconFilter5Element;
        "rux-icon-filter-6": HTMLRuxIconFilter6Element;
        "rux-icon-filter-7": HTMLRuxIconFilter7Element;
        "rux-icon-filter-8": HTMLRuxIconFilter8Element;
        "rux-icon-filter-9": HTMLRuxIconFilter9Element;
        "rux-icon-filter-9-plus": HTMLRuxIconFilter9PlusElement;
        "rux-icon-filter-b-and-w": HTMLRuxIconFilterBAndWElement;
        "rux-icon-filter-center-focus": HTMLRuxIconFilterCenterFocusElement;
        "rux-icon-filter-drama": HTMLRuxIconFilterDramaElement;
        "rux-icon-filter-frames": HTMLRuxIconFilterFramesElement;
        "rux-icon-filter-hdr": HTMLRuxIconFilterHdrElement;
        "rux-icon-filter-list": HTMLRuxIconFilterListElement;
        "rux-icon-filter-none": HTMLRuxIconFilterNoneElement;
        "rux-icon-filter-tilt-shift": HTMLRuxIconFilterTiltShiftElement;
        "rux-icon-filter-vintage": HTMLRuxIconFilterVintageElement;
        "rux-icon-find-in-page": HTMLRuxIconFindInPageElement;
        "rux-icon-find-replace": HTMLRuxIconFindReplaceElement;
        "rux-icon-fingerprint": HTMLRuxIconFingerprintElement;
        "rux-icon-first-page": HTMLRuxIconFirstPageElement;
        "rux-icon-fitness-center": HTMLRuxIconFitnessCenterElement;
        "rux-icon-flag": HTMLRuxIconFlagElement;
        "rux-icon-flare": HTMLRuxIconFlareElement;
        "rux-icon-flash-auto": HTMLRuxIconFlashAutoElement;
        "rux-icon-flash-off": HTMLRuxIconFlashOffElement;
        "rux-icon-flash-on": HTMLRuxIconFlashOnElement;
        "rux-icon-flight": HTMLRuxIconFlightElement;
        "rux-icon-flight-land": HTMLRuxIconFlightLandElement;
        "rux-icon-flight-takeoff": HTMLRuxIconFlightTakeoffElement;
        "rux-icon-flip": HTMLRuxIconFlipElement;
        "rux-icon-flip-to-back": HTMLRuxIconFlipToBackElement;
        "rux-icon-flip-to-front": HTMLRuxIconFlipToFrontElement;
        "rux-icon-folder": HTMLRuxIconFolderElement;
        "rux-icon-folder-open": HTMLRuxIconFolderOpenElement;
        "rux-icon-folder-shared": HTMLRuxIconFolderSharedElement;
        "rux-icon-folder-special": HTMLRuxIconFolderSpecialElement;
        "rux-icon-font-download": HTMLRuxIconFontDownloadElement;
        "rux-icon-format-align-center": HTMLRuxIconFormatAlignCenterElement;
        "rux-icon-format-align-justify": HTMLRuxIconFormatAlignJustifyElement;
        "rux-icon-format-align-left": HTMLRuxIconFormatAlignLeftElement;
        "rux-icon-format-align-right": HTMLRuxIconFormatAlignRightElement;
        "rux-icon-format-bold": HTMLRuxIconFormatBoldElement;
        "rux-icon-format-clear": HTMLRuxIconFormatClearElement;
        "rux-icon-format-color-fill": HTMLRuxIconFormatColorFillElement;
        "rux-icon-format-color-reset": HTMLRuxIconFormatColorResetElement;
        "rux-icon-format-color-text": HTMLRuxIconFormatColorTextElement;
        "rux-icon-format-indent-decrease": HTMLRuxIconFormatIndentDecreaseElement;
        "rux-icon-format-indent-increase": HTMLRuxIconFormatIndentIncreaseElement;
        "rux-icon-format-italic": HTMLRuxIconFormatItalicElement;
        "rux-icon-format-line-spacing": HTMLRuxIconFormatLineSpacingElement;
        "rux-icon-format-list-bulleted": HTMLRuxIconFormatListBulletedElement;
        "rux-icon-format-list-numbered": HTMLRuxIconFormatListNumberedElement;
        "rux-icon-format-list-numbered-rtl": HTMLRuxIconFormatListNumberedRtlElement;
        "rux-icon-format-paint": HTMLRuxIconFormatPaintElement;
        "rux-icon-format-quote": HTMLRuxIconFormatQuoteElement;
        "rux-icon-format-shapes": HTMLRuxIconFormatShapesElement;
        "rux-icon-format-size": HTMLRuxIconFormatSizeElement;
        "rux-icon-format-strikethrough": HTMLRuxIconFormatStrikethroughElement;
        "rux-icon-format-textdirection-l-to-r": HTMLRuxIconFormatTextdirectionLToRElement;
        "rux-icon-format-textdirection-r-to-l": HTMLRuxIconFormatTextdirectionRToLElement;
        "rux-icon-format-underlined": HTMLRuxIconFormatUnderlinedElement;
        "rux-icon-forum": HTMLRuxIconForumElement;
        "rux-icon-forward": HTMLRuxIconForwardElement;
        "rux-icon-forward-10": HTMLRuxIconForward10Element;
        "rux-icon-forward-30": HTMLRuxIconForward30Element;
        "rux-icon-forward-5": HTMLRuxIconForward5Element;
        "rux-icon-free-breakfast": HTMLRuxIconFreeBreakfastElement;
        "rux-icon-fullscreen": HTMLRuxIconFullscreenElement;
        "rux-icon-fullscreen-exit": HTMLRuxIconFullscreenExitElement;
        "rux-icon-functions": HTMLRuxIconFunctionsElement;
        "rux-icon-g-translate": HTMLRuxIconGTranslateElement;
        "rux-icon-gamepad": HTMLRuxIconGamepadElement;
        "rux-icon-games": HTMLRuxIconGamesElement;
        "rux-icon-gavel": HTMLRuxIconGavelElement;
        "rux-icon-gesture": HTMLRuxIconGestureElement;
        "rux-icon-get-app": HTMLRuxIconGetAppElement;
        "rux-icon-gif": HTMLRuxIconGifElement;
        "rux-icon-golf-course": HTMLRuxIconGolfCourseElement;
        "rux-icon-gps-fixed": HTMLRuxIconGpsFixedElement;
        "rux-icon-gps-not-fixed": HTMLRuxIconGpsNotFixedElement;
        "rux-icon-gps-off": HTMLRuxIconGpsOffElement;
        "rux-icon-grade": HTMLRuxIconGradeElement;
        "rux-icon-gradient": HTMLRuxIconGradientElement;
        "rux-icon-grain": HTMLRuxIconGrainElement;
        "rux-icon-graphic-eq": HTMLRuxIconGraphicEqElement;
        "rux-icon-grid-off": HTMLRuxIconGridOffElement;
        "rux-icon-grid-on": HTMLRuxIconGridOnElement;
        "rux-icon-group": HTMLRuxIconGroupElement;
        "rux-icon-group-add": HTMLRuxIconGroupAddElement;
        "rux-icon-group-work": HTMLRuxIconGroupWorkElement;
        "rux-icon-hardware": HTMLRuxIconHardwareElement;
        "rux-icon-hd": HTMLRuxIconHdElement;
        "rux-icon-hdr-off": HTMLRuxIconHdrOffElement;
        "rux-icon-hdr-on": HTMLRuxIconHdrOnElement;
        "rux-icon-hdr-strong": HTMLRuxIconHdrStrongElement;
        "rux-icon-hdr-weak": HTMLRuxIconHdrWeakElement;
        "rux-icon-headset": HTMLRuxIconHeadsetElement;
        "rux-icon-headset-mic": HTMLRuxIconHeadsetMicElement;
        "rux-icon-healing": HTMLRuxIconHealingElement;
        "rux-icon-hearing": HTMLRuxIconHearingElement;
        "rux-icon-help": HTMLRuxIconHelpElement;
        "rux-icon-help-outline": HTMLRuxIconHelpOutlineElement;
        "rux-icon-high-quality": HTMLRuxIconHighQualityElement;
        "rux-icon-highlight": HTMLRuxIconHighlightElement;
        "rux-icon-highlight-off": HTMLRuxIconHighlightOffElement;
        "rux-icon-history": HTMLRuxIconHistoryElement;
        "rux-icon-home": HTMLRuxIconHomeElement;
        "rux-icon-horizontal-split": HTMLRuxIconHorizontalSplitElement;
        "rux-icon-hot-tub": HTMLRuxIconHotTubElement;
        "rux-icon-hotel": HTMLRuxIconHotelElement;
        "rux-icon-hourglass-empty": HTMLRuxIconHourglassEmptyElement;
        "rux-icon-hourglass-full": HTMLRuxIconHourglassFullElement;
        "rux-icon-how-to-reg": HTMLRuxIconHowToRegElement;
        "rux-icon-how-to-vote": HTMLRuxIconHowToVoteElement;
        "rux-icon-http": HTMLRuxIconHttpElement;
        "rux-icon-https": HTMLRuxIconHttpsElement;
        "rux-icon-image": HTMLRuxIconImageElement;
        "rux-icon-image-aspect-ratio": HTMLRuxIconImageAspectRatioElement;
        "rux-icon-image-search": HTMLRuxIconImageSearchElement;
        "rux-icon-import-contacts": HTMLRuxIconImportContactsElement;
        "rux-icon-import-export": HTMLRuxIconImportExportElement;
        "rux-icon-important-devices": HTMLRuxIconImportantDevicesElement;
        "rux-icon-inbox": HTMLRuxIconInboxElement;
        "rux-icon-indeterminate-check-box": HTMLRuxIconIndeterminateCheckBoxElement;
        "rux-icon-info": HTMLRuxIconInfoElement;
        "rux-icon-input": HTMLRuxIconInputElement;
        "rux-icon-insert-chart": HTMLRuxIconInsertChartElement;
        "rux-icon-insert-chart-outlined": HTMLRuxIconInsertChartOutlinedElement;
        "rux-icon-insert-comment": HTMLRuxIconInsertCommentElement;
        "rux-icon-insert-drive-file": HTMLRuxIconInsertDriveFileElement;
        "rux-icon-insert-emoticon": HTMLRuxIconInsertEmoticonElement;
        "rux-icon-insert-invitation": HTMLRuxIconInsertInvitationElement;
        "rux-icon-insert-link": HTMLRuxIconInsertLinkElement;
        "rux-icon-insert-photo": HTMLRuxIconInsertPhotoElement;
        "rux-icon-invert-colors": HTMLRuxIconInvertColorsElement;
        "rux-icon-invert-colors-off": HTMLRuxIconInvertColorsOffElement;
        "rux-icon-iso": HTMLRuxIconIsoElement;
        "rux-icon-keyboard": HTMLRuxIconKeyboardElement;
        "rux-icon-keyboard-arrow-down": HTMLRuxIconKeyboardArrowDownElement;
        "rux-icon-keyboard-arrow-left": HTMLRuxIconKeyboardArrowLeftElement;
        "rux-icon-keyboard-arrow-right": HTMLRuxIconKeyboardArrowRightElement;
        "rux-icon-keyboard-arrow-up": HTMLRuxIconKeyboardArrowUpElement;
        "rux-icon-keyboard-backspace": HTMLRuxIconKeyboardBackspaceElement;
        "rux-icon-keyboard-capslock": HTMLRuxIconKeyboardCapslockElement;
        "rux-icon-keyboard-hide": HTMLRuxIconKeyboardHideElement;
        "rux-icon-keyboard-return": HTMLRuxIconKeyboardReturnElement;
        "rux-icon-keyboard-tab": HTMLRuxIconKeyboardTabElement;
        "rux-icon-keyboard-voice": HTMLRuxIconKeyboardVoiceElement;
        "rux-icon-kitchen": HTMLRuxIconKitchenElement;
        "rux-icon-label": HTMLRuxIconLabelElement;
        "rux-icon-label-important": HTMLRuxIconLabelImportantElement;
        "rux-icon-label-off": HTMLRuxIconLabelOffElement;
        "rux-icon-landscape": HTMLRuxIconLandscapeElement;
        "rux-icon-language": HTMLRuxIconLanguageElement;
        "rux-icon-laptop": HTMLRuxIconLaptopElement;
        "rux-icon-laptop-chromebook": HTMLRuxIconLaptopChromebookElement;
        "rux-icon-laptop-mac": HTMLRuxIconLaptopMacElement;
        "rux-icon-laptop-windows": HTMLRuxIconLaptopWindowsElement;
        "rux-icon-last-page": HTMLRuxIconLastPageElement;
        "rux-icon-launch": HTMLRuxIconLaunchElement;
        "rux-icon-layers": HTMLRuxIconLayersElement;
        "rux-icon-layers-clear": HTMLRuxIconLayersClearElement;
        "rux-icon-leak-add": HTMLRuxIconLeakAddElement;
        "rux-icon-leak-remove": HTMLRuxIconLeakRemoveElement;
        "rux-icon-lens": HTMLRuxIconLensElement;
        "rux-icon-library-add": HTMLRuxIconLibraryAddElement;
        "rux-icon-library-books": HTMLRuxIconLibraryBooksElement;
        "rux-icon-library-music": HTMLRuxIconLibraryMusicElement;
        "rux-icon-line-style": HTMLRuxIconLineStyleElement;
        "rux-icon-line-weight": HTMLRuxIconLineWeightElement;
        "rux-icon-linear-scale": HTMLRuxIconLinearScaleElement;
        "rux-icon-link": HTMLRuxIconLinkElement;
        "rux-icon-link-off": HTMLRuxIconLinkOffElement;
        "rux-icon-linked-camera": HTMLRuxIconLinkedCameraElement;
        "rux-icon-list": HTMLRuxIconListElement;
        "rux-icon-list-alt": HTMLRuxIconListAltElement;
        "rux-icon-live-help": HTMLRuxIconLiveHelpElement;
        "rux-icon-live-tv": HTMLRuxIconLiveTvElement;
        "rux-icon-local-activity": HTMLRuxIconLocalActivityElement;
        "rux-icon-local-airport": HTMLRuxIconLocalAirportElement;
        "rux-icon-local-atm": HTMLRuxIconLocalAtmElement;
        "rux-icon-local-bar": HTMLRuxIconLocalBarElement;
        "rux-icon-local-cafe": HTMLRuxIconLocalCafeElement;
        "rux-icon-local-car-wash": HTMLRuxIconLocalCarWashElement;
        "rux-icon-local-convenience-store": HTMLRuxIconLocalConvenienceStoreElement;
        "rux-icon-local-dining": HTMLRuxIconLocalDiningElement;
        "rux-icon-local-drink": HTMLRuxIconLocalDrinkElement;
        "rux-icon-local-gas-station": HTMLRuxIconLocalGasStationElement;
        "rux-icon-local-grocery-store": HTMLRuxIconLocalGroceryStoreElement;
        "rux-icon-local-hospital": HTMLRuxIconLocalHospitalElement;
        "rux-icon-local-hotel": HTMLRuxIconLocalHotelElement;
        "rux-icon-local-laundry-service": HTMLRuxIconLocalLaundryServiceElement;
        "rux-icon-local-library": HTMLRuxIconLocalLibraryElement;
        "rux-icon-local-mall": HTMLRuxIconLocalMallElement;
        "rux-icon-local-movies": HTMLRuxIconLocalMoviesElement;
        "rux-icon-local-offer": HTMLRuxIconLocalOfferElement;
        "rux-icon-local-parking": HTMLRuxIconLocalParkingElement;
        "rux-icon-local-pharmacy": HTMLRuxIconLocalPharmacyElement;
        "rux-icon-local-phone": HTMLRuxIconLocalPhoneElement;
        "rux-icon-local-play": HTMLRuxIconLocalPlayElement;
        "rux-icon-local-post-office": HTMLRuxIconLocalPostOfficeElement;
        "rux-icon-local-printshop": HTMLRuxIconLocalPrintshopElement;
        "rux-icon-local-see": HTMLRuxIconLocalSeeElement;
        "rux-icon-local-shipping": HTMLRuxIconLocalShippingElement;
        "rux-icon-local-taxi": HTMLRuxIconLocalTaxiElement;
        "rux-icon-location-city": HTMLRuxIconLocationCityElement;
        "rux-icon-location-disabled": HTMLRuxIconLocationDisabledElement;
        "rux-icon-location-off": HTMLRuxIconLocationOffElement;
        "rux-icon-location-on": HTMLRuxIconLocationOnElement;
        "rux-icon-location-searching": HTMLRuxIconLocationSearchingElement;
        "rux-icon-lock": HTMLRuxIconLockElement;
        "rux-icon-lock-open": HTMLRuxIconLockOpenElement;
        "rux-icon-looks": HTMLRuxIconLooksElement;
        "rux-icon-looks-1": HTMLRuxIconLooks1Element;
        "rux-icon-looks-2": HTMLRuxIconLooks2Element;
        "rux-icon-looks-3": HTMLRuxIconLooks3Element;
        "rux-icon-looks-4": HTMLRuxIconLooks4Element;
        "rux-icon-looks-5": HTMLRuxIconLooks5Element;
        "rux-icon-looks-6": HTMLRuxIconLooks6Element;
        "rux-icon-loop": HTMLRuxIconLoopElement;
        "rux-icon-loupe": HTMLRuxIconLoupeElement;
        "rux-icon-low-priority": HTMLRuxIconLowPriorityElement;
        "rux-icon-loyalty": HTMLRuxIconLoyaltyElement;
        "rux-icon-mail": HTMLRuxIconMailElement;
        "rux-icon-mail-outline": HTMLRuxIconMailOutlineElement;
        "rux-icon-map": HTMLRuxIconMapElement;
        "rux-icon-markunread": HTMLRuxIconMarkunreadElement;
        "rux-icon-markunread-mailbox": HTMLRuxIconMarkunreadMailboxElement;
        "rux-icon-maximize": HTMLRuxIconMaximizeElement;
        "rux-icon-meeting-room": HTMLRuxIconMeetingRoomElement;
        "rux-icon-memory": HTMLRuxIconMemoryElement;
        "rux-icon-menu": HTMLRuxIconMenuElement;
        "rux-icon-merge-type": HTMLRuxIconMergeTypeElement;
        "rux-icon-message": HTMLRuxIconMessageElement;
        "rux-icon-mic": HTMLRuxIconMicElement;
        "rux-icon-mic-none": HTMLRuxIconMicNoneElement;
        "rux-icon-mic-off": HTMLRuxIconMicOffElement;
        "rux-icon-minimize": HTMLRuxIconMinimizeElement;
        "rux-icon-missed-video-call": HTMLRuxIconMissedVideoCallElement;
        "rux-icon-mission": HTMLRuxIconMissionElement;
        "rux-icon-mms": HTMLRuxIconMmsElement;
        "rux-icon-mobile-friendly": HTMLRuxIconMobileFriendlyElement;
        "rux-icon-mobile-off": HTMLRuxIconMobileOffElement;
        "rux-icon-mobile-screen-share": HTMLRuxIconMobileScreenShareElement;
        "rux-icon-mode-comment": HTMLRuxIconModeCommentElement;
        "rux-icon-monetization-on": HTMLRuxIconMonetizationOnElement;
        "rux-icon-money": HTMLRuxIconMoneyElement;
        "rux-icon-money-off": HTMLRuxIconMoneyOffElement;
        "rux-icon-monochrome-photos": HTMLRuxIconMonochromePhotosElement;
        "rux-icon-mood": HTMLRuxIconMoodElement;
        "rux-icon-mood-bad": HTMLRuxIconMoodBadElement;
        "rux-icon-more": HTMLRuxIconMoreElement;
        "rux-icon-more-horiz": HTMLRuxIconMoreHorizElement;
        "rux-icon-more-vert": HTMLRuxIconMoreVertElement;
        "rux-icon-motorcycle": HTMLRuxIconMotorcycleElement;
        "rux-icon-mouse": HTMLRuxIconMouseElement;
        "rux-icon-move-to-inbox": HTMLRuxIconMoveToInboxElement;
        "rux-icon-movie": HTMLRuxIconMovieElement;
        "rux-icon-movie-creation": HTMLRuxIconMovieCreationElement;
        "rux-icon-movie-filter": HTMLRuxIconMovieFilterElement;
        "rux-icon-multiline-chart": HTMLRuxIconMultilineChartElement;
        "rux-icon-music-note": HTMLRuxIconMusicNoteElement;
        "rux-icon-music-off": HTMLRuxIconMusicOffElement;
        "rux-icon-music-video": HTMLRuxIconMusicVideoElement;
        "rux-icon-my-location": HTMLRuxIconMyLocationElement;
        "rux-icon-nature": HTMLRuxIconNatureElement;
        "rux-icon-nature-people": HTMLRuxIconNaturePeopleElement;
        "rux-icon-navigate-before": HTMLRuxIconNavigateBeforeElement;
        "rux-icon-navigate-next": HTMLRuxIconNavigateNextElement;
        "rux-icon-navigation": HTMLRuxIconNavigationElement;
        "rux-icon-near-me": HTMLRuxIconNearMeElement;
        "rux-icon-netcom": HTMLRuxIconNetcomElement;
        "rux-icon-network-cell": HTMLRuxIconNetworkCellElement;
        "rux-icon-network-check": HTMLRuxIconNetworkCheckElement;
        "rux-icon-network-locked": HTMLRuxIconNetworkLockedElement;
        "rux-icon-network-wifi": HTMLRuxIconNetworkWifiElement;
        "rux-icon-new-releases": HTMLRuxIconNewReleasesElement;
        "rux-icon-next-week": HTMLRuxIconNextWeekElement;
        "rux-icon-nfc": HTMLRuxIconNfcElement;
        "rux-icon-no-encryption": HTMLRuxIconNoEncryptionElement;
        "rux-icon-no-meeting-room": HTMLRuxIconNoMeetingRoomElement;
        "rux-icon-no-sim": HTMLRuxIconNoSimElement;
        "rux-icon-not-interested": HTMLRuxIconNotInterestedElement;
        "rux-icon-not-listed-location": HTMLRuxIconNotListedLocationElement;
        "rux-icon-note": HTMLRuxIconNoteElement;
        "rux-icon-note-add": HTMLRuxIconNoteAddElement;
        "rux-icon-notes": HTMLRuxIconNotesElement;
        "rux-icon-notification-important": HTMLRuxIconNotificationImportantElement;
        "rux-icon-notifications": HTMLRuxIconNotificationsElement;
        "rux-icon-notifications-active": HTMLRuxIconNotificationsActiveElement;
        "rux-icon-notifications-none": HTMLRuxIconNotificationsNoneElement;
        "rux-icon-notifications-off": HTMLRuxIconNotificationsOffElement;
        "rux-icon-notifications-paused": HTMLRuxIconNotificationsPausedElement;
        "rux-icon-offline-bolt": HTMLRuxIconOfflineBoltElement;
        "rux-icon-offline-pin": HTMLRuxIconOfflinePinElement;
        "rux-icon-ondemand-video": HTMLRuxIconOndemandVideoElement;
        "rux-icon-opacity": HTMLRuxIconOpacityElement;
        "rux-icon-open-in-browser": HTMLRuxIconOpenInBrowserElement;
        "rux-icon-open-in-new": HTMLRuxIconOpenInNewElement;
        "rux-icon-open-with": HTMLRuxIconOpenWithElement;
        "rux-icon-outlined-flag": HTMLRuxIconOutlinedFlagElement;
        "rux-icon-pages": HTMLRuxIconPagesElement;
        "rux-icon-pageview": HTMLRuxIconPageviewElement;
        "rux-icon-palette": HTMLRuxIconPaletteElement;
        "rux-icon-pan-tool": HTMLRuxIconPanToolElement;
        "rux-icon-panorama": HTMLRuxIconPanoramaElement;
        "rux-icon-panorama-fish-eye": HTMLRuxIconPanoramaFishEyeElement;
        "rux-icon-panorama-horizontal": HTMLRuxIconPanoramaHorizontalElement;
        "rux-icon-panorama-vertical": HTMLRuxIconPanoramaVerticalElement;
        "rux-icon-panorama-wide-angle": HTMLRuxIconPanoramaWideAngleElement;
        "rux-icon-party-mode": HTMLRuxIconPartyModeElement;
        "rux-icon-pause": HTMLRuxIconPauseElement;
        "rux-icon-pause-circle-filled": HTMLRuxIconPauseCircleFilledElement;
        "rux-icon-pause-circle-outline": HTMLRuxIconPauseCircleOutlineElement;
        "rux-icon-pause-presentation": HTMLRuxIconPausePresentationElement;
        "rux-icon-payload": HTMLRuxIconPayloadElement;
        "rux-icon-payment": HTMLRuxIconPaymentElement;
        "rux-icon-people-outline": HTMLRuxIconPeopleOutlineElement;
        "rux-icon-perm-camera-mic": HTMLRuxIconPermCameraMicElement;
        "rux-icon-perm-contact-calendar": HTMLRuxIconPermContactCalendarElement;
        "rux-icon-perm-data-setting": HTMLRuxIconPermDataSettingElement;
        "rux-icon-perm-device-information": HTMLRuxIconPermDeviceInformationElement;
        "rux-icon-perm-identity": HTMLRuxIconPermIdentityElement;
        "rux-icon-perm-media": HTMLRuxIconPermMediaElement;
        "rux-icon-perm-phone-msg": HTMLRuxIconPermPhoneMsgElement;
        "rux-icon-perm-scan-wifi": HTMLRuxIconPermScanWifiElement;
        "rux-icon-person": HTMLRuxIconPersonElement;
        "rux-icon-person-add": HTMLRuxIconPersonAddElement;
        "rux-icon-person-add-disabled": HTMLRuxIconPersonAddDisabledElement;
        "rux-icon-person-outline": HTMLRuxIconPersonOutlineElement;
        "rux-icon-person-pin": HTMLRuxIconPersonPinElement;
        "rux-icon-person-pin-circle": HTMLRuxIconPersonPinCircleElement;
        "rux-icon-personal-video": HTMLRuxIconPersonalVideoElement;
        "rux-icon-pets": HTMLRuxIconPetsElement;
        "rux-icon-phone": HTMLRuxIconPhoneElement;
        "rux-icon-phone-android": HTMLRuxIconPhoneAndroidElement;
        "rux-icon-phone-bluetooth-speaker": HTMLRuxIconPhoneBluetoothSpeakerElement;
        "rux-icon-phone-callback": HTMLRuxIconPhoneCallbackElement;
        "rux-icon-phone-forwarded": HTMLRuxIconPhoneForwardedElement;
        "rux-icon-phone-in-talk": HTMLRuxIconPhoneInTalkElement;
        "rux-icon-phone-iphone": HTMLRuxIconPhoneIphoneElement;
        "rux-icon-phone-locked": HTMLRuxIconPhoneLockedElement;
        "rux-icon-phone-missed": HTMLRuxIconPhoneMissedElement;
        "rux-icon-phone-paused": HTMLRuxIconPhonePausedElement;
        "rux-icon-phonelink": HTMLRuxIconPhonelinkElement;
        "rux-icon-phonelink-erase": HTMLRuxIconPhonelinkEraseElement;
        "rux-icon-phonelink-lock": HTMLRuxIconPhonelinkLockElement;
        "rux-icon-phonelink-off": HTMLRuxIconPhonelinkOffElement;
        "rux-icon-phonelink-ring": HTMLRuxIconPhonelinkRingElement;
        "rux-icon-phonelink-setup": HTMLRuxIconPhonelinkSetupElement;
        "rux-icon-photo": HTMLRuxIconPhotoElement;
        "rux-icon-photo-album": HTMLRuxIconPhotoAlbumElement;
        "rux-icon-photo-camera": HTMLRuxIconPhotoCameraElement;
        "rux-icon-photo-filter": HTMLRuxIconPhotoFilterElement;
        "rux-icon-photo-library": HTMLRuxIconPhotoLibraryElement;
        "rux-icon-photo-size-select-actual": HTMLRuxIconPhotoSizeSelectActualElement;
        "rux-icon-photo-size-select-large": HTMLRuxIconPhotoSizeSelectLargeElement;
        "rux-icon-photo-size-select-small": HTMLRuxIconPhotoSizeSelectSmallElement;
        "rux-icon-picture-as-pdf": HTMLRuxIconPictureAsPdfElement;
        "rux-icon-picture-in-picture": HTMLRuxIconPictureInPictureElement;
        "rux-icon-picture-in-picture-alt": HTMLRuxIconPictureInPictureAltElement;
        "rux-icon-pie-chart": HTMLRuxIconPieChartElement;
        "rux-icon-pin-drop": HTMLRuxIconPinDropElement;
        "rux-icon-place": HTMLRuxIconPlaceElement;
        "rux-icon-play-arrow": HTMLRuxIconPlayArrowElement;
        "rux-icon-play-circle-filled": HTMLRuxIconPlayCircleFilledElement;
        "rux-icon-play-circle-filled-white": HTMLRuxIconPlayCircleFilledWhiteElement;
        "rux-icon-play-circle-outline": HTMLRuxIconPlayCircleOutlineElement;
        "rux-icon-play-for-work": HTMLRuxIconPlayForWorkElement;
        "rux-icon-playlist-add": HTMLRuxIconPlaylistAddElement;
        "rux-icon-playlist-add-check": HTMLRuxIconPlaylistAddCheckElement;
        "rux-icon-playlist-play": HTMLRuxIconPlaylistPlayElement;
        "rux-icon-plus-one": HTMLRuxIconPlusOneElement;
        "rux-icon-poll": HTMLRuxIconPollElement;
        "rux-icon-pool": HTMLRuxIconPoolElement;
        "rux-icon-portable-wifi-off": HTMLRuxIconPortableWifiOffElement;
        "rux-icon-portrait": HTMLRuxIconPortraitElement;
        "rux-icon-power": HTMLRuxIconPowerElement;
        "rux-icon-power-input": HTMLRuxIconPowerInputElement;
        "rux-icon-power-off": HTMLRuxIconPowerOffElement;
        "rux-icon-power-settings-new": HTMLRuxIconPowerSettingsNewElement;
        "rux-icon-pregnant-woman": HTMLRuxIconPregnantWomanElement;
        "rux-icon-present-to-all": HTMLRuxIconPresentToAllElement;
        "rux-icon-print": HTMLRuxIconPrintElement;
        "rux-icon-print-disabled": HTMLRuxIconPrintDisabledElement;
        "rux-icon-priority-high": HTMLRuxIconPriorityHighElement;
        "rux-icon-processor": HTMLRuxIconProcessorElement;
        "rux-icon-processor-alt": HTMLRuxIconProcessorAltElement;
        "rux-icon-propulsion-power": HTMLRuxIconPropulsionPowerElement;
        "rux-icon-public": HTMLRuxIconPublicElement;
        "rux-icon-publish": HTMLRuxIconPublishElement;
        "rux-icon-query-builder": HTMLRuxIconQueryBuilderElement;
        "rux-icon-question-answer": HTMLRuxIconQuestionAnswerElement;
        "rux-icon-queue": HTMLRuxIconQueueElement;
        "rux-icon-queue-music": HTMLRuxIconQueueMusicElement;
        "rux-icon-queue-play-next": HTMLRuxIconQueuePlayNextElement;
        "rux-icon-radio": HTMLRuxIconRadioElement;
        "rux-icon-radio-button-checked": HTMLRuxIconRadioButtonCheckedElement;
        "rux-icon-radio-button-unchecked": HTMLRuxIconRadioButtonUncheckedElement;
        "rux-icon-rate-review": HTMLRuxIconRateReviewElement;
        "rux-icon-receipt": HTMLRuxIconReceiptElement;
        "rux-icon-recent-actors": HTMLRuxIconRecentActorsElement;
        "rux-icon-record-voice-over": HTMLRuxIconRecordVoiceOverElement;
        "rux-icon-redeem": HTMLRuxIconRedeemElement;
        "rux-icon-redo": HTMLRuxIconRedoElement;
        "rux-icon-refresh": HTMLRuxIconRefreshElement;
        "rux-icon-release": HTMLRuxIconReleaseElement;
        "rux-icon-remove": HTMLRuxIconRemoveElement;
        "rux-icon-remove-circle": HTMLRuxIconRemoveCircleElement;
        "rux-icon-remove-circle-outline": HTMLRuxIconRemoveCircleOutlineElement;
        "rux-icon-remove-from-queue": HTMLRuxIconRemoveFromQueueElement;
        "rux-icon-remove-red-eye": HTMLRuxIconRemoveRedEyeElement;
        "rux-icon-remove-shopping-cart": HTMLRuxIconRemoveShoppingCartElement;
        "rux-icon-reorder": HTMLRuxIconReorderElement;
        "rux-icon-repeat": HTMLRuxIconRepeatElement;
        "rux-icon-repeat-one": HTMLRuxIconRepeatOneElement;
        "rux-icon-replay": HTMLRuxIconReplayElement;
        "rux-icon-replay-10": HTMLRuxIconReplay10Element;
        "rux-icon-replay-30": HTMLRuxIconReplay30Element;
        "rux-icon-replay-5": HTMLRuxIconReplay5Element;
        "rux-icon-reply": HTMLRuxIconReplyElement;
        "rux-icon-reply-all": HTMLRuxIconReplyAllElement;
        "rux-icon-report": HTMLRuxIconReportElement;
        "rux-icon-report-off": HTMLRuxIconReportOffElement;
        "rux-icon-report-problem": HTMLRuxIconReportProblemElement;
        "rux-icon-restaurant": HTMLRuxIconRestaurantElement;
        "rux-icon-restaurant-menu": HTMLRuxIconRestaurantMenuElement;
        "rux-icon-restore": HTMLRuxIconRestoreElement;
        "rux-icon-restore-from-trash": HTMLRuxIconRestoreFromTrashElement;
        "rux-icon-restore-page": HTMLRuxIconRestorePageElement;
        "rux-icon-ring-volume": HTMLRuxIconRingVolumeElement;
        "rux-icon-room": HTMLRuxIconRoomElement;
        "rux-icon-room-service": HTMLRuxIconRoomServiceElement;
        "rux-icon-rotate-90-degrees-cc": HTMLRuxIconRotate90DegreesCcElement;
        "rux-icon-rotate-left": HTMLRuxIconRotateLeftElement;
        "rux-icon-rotate-right": HTMLRuxIconRotateRightElement;
        "rux-icon-rounded-corner": HTMLRuxIconRoundedCornerElement;
        "rux-icon-router": HTMLRuxIconRouterElement;
        "rux-icon-rowing": HTMLRuxIconRowingElement;
        "rux-icon-rss-feed": HTMLRuxIconRssFeedElement;
        "rux-icon-rv-hookup": HTMLRuxIconRvHookupElement;
        "rux-icon-satellite": HTMLRuxIconSatelliteElement;
        "rux-icon-satellite-off": HTMLRuxIconSatelliteOffElement;
        "rux-icon-satellite-receive": HTMLRuxIconSatelliteReceiveElement;
        "rux-icon-satellite-transmit": HTMLRuxIconSatelliteTransmitElement;
        "rux-icon-save": HTMLRuxIconSaveElement;
        "rux-icon-save-alt": HTMLRuxIconSaveAltElement;
        "rux-icon-scanner": HTMLRuxIconScannerElement;
        "rux-icon-scatter-plot": HTMLRuxIconScatterPlotElement;
        "rux-icon-schedule": HTMLRuxIconScheduleElement;
        "rux-icon-school": HTMLRuxIconSchoolElement;
        "rux-icon-score": HTMLRuxIconScoreElement;
        "rux-icon-screen-lock-landscape": HTMLRuxIconScreenLockLandscapeElement;
        "rux-icon-screen-lock-portrait": HTMLRuxIconScreenLockPortraitElement;
        "rux-icon-screen-lock-rotation": HTMLRuxIconScreenLockRotationElement;
        "rux-icon-screen-rotation": HTMLRuxIconScreenRotationElement;
        "rux-icon-screen-share": HTMLRuxIconScreenShareElement;
        "rux-icon-sd-card": HTMLRuxIconSdCardElement;
        "rux-icon-sd-storage": HTMLRuxIconSdStorageElement;
        "rux-icon-search": HTMLRuxIconSearchElement;
        "rux-icon-seat": HTMLRuxIconSeatElement;
        "rux-icon-security": HTMLRuxIconSecurityElement;
        "rux-icon-select-all": HTMLRuxIconSelectAllElement;
        "rux-icon-send": HTMLRuxIconSendElement;
        "rux-icon-sentiment-dissatisfied": HTMLRuxIconSentimentDissatisfiedElement;
        "rux-icon-sentiment-satisfied": HTMLRuxIconSentimentSatisfiedElement;
        "rux-icon-sentiment-satisfied-alt": HTMLRuxIconSentimentSatisfiedAltElement;
        "rux-icon-sentiment-very-dissatisfied": HTMLRuxIconSentimentVeryDissatisfiedElement;
        "rux-icon-sentiment-very-satisfied": HTMLRuxIconSentimentVerySatisfiedElement;
        "rux-icon-set-power": HTMLRuxIconSetPowerElement;
        "rux-icon-settings": HTMLRuxIconSettingsElement;
        "rux-icon-settings-applications": HTMLRuxIconSettingsApplicationsElement;
        "rux-icon-settings-backup-restore": HTMLRuxIconSettingsBackupRestoreElement;
        "rux-icon-settings-bluetooth": HTMLRuxIconSettingsBluetoothElement;
        "rux-icon-settings-brightness": HTMLRuxIconSettingsBrightnessElement;
        "rux-icon-settings-cell": HTMLRuxIconSettingsCellElement;
        "rux-icon-settings-ethernet": HTMLRuxIconSettingsEthernetElement;
        "rux-icon-settings-input-antenna": HTMLRuxIconSettingsInputAntennaElement;
        "rux-icon-settings-input-component": HTMLRuxIconSettingsInputComponentElement;
        "rux-icon-settings-input-composite": HTMLRuxIconSettingsInputCompositeElement;
        "rux-icon-settings-input-hdmi": HTMLRuxIconSettingsInputHdmiElement;
        "rux-icon-settings-input-svideo": HTMLRuxIconSettingsInputSvideoElement;
        "rux-icon-settings-overscan": HTMLRuxIconSettingsOverscanElement;
        "rux-icon-settings-phone": HTMLRuxIconSettingsPhoneElement;
        "rux-icon-settings-power": HTMLRuxIconSettingsPowerElement;
        "rux-icon-settings-remote": HTMLRuxIconSettingsRemoteElement;
        "rux-icon-settings-system-daydream": HTMLRuxIconSettingsSystemDaydreamElement;
        "rux-icon-settings-voice": HTMLRuxIconSettingsVoiceElement;
        "rux-icon-share": HTMLRuxIconShareElement;
        "rux-icon-shop": HTMLRuxIconShopElement;
        "rux-icon-shop-two": HTMLRuxIconShopTwoElement;
        "rux-icon-shopping-basket": HTMLRuxIconShoppingBasketElement;
        "rux-icon-shopping-cart": HTMLRuxIconShoppingCartElement;
        "rux-icon-short-text": HTMLRuxIconShortTextElement;
        "rux-icon-show-chart": HTMLRuxIconShowChartElement;
        "rux-icon-shuffle": HTMLRuxIconShuffleElement;
        "rux-icon-shutter-speed": HTMLRuxIconShutterSpeedElement;
        "rux-icon-signal-cellular-0-bar": HTMLRuxIconSignalCellular0BarElement;
        "rux-icon-signal-cellular-1-bar": HTMLRuxIconSignalCellular1BarElement;
        "rux-icon-signal-cellular-2-bar": HTMLRuxIconSignalCellular2BarElement;
        "rux-icon-signal-cellular-3-bar": HTMLRuxIconSignalCellular3BarElement;
        "rux-icon-signal-cellular-4-bar": HTMLRuxIconSignalCellular4BarElement;
        "rux-icon-signal-cellular-alt": HTMLRuxIconSignalCellularAltElement;
        "rux-icon-signal-cellular-connected-no-internet-0-bar": HTMLRuxIconSignalCellularConnectedNoInternet0BarElement;
        "rux-icon-signal-cellular-connected-no-internet-1-bar": HTMLRuxIconSignalCellularConnectedNoInternet1BarElement;
        "rux-icon-signal-cellular-connected-no-internet-2-bar": HTMLRuxIconSignalCellularConnectedNoInternet2BarElement;
        "rux-icon-signal-cellular-connected-no-internet-3-bar": HTMLRuxIconSignalCellularConnectedNoInternet3BarElement;
        "rux-icon-signal-cellular-connected-no-internet-4-bar": HTMLRuxIconSignalCellularConnectedNoInternet4BarElement;
        "rux-icon-signal-cellular-no-sim": HTMLRuxIconSignalCellularNoSimElement;
        "rux-icon-signal-cellular-null": HTMLRuxIconSignalCellularNullElement;
        "rux-icon-signal-cellular-off": HTMLRuxIconSignalCellularOffElement;
        "rux-icon-signal-wifi-0-bar": HTMLRuxIconSignalWifi0BarElement;
        "rux-icon-signal-wifi-1-bar": HTMLRuxIconSignalWifi1BarElement;
        "rux-icon-signal-wifi-1-bar-lock": HTMLRuxIconSignalWifi1BarLockElement;
        "rux-icon-signal-wifi-2-bar": HTMLRuxIconSignalWifi2BarElement;
        "rux-icon-signal-wifi-2-bar-lock": HTMLRuxIconSignalWifi2BarLockElement;
        "rux-icon-signal-wifi-3-bar": HTMLRuxIconSignalWifi3BarElement;
        "rux-icon-signal-wifi-3-bar-lock": HTMLRuxIconSignalWifi3BarLockElement;
        "rux-icon-signal-wifi-4-bar": HTMLRuxIconSignalWifi4BarElement;
        "rux-icon-signal-wifi-4-bar-lock": HTMLRuxIconSignalWifi4BarLockElement;
        "rux-icon-signal-wifi-off": HTMLRuxIconSignalWifiOffElement;
        "rux-icon-sim-card": HTMLRuxIconSimCardElement;
        "rux-icon-skip-next": HTMLRuxIconSkipNextElement;
        "rux-icon-skip-previous": HTMLRuxIconSkipPreviousElement;
        "rux-icon-slideshow": HTMLRuxIconSlideshowElement;
        "rux-icon-slow-motion-video": HTMLRuxIconSlowMotionVideoElement;
        "rux-icon-smartphone": HTMLRuxIconSmartphoneElement;
        "rux-icon-smoke-free": HTMLRuxIconSmokeFreeElement;
        "rux-icon-smoking-rooms": HTMLRuxIconSmokingRoomsElement;
        "rux-icon-sms": HTMLRuxIconSmsElement;
        "rux-icon-sms-failed": HTMLRuxIconSmsFailedElement;
        "rux-icon-snooze": HTMLRuxIconSnoozeElement;
        "rux-icon-solar": HTMLRuxIconSolarElement;
        "rux-icon-sort": HTMLRuxIconSortElement;
        "rux-icon-sort-by-alpha": HTMLRuxIconSortByAlphaElement;
        "rux-icon-spa": HTMLRuxIconSpaElement;
        "rux-icon-space-bar": HTMLRuxIconSpaceBarElement;
        "rux-icon-speaker": HTMLRuxIconSpeakerElement;
        "rux-icon-speaker-group": HTMLRuxIconSpeakerGroupElement;
        "rux-icon-speaker-notes": HTMLRuxIconSpeakerNotesElement;
        "rux-icon-speaker-notes-off": HTMLRuxIconSpeakerNotesOffElement;
        "rux-icon-speaker-phone": HTMLRuxIconSpeakerPhoneElement;
        "rux-icon-spellcheck": HTMLRuxIconSpellcheckElement;
        "rux-icon-star": HTMLRuxIconStarElement;
        "rux-icon-star-border": HTMLRuxIconStarBorderElement;
        "rux-icon-star-half": HTMLRuxIconStarHalfElement;
        "rux-icon-star-rate": HTMLRuxIconStarRateElement;
        "rux-icon-stars": HTMLRuxIconStarsElement;
        "rux-icon-stay-current-landscape": HTMLRuxIconStayCurrentLandscapeElement;
        "rux-icon-stay-current-portrait": HTMLRuxIconStayCurrentPortraitElement;
        "rux-icon-stay-primary-landscape": HTMLRuxIconStayPrimaryLandscapeElement;
        "rux-icon-stay-primary-portrait": HTMLRuxIconStayPrimaryPortraitElement;
        "rux-icon-stop": HTMLRuxIconStopElement;
        "rux-icon-stop-screen-share": HTMLRuxIconStopScreenShareElement;
        "rux-icon-storage": HTMLRuxIconStorageElement;
        "rux-icon-store": HTMLRuxIconStoreElement;
        "rux-icon-store-mall-directory": HTMLRuxIconStoreMallDirectoryElement;
        "rux-icon-straighten": HTMLRuxIconStraightenElement;
        "rux-icon-streetview": HTMLRuxIconStreetviewElement;
        "rux-icon-strikethrough-s": HTMLRuxIconStrikethroughSElement;
        "rux-icon-style": HTMLRuxIconStyleElement;
        "rux-icon-subdirectory-arrow-left": HTMLRuxIconSubdirectoryArrowLeftElement;
        "rux-icon-subdirectory-arrow-right": HTMLRuxIconSubdirectoryArrowRightElement;
        "rux-icon-subject": HTMLRuxIconSubjectElement;
        "rux-icon-subscriptions": HTMLRuxIconSubscriptionsElement;
        "rux-icon-subtitles": HTMLRuxIconSubtitlesElement;
        "rux-icon-subway": HTMLRuxIconSubwayElement;
        "rux-icon-supervised-user-circle": HTMLRuxIconSupervisedUserCircleElement;
        "rux-icon-supervisor-account": HTMLRuxIconSupervisorAccountElement;
        "rux-icon-surround-sound": HTMLRuxIconSurroundSoundElement;
        "rux-icon-swap-calls": HTMLRuxIconSwapCallsElement;
        "rux-icon-swap-horiz": HTMLRuxIconSwapHorizElement;
        "rux-icon-swap-horizontal-circle": HTMLRuxIconSwapHorizontalCircleElement;
        "rux-icon-swap-vert": HTMLRuxIconSwapVertElement;
        "rux-icon-swap-vertical-circle": HTMLRuxIconSwapVerticalCircleElement;
        "rux-icon-switch-camera": HTMLRuxIconSwitchCameraElement;
        "rux-icon-switch-video": HTMLRuxIconSwitchVideoElement;
        "rux-icon-sync": HTMLRuxIconSyncElement;
        "rux-icon-sync-disabled": HTMLRuxIconSyncDisabledElement;
        "rux-icon-sync-problem": HTMLRuxIconSyncProblemElement;
        "rux-icon-system-update": HTMLRuxIconSystemUpdateElement;
        "rux-icon-tab": HTMLRuxIconTabElement;
        "rux-icon-tab-unselected": HTMLRuxIconTabUnselectedElement;
        "rux-icon-table-chart": HTMLRuxIconTableChartElement;
        "rux-icon-tablet": HTMLRuxIconTabletElement;
        "rux-icon-tablet-android": HTMLRuxIconTabletAndroidElement;
        "rux-icon-tablet-mac": HTMLRuxIconTabletMacElement;
        "rux-icon-tag-faces": HTMLRuxIconTagFacesElement;
        "rux-icon-tap-and-play": HTMLRuxIconTapAndPlayElement;
        "rux-icon-terrain": HTMLRuxIconTerrainElement;
        "rux-icon-text-fields": HTMLRuxIconTextFieldsElement;
        "rux-icon-text-format": HTMLRuxIconTextFormatElement;
        "rux-icon-text-rotate-up": HTMLRuxIconTextRotateUpElement;
        "rux-icon-text-rotate-vertical": HTMLRuxIconTextRotateVerticalElement;
        "rux-icon-text-rotation-none": HTMLRuxIconTextRotationNoneElement;
        "rux-icon-textsms": HTMLRuxIconTextsmsElement;
        "rux-icon-texture": HTMLRuxIconTextureElement;
        "rux-icon-theaters": HTMLRuxIconTheatersElement;
        "rux-icon-thermal": HTMLRuxIconThermalElement;
        "rux-icon-thumb-down": HTMLRuxIconThumbDownElement;
        "rux-icon-thumb-down-alt": HTMLRuxIconThumbDownAltElement;
        "rux-icon-thumb-up": HTMLRuxIconThumbUpElement;
        "rux-icon-thumb-up-alt": HTMLRuxIconThumbUpAltElement;
        "rux-icon-thumbs-up-down": HTMLRuxIconThumbsUpDownElement;
        "rux-icon-time-to-leave": HTMLRuxIconTimeToLeaveElement;
        "rux-icon-timelapse": HTMLRuxIconTimelapseElement;
        "rux-icon-timeline": HTMLRuxIconTimelineElement;
        "rux-icon-timer": HTMLRuxIconTimerElement;
        "rux-icon-timer-10": HTMLRuxIconTimer10Element;
        "rux-icon-timer-3": HTMLRuxIconTimer3Element;
        "rux-icon-timer-off": HTMLRuxIconTimerOffElement;
        "rux-icon-title": HTMLRuxIconTitleElement;
        "rux-icon-toc": HTMLRuxIconTocElement;
        "rux-icon-today": HTMLRuxIconTodayElement;
        "rux-icon-toggle-off": HTMLRuxIconToggleOffElement;
        "rux-icon-toggle-on": HTMLRuxIconToggleOnElement;
        "rux-icon-toll": HTMLRuxIconTollElement;
        "rux-icon-tonality": HTMLRuxIconTonalityElement;
        "rux-icon-touch-app": HTMLRuxIconTouchAppElement;
        "rux-icon-toys": HTMLRuxIconToysElement;
        "rux-icon-track-changes": HTMLRuxIconTrackChangesElement;
        "rux-icon-traffic": HTMLRuxIconTrafficElement;
        "rux-icon-train": HTMLRuxIconTrainElement;
        "rux-icon-tram": HTMLRuxIconTramElement;
        "rux-icon-transfer-within-a-station": HTMLRuxIconTransferWithinAStationElement;
        "rux-icon-transform": HTMLRuxIconTransformElement;
        "rux-icon-transit-enterexit": HTMLRuxIconTransitEnterexitElement;
        "rux-icon-translate": HTMLRuxIconTranslateElement;
        "rux-icon-trending-down": HTMLRuxIconTrendingDownElement;
        "rux-icon-trending-flat": HTMLRuxIconTrendingFlatElement;
        "rux-icon-trending-up": HTMLRuxIconTrendingUpElement;
        "rux-icon-trip-origin": HTMLRuxIconTripOriginElement;
        "rux-icon-tune": HTMLRuxIconTuneElement;
        "rux-icon-turned-in": HTMLRuxIconTurnedInElement;
        "rux-icon-turned-in-not": HTMLRuxIconTurnedInNotElement;
        "rux-icon-tv": HTMLRuxIconTvElement;
        "rux-icon-tv-off": HTMLRuxIconTvOffElement;
        "rux-icon-unarchive": HTMLRuxIconUnarchiveElement;
        "rux-icon-undo": HTMLRuxIconUndoElement;
        "rux-icon-unfold-less": HTMLRuxIconUnfoldLessElement;
        "rux-icon-unfold-more": HTMLRuxIconUnfoldMoreElement;
        "rux-icon-unsubscribe": HTMLRuxIconUnsubscribeElement;
        "rux-icon-update": HTMLRuxIconUpdateElement;
        "rux-icon-usb": HTMLRuxIconUsbElement;
        "rux-icon-verified-user": HTMLRuxIconVerifiedUserElement;
        "rux-icon-vertical-align-bottom": HTMLRuxIconVerticalAlignBottomElement;
        "rux-icon-vertical-align-center": HTMLRuxIconVerticalAlignCenterElement;
        "rux-icon-vertical-align-top": HTMLRuxIconVerticalAlignTopElement;
        "rux-icon-vertical-split": HTMLRuxIconVerticalSplitElement;
        "rux-icon-vibration": HTMLRuxIconVibrationElement;
        "rux-icon-video-call": HTMLRuxIconVideoCallElement;
        "rux-icon-video-label": HTMLRuxIconVideoLabelElement;
        "rux-icon-video-library": HTMLRuxIconVideoLibraryElement;
        "rux-icon-videocam": HTMLRuxIconVideocamElement;
        "rux-icon-videocam-off": HTMLRuxIconVideocamOffElement;
        "rux-icon-videogame-asset": HTMLRuxIconVideogameAssetElement;
        "rux-icon-view-agenda": HTMLRuxIconViewAgendaElement;
        "rux-icon-view-array": HTMLRuxIconViewArrayElement;
        "rux-icon-view-carousel": HTMLRuxIconViewCarouselElement;
        "rux-icon-view-column": HTMLRuxIconViewColumnElement;
        "rux-icon-view-comfy": HTMLRuxIconViewComfyElement;
        "rux-icon-view-compact": HTMLRuxIconViewCompactElement;
        "rux-icon-view-day": HTMLRuxIconViewDayElement;
        "rux-icon-view-headline": HTMLRuxIconViewHeadlineElement;
        "rux-icon-view-list": HTMLRuxIconViewListElement;
        "rux-icon-view-module": HTMLRuxIconViewModuleElement;
        "rux-icon-view-quilt": HTMLRuxIconViewQuiltElement;
        "rux-icon-view-stream": HTMLRuxIconViewStreamElement;
        "rux-icon-view-week": HTMLRuxIconViewWeekElement;
        "rux-icon-vignette": HTMLRuxIconVignetteElement;
        "rux-icon-visibility": HTMLRuxIconVisibilityElement;
        "rux-icon-visibility-off": HTMLRuxIconVisibilityOffElement;
        "rux-icon-voice-chat": HTMLRuxIconVoiceChatElement;
        "rux-icon-voice-over-off": HTMLRuxIconVoiceOverOffElement;
        "rux-icon-voicemail": HTMLRuxIconVoicemailElement;
        "rux-icon-volume-down": HTMLRuxIconVolumeDownElement;
        "rux-icon-volume-mute": HTMLRuxIconVolumeMuteElement;
        "rux-icon-volume-off": HTMLRuxIconVolumeOffElement;
        "rux-icon-volume-up": HTMLRuxIconVolumeUpElement;
        "rux-icon-vpn-key": HTMLRuxIconVpnKeyElement;
        "rux-icon-vpn-lock": HTMLRuxIconVpnLockElement;
        "rux-icon-wallpaper": HTMLRuxIconWallpaperElement;
        "rux-icon-warning": HTMLRuxIconWarningElement;
        "rux-icon-watch": HTMLRuxIconWatchElement;
        "rux-icon-watch-later": HTMLRuxIconWatchLaterElement;
        "rux-icon-waves": HTMLRuxIconWavesElement;
        "rux-icon-wb-auto": HTMLRuxIconWbAutoElement;
        "rux-icon-wb-cloudy": HTMLRuxIconWbCloudyElement;
        "rux-icon-wb-incandescent": HTMLRuxIconWbIncandescentElement;
        "rux-icon-wb-iridescent": HTMLRuxIconWbIridescentElement;
        "rux-icon-wb-sunny": HTMLRuxIconWbSunnyElement;
        "rux-icon-wc": HTMLRuxIconWcElement;
        "rux-icon-web": HTMLRuxIconWebElement;
        "rux-icon-web-asset": HTMLRuxIconWebAssetElement;
        "rux-icon-weekend": HTMLRuxIconWeekendElement;
        "rux-icon-whatshot": HTMLRuxIconWhatshotElement;
        "rux-icon-where-to-vote": HTMLRuxIconWhereToVoteElement;
        "rux-icon-widgets": HTMLRuxIconWidgetsElement;
        "rux-icon-wifi": HTMLRuxIconWifiElement;
        "rux-icon-wifi-lock": HTMLRuxIconWifiLockElement;
        "rux-icon-wifi-off": HTMLRuxIconWifiOffElement;
        "rux-icon-wifi-tethering": HTMLRuxIconWifiTetheringElement;
        "rux-icon-work": HTMLRuxIconWorkElement;
        "rux-icon-work-off": HTMLRuxIconWorkOffElement;
        "rux-icon-work-outline": HTMLRuxIconWorkOutlineElement;
        "rux-icon-wrap-text": HTMLRuxIconWrapTextElement;
        "rux-icon-youtube-searched-for": HTMLRuxIconYoutubeSearchedForElement;
        "rux-icon-zoom-in": HTMLRuxIconZoomInElement;
        "rux-icon-zoom-in-map": HTMLRuxIconZoomInMapElement;
        "rux-icon-zoom-out": HTMLRuxIconZoomOutElement;
        "rux-icon-zoom-out-map": HTMLRuxIconZoomOutMapElement;
        "rux-indeterminate-progress": HTMLRuxIndeterminateProgressElement;
        "rux-input": HTMLRuxInputElement;
        "rux-log": HTMLRuxLogElement;
        "rux-menu": HTMLRuxMenuElement;
        "rux-menu-item": HTMLRuxMenuItemElement;
        "rux-menu-item-divider": HTMLRuxMenuItemDividerElement;
        "rux-monitoring-icon": HTMLRuxMonitoringIconElement;
        "rux-monitoring-progress-icon": HTMLRuxMonitoringProgressIconElement;
        "rux-notification": HTMLRuxNotificationElement;
        "rux-option": HTMLRuxOptionElement;
        "rux-option-group": HTMLRuxOptionGroupElement;
        "rux-pop-up": HTMLRuxPopUpElement;
        "rux-progress": HTMLRuxProgressElement;
        "rux-push-button": HTMLRuxPushButtonElement;
        "rux-radio": HTMLRuxRadioElement;
        "rux-radio-group": HTMLRuxRadioGroupElement;
        "rux-ruler": HTMLRuxRulerElement;
        "rux-segmented-button": HTMLRuxSegmentedButtonElement;
        "rux-select": HTMLRuxSelectElement;
        "rux-slider": HTMLRuxSliderElement;
        "rux-status": HTMLRuxStatusElement;
        "rux-switch": HTMLRuxSwitchElement;
        "rux-tab": HTMLRuxTabElement;
        "rux-tab-panel": HTMLRuxTabPanelElement;
        "rux-tab-panels": HTMLRuxTabPanelsElement;
        "rux-table": HTMLRuxTableElement;
        "rux-table-body": HTMLRuxTableBodyElement;
        "rux-table-cell": HTMLRuxTableCellElement;
        "rux-table-header": HTMLRuxTableHeaderElement;
        "rux-table-header-cell": HTMLRuxTableHeaderCellElement;
        "rux-table-header-row": HTMLRuxTableHeaderRowElement;
        "rux-table-row": HTMLRuxTableRowElement;
        "rux-tabs": HTMLRuxTabsElement;
        "rux-tag": HTMLRuxTagElement;
        "rux-textarea": HTMLRuxTextareaElement;
        "rux-time-region": HTMLRuxTimeRegionElement;
        "rux-timeline": HTMLRuxTimelineElement;
        "rux-tooltip": HTMLRuxTooltipElement;
        "rux-track": HTMLRuxTrackElement;
        "rux-tree": HTMLRuxTreeElement;
        "rux-tree-node": HTMLRuxTreeNodeElement;
    }
}
declare namespace LocalJSX {
    interface RuxAccordion {
        /**
          * If present, sets a disabled state on the accordion, indicating that no part of it can be manipulated by user action.
         */
        "disabled"?: boolean;
        /**
          * ***** toggles disallow muiltiple - default false ********
         */
        "disallowMultiple"?: boolean;
    }
    interface RuxAccordionItem {
        /**
          * If present, sets a disabled state on this accordion item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * If present, sets the initial state on this accordion item to open, displaying the accordion content.
         */
        "expanded"?: boolean;
        /**
          * Fired when an accordion-item has collapsed
         */
        "onRuxcollapsed"?: (event: RuxAccordionItemCustomEvent<any>) => void;
        /**
          * Fired when an accordion-item has expanded
         */
        "onRuxexpanded"?: (event: RuxAccordionItemCustomEvent<any>) => void;
    }
    interface RuxBreadcrumb {
    }
    interface RuxBreadcrumbItem {
        /**
          * The href property of the breadcrumb item link
         */
        "href"?: string;
    }
    interface RuxButton {
        /**
          * Changes button style from solid to borderless by setting the rux-button--borderless class
         */
        "borderless"?: boolean;
        /**
          * Toggles disabled attribute on the button
         */
        "disabled"?: boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * Changes button style from solid to secondary by setting the rux-button--secondary class
         */
        "secondary"?: boolean;
        /**
          * Changes size of a button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type. Use 'submit' to submit native form data.
         */
        "type"?: 'submit' | 'button';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign"?: 'left' | 'center' | 'right';
    }
    interface RuxCard {
    }
    interface RuxCheckbox {
        /**
          * Toggles checked state of a checkbox
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when an element has gained focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event)
         */
        "onRuxfocus"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * The checkbox value
         */
        "value"?: string;
    }
    interface RuxCheckboxGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Checkbox Group as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the checkbox group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Marks that a selection from the checkbox group is requried.
         */
        "required"?: boolean;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification"?: Classification;
        /**
          * Allows additional text labels to be added to the marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag"?: boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: string;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), sets the time and date of the clock.
         */
        "dateIn"?: string;
        /**
          * Hides the day of the year.
         */
        "hideDate"?: boolean;
        /**
          * Hides all of the labels.
         */
        "hideLabels"?: boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone"?: boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small"?: boolean;
        "static"?: boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxContainer {
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date"?: Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for era
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12"?: boolean;
        /**
          * The locale
         */
        "locale"?: string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for weekday
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxDialog {
        /**
          * Allows dialog to close when clicking off it
         */
        "clickToClose"?: boolean;
        /**
          * Text for confirmation button
         */
        "confirmText"?: string;
        /**
          * Text for close button
         */
        "denyText"?: string;
        /**
          * Dialog header title
         */
        "header"?: string;
        /**
          * Dialog body message
         */
        "message"?: string;
        /**
          * Event that is fired when dialog closes. If dialog is closed by clicking on the default confirm or deny buttons (when no footer slot is provided), then true or false will be emitted respectively on the event.detail.
         */
        "onRuxdialogclosed"?: (event: RuxDialogCustomEvent<boolean | null>) => void;
        /**
          * Event that is fired when dialog opens
         */
        "onRuxdialogopened"?: (event: RuxDialogCustomEvent<void>) => void;
        /**
          * Shows and hides dialog
         */
        "open"?: boolean;
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Declares what text will render and whether the app-state component will be shown in the app-meta slot
         */
        "appState"?: string;
        /**
          * Declares the color of the the app-state component background
         */
        "appStateColor"?: 'tag1' | 'tag2' | 'tag3' | 'tag4';
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the menu-icon will be shown in the left-side slot
         */
        "includeIcon"?: boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon"?: string;
        /**
          * Declares what text will render and whether the username component will be shown in the app-meta slot
         */
        "username"?: string;
    }
    interface RuxIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIcon360 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIcon3dRotation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIcon4k {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAcUnit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessAlarms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessTime {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessibility {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessibilityNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessible {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccessibleForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccountBalance {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccountBalanceWallet {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccountBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAccountCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAdb {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddAPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddAlarm {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddAlert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddPhotoAlternate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddShoppingCart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddToHomeScreen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddToPhotos {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAddToQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAdjust {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatFlat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatFlatAngled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatIndividualSuite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatLegroomExtra {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatLegroomNormal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatLegroomReduced {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatReclineExtra {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirlineSeatReclineNormal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirplanemodeActive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirplanemodeInactive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirplay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAirportShuttle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlarm {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlarmAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlarmOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlarmOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlbum {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAllInbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAllInclusive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAllOut {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAlternateEmail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAltitude {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAndroid {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAnnouncement {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAntenna {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAntennaOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAntennaReceive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAntennaTransmit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconApps {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArchive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowBack {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowBackIos {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowDownward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowDropDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowDropDownCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowDropUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowForwardIos {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowRightAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArrowUpward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconArtTrack {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAspectRatio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssessment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignmentFind {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignmentLate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignmentReturn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignmentReturned {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssignmentTurnedIn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssistant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAssistantPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAttachFile {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAttachMoney {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAttachment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAudiotrack {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAutorenew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconAvTimer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBackspace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBackup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBallot {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBarChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery20 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery50 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery60 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery80 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBattery90 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryAlert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging20 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging50 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging60 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging80 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryCharging90 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryChargingFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryStd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBatteryUnknown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBeachAccess {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBeenhere {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBlock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBluetooth {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBluetoothAudio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBluetoothConnected {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBluetoothDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBluetoothSearching {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBlurCircular {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBlurLinear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBlurOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBlurOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBook {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBookmark {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBookmarkBorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBookmarks {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderBottom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderColor {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderHorizontal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderInner {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderOuter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderStyle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderTop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBorderVertical {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrandingWatermark {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness4 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness6 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightness7 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightnessAuto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightnessHigh {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightnessLow {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrightnessMedium {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrokenImage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBrush {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBubbleChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBugReport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBuild {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBurstMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBusiness {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconBusinessCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCached {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCake {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCalendarToday {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCalendarViewDay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallEnd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMade {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMerge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMissed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallMissedOutgoing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallReceived {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallSplit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCallToAction {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraEnhance {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraFront {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraRear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCameraRoll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCancel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCancelPresentation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardGiftcard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardMembership {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCardTravel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCasino {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCast {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCastConnected {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCastForEducation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCategory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCellWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCenterFocusStrong {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCenterFocusWeak {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChangeHistory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChatBubble {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChatBubbleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckBoxOutlineBlank {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCheckCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChevronLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChevronRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChildCare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChildFriendly {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconChromeReaderMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClass {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClearAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClose {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconClosedCaption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloud {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudDone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudDownload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCloudUpload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCollections {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCollectionsBookmark {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconColorLens {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconColorize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCommute {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompareArrows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCompassCalibration {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconComputer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconConfirmationNumber {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactMail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContactSupport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconContacts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlPoint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconControlPointDuplicate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCopyright {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreateNewFolder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCreditCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop169 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop32 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop54 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCrop75 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropDin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropFree {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropOriginal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropRotate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconCropSquare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDashboard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDataUsage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDateRange {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDehaze {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDelete {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteForever {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeleteSweep {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDepartureBoard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDescription {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopAccessDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDesktopWindows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDetails {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeveloperBoard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeveloperMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeviceHub {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDeviceUnknown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDevices {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDevicesOther {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDialerSip {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDialpad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirections {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBike {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBoat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsBus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsCar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsRailway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsRun {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsSubway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsTransit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDirectionsWalk {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDiscFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDns {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDomain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDomainDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDoneAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDoneOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDonutLarge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDonutSmall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDrafts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDragHandle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDragIndicator {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDriveEta {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDuo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconDvr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEdit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEditAttributes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEditLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEject {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEmail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEnhancedEncryption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEqualizer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEquipment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconError {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconErrorOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEuroSymbol {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEvStation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEvent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventAvailable {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventBusy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconEventNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExitToApp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExpandLess {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExpandMore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExplicit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExplore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExploreOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposure {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureNeg1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureNeg2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposurePlus1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposurePlus2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExposureZero {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconExtension {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastRewind {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFastfood {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFavorite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFavoriteBorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeaturedPlayList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeaturedVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFeedback {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberDvr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberManualRecord {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberPin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFiberSmartRecord {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFileCopy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter4 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter6 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter7 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter8 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter9 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilter9Plus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterBAndW {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterCenterFocus {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterDrama {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterFrames {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterHdr {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterTiltShift {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFilterVintage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFindInPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFindReplace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFingerprint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFirstPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFitnessCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlag {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashAuto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlashOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlightLand {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlightTakeoff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlip {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlipToBack {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFlipToFront {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderOpen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderShared {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFolderSpecial {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFontDownload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignCenter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignJustify {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatAlignRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatBold {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorFill {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorReset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatColorText {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatIndentDecrease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatIndentIncrease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatItalic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatLineSpacing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListBulleted {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListNumbered {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatListNumberedRtl {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatPaint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatQuote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatShapes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatSize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatStrikethrough {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatTextdirectionLToR {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatTextdirectionRToL {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFormatUnderlined {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForum {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward10 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconForward5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFreeBreakfast {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFullscreen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFullscreenExit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconFunctions {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGTranslate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGamepad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGames {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGavel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGesture {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGetApp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGif {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGolfCourse {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsFixed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsNotFixed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGpsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGrade {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGradient {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGrain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGraphicEq {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGridOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGridOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroupAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconGroupWork {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHardware {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrStrong {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHdrWeak {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHeadset {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHeadsetMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHealing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHearing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHelp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHelpOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighQuality {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighlight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHighlightOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHistory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHome {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHorizontalSplit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHotTub {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHotel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHourglassEmpty {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHourglassFull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHowToReg {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHowToVote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHttp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconHttps {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImageAspectRatio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImageSearch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportContacts {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportExport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconImportantDevices {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconIndeterminateCheckBox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInfo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInput {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertChartOutlined {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertDriveFile {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertEmoticon {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertInvitation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertLink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInsertPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInvertColors {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconInvertColorsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconIso {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowDown {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardArrowUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardBackspace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardCapslock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardHide {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardReturn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardTab {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKeyboardVoice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconKitchen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabelImportant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLabelOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLanguage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopChromebook {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaptopWindows {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLastPage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLaunch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLayers {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLayersClear {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLeakAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLeakRemove {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLens {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryBooks {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLibraryMusic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLineStyle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLineWeight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinearScale {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinkOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLinkedCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconList {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconListAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLiveHelp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLiveTv {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalActivity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalAirport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalAtm {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalBar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalCafe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalCarWash {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalConvenienceStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalDining {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalDrink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalGasStation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalGroceryStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalHospital {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalHotel {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalLaundryService {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalLibrary {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalMall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalMovies {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalOffer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalParking {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPharmacy {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPostOffice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalPrintshop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalSee {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalShipping {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocalTaxi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationCity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLocationSearching {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLockOpen {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks1 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks2 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks3 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks4 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLooks6 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoupe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLowPriority {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconLoyalty {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMail {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMailOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMap {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMarkunread {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMarkunreadMailbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMaximize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMeetingRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMemory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMenu {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMergeType {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMessage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMicNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMicOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMinimize {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMissedVideoCall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMission {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileFriendly {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMobileScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconModeComment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMonetizationOn {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoney {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoneyOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMonochromePhotos {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMood {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoodBad {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoreHoriz {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoreVert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMotorcycle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMouse {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMoveToInbox {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovie {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovieCreation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMovieFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMultilineChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMusicVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconMyLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNature {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNaturePeople {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigateBefore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigateNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNavigation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNearMe {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetcom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkCell {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkLocked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNetworkWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNewReleases {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNextWeek {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNfc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoEncryption {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoMeetingRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoSim {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotInterested {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotListedLocation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNoteAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationImportant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotifications {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsActive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsNone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconNotificationsPaused {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOfflineBolt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOfflinePin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOndemandVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpacity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenInBrowser {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenInNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOpenWith {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconOutlinedFlag {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPages {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPageview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPalette {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanTool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanorama {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaFishEye {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaHorizontal {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaVertical {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPanoramaWideAngle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPartyMode {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPause {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPauseCircleFilled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPauseCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPausePresentation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPayload {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPayment {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPeopleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermCameraMic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermContactCalendar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermDataSetting {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermDeviceInformation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermIdentity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermMedia {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermPhoneMsg {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPermScanWifi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPerson {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonAddDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonPin {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonPinCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPersonalVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPets {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneAndroid {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneBluetoothSpeaker {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneCallback {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneForwarded {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneInTalk {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneIphone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneLocked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoneMissed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonePaused {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelink {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkErase {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkRing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhonelinkSetup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhoto {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoAlbum {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoFilter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoLibrary {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectActual {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectLarge {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPhotoSizeSelectSmall {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureAsPdf {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureInPicture {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPictureInPictureAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPieChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPinDrop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlace {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayArrow {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleFilled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleFilledWhite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlayForWork {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistAdd {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistAddCheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlaylistPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPlusOne {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPoll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPortableWifiOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerInput {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPowerSettingsNew {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPregnantWoman {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPresentToAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPrint {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPrintDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPriorityHigh {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconProcessor {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconProcessorAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPropulsionPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPublic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconPublish {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueryBuilder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQuestionAnswer {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueueMusic {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconQueuePlayNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadio {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadioButtonChecked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRadioButtonUnchecked {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRateReview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReceipt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRecentActors {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRecordVoiceOver {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRedeem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRedo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRefresh {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRelease {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemove {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveCircleOutline {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveFromQueue {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveRedEye {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRemoveShoppingCart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRepeat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRepeatOne {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay10 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay30 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplay5 {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReply {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReplyAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReport {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReportOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconReportProblem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestaurant {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestaurantMenu {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestoreFromTrash {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRestorePage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRingVolume {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoom {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoomService {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotate90DegreesCc {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotateLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRotateRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRoundedCorner {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRouter {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRowing {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRssFeed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconRvHookup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatellite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteReceive {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSatelliteTransmit {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSave {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSaveAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScanner {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScatterPlot {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSchedule {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSchool {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenLockRotation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenRotation {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSdCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSdStorage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSearch {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSeat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSecurity {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSelectAll {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSend {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentDissatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentSatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentSatisfiedAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentVeryDissatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSentimentVerySatisfied {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSetPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettings {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsApplications {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBackupRestore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBluetooth {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsBrightness {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsCell {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsEthernet {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputAntenna {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputComponent {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputComposite {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputHdmi {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsInputSvideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsOverscan {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsPower {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsRemote {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsSystemDaydream {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSettingsVoice {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShopTwo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShoppingBasket {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShoppingCart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShortText {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShowChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShuffle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconShutterSpeed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellular4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularAlt {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularConnectedNoInternet4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularNoSim {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularNull {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalCellularOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi0Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi1Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi1BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi2Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi2BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi3Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi3BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi4Bar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifi4BarLock {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSignalWifiOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSimCard {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSkipNext {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSkipPrevious {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSlideshow {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSlowMotionVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmartphone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmokeFree {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmokingRooms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSms {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSmsFailed {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSnooze {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSolar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSort {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSortByAlpha {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpa {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpaceBar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeaker {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerGroup {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerNotes {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerNotesOff {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpeakerPhone {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSpellcheck {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStar {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarBorder {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarHalf {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStarRate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStars {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayCurrentLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayCurrentPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayPrimaryLandscape {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStayPrimaryPortrait {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStop {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStopScreenShare {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStorage {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStore {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStoreMallDirectory {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStraighten {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStreetview {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStrikethroughS {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconStyle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubdirectoryArrowLeft {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubdirectoryArrowRight {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubject {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubscriptions {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubtitles {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSubway {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSupervisedUserCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSupervisorAccount {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSurroundSound {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapCalls {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapHoriz {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapHorizontalCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapVert {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwapVerticalCircle {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwitchCamera {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSwitchVideo {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSync {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSyncDisabled {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSyncProblem {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconSystemUpdate {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTab {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabUnselected {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTableChart {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTablet {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabletAndroid {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTabletMac {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTagFaces {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTapAndPlay {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTerrain {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextFields {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextFormat {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextRotateUp {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIconTextRotateVertical {
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    var HTMLRuxCheckboxElement: {
        prototype: HTMLRuxCheckboxElement;
        new (): HTMLRuxCheckboxElement;
    };
    interface HTMLRuxCheckboxGroupElement extends Components.RuxCheckboxGroup, HTMLStencilElement {
    }
    var HTMLRuxCheckboxGroupElement: {
        prototype: HTMLRuxCheckboxGroupElement;
        new (): HTMLRuxCheckboxGroupElement;
    };
    interface HTMLRuxClassificationMarkingElement extends Components.RuxClassificationMarking, HTMLStencilElement {
    }
    var HTMLRuxClassificationMarkingElement: {
        prototype: HTMLRuxClassificationMarkingElement;
        new (): HTMLRuxClassificationMarkingElement;
    };
    interface HTMLRuxClockElement extends Components.RuxClock, HTMLStencilElement {
    }
    var HTMLRuxClockElement: {
        prototype: HTMLRuxClockElement;
        new (): HTMLRuxClockElement;
    };
    interface HTMLRuxContainerElement extends Components.RuxContainer, HTMLStencilElement {
    }
    var HTMLRuxContainerElement: {
        prototype: HTMLRuxContainerElement;
        new (): HTMLRuxContainerElement;
    };
    interface HTMLRuxDatetimeElement extends Components.RuxDatetime, HTMLStencilElement {
    }
    var HTMLRuxDatetimeElement: {
        prototype: HTMLRuxDatetimeElement;
        new (): HTMLRuxDatetimeElement;
    };
    interface HTMLRuxDialogElement extends Components.RuxDialog, HTMLStencilElement {
    }
    var HTMLRuxDialogElement: {
        prototype: HTMLRuxDialogElement;
        new (): HTMLRuxDialogElement;
    };
    interface HTMLRuxGlobalStatusBarElement extends Components.RuxGlobalStatusBar, HTMLStencilElement {
    }
    var HTMLRuxGlobalStatusBarElement: {
        prototype: HTMLRuxGlobalStatusBarElement;
        new (): HTMLRuxGlobalStatusBarElement;
    };
    interface HTMLRuxIconElement extends Components.RuxIcon, HTMLStencilElement {
    }
    var HTMLRuxIconElement: {
        prototype: HTMLRuxIconElement;
        new (): HTMLRuxIconElement;
    };
    interface HTMLRuxIndeterminateProgressElement extends Components.RuxIndeterminateProgress, HTMLStencilElement {
    }
    var HTMLRuxIndeterminateProgressElement: {
        prototype: HTMLRuxIndeterminateProgressElement;
        new (): HTMLRuxIndeterminateProgressElement;
    };
    interface HTMLRuxInputElement extends Components.RuxInput, HTMLStencilElement {
    }
    var HTMLRuxInputElement: {
        prototype: HTMLRuxInputElement;
        new (): HTMLRuxInputElement;
    };
    interface HTMLRuxLogElement extends Components.RuxLog, HTMLStencilElement {
    }
    var HTMLRuxLogElement: {
        prototype: HTMLRuxLogElement;
        new (): HTMLRuxLogElement;
    };
    interface HTMLRuxMenuElement extends Components.RuxMenu, HTMLStencilElement {
    }
    var HTMLRuxMenuElement: {
        prototype: HTMLRuxMenuElement;
        new (): HTMLRuxMenuElement;
    };
    interface HTMLRuxMenuItemElement extends Components.RuxMenuItem, HTMLStencilElement {
    }
    var HTMLRuxMenuItemElement: {
        prototype: HTMLRuxMenuItemElement;
        new (): HTMLRuxMenuItemElement;
    };
    interface HTMLRuxMenuItemDividerElement extends Components.RuxMenuItemDivider, HTMLStencilElement {
    }
    var HTMLRuxMenuItemDividerElement: {
        prototype: HTMLRuxMenuItemDividerElement;
        new (): HTMLRuxMenuItemDividerElement;
    };
    interface HTMLRuxMonitoringIconElement extends Components.RuxMonitoringIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringIconElement: {
        prototype: HTMLRuxMonitoringIconElement;
        new (): HTMLRuxMonitoringIconElement;
    };
    interface HTMLRuxMonitoringProgressIconElement extends Components.RuxMonitoringProgressIcon, HTMLStencilElement {
    }
    var HTMLRuxMonitoringProgressIconElement: {
        prototype: HTMLRuxMonitoringProgressIconElement;
        new (): HTMLRuxMonitoringProgressIconElement;
    };
    interface HTMLRuxNotificationElement extends Components.RuxNotification, HTMLStencilElement {
    }
    var HTMLRuxNotificationElement: {
        prototype: HTMLRuxNotificationElement;
        new (): HTMLRuxNotificationElement;
    };
    interface HTMLRuxOptionElement extends Components.RuxOption, HTMLStencilElement {
    }
    var HTMLRuxOptionElement: {
        prototype: HTMLRuxOptionElement;
        new (): HTMLRuxOptionElement;
    };
    interface HTMLRuxOptionGroupElement extends Components.RuxOptionGroup, HTMLStencilElement {
    }
    var HTMLRuxOptionGroupElement: {
        prototype: HTMLRuxOptionGroupElement;
        new (): HTMLRuxOptionGroupElement;
    };
    interface HTMLRuxPopUpElement extends Components.RuxPopUp, HTMLStencilElement {
    }
    var HTMLRuxPopUpElement: {
        prototype: HTMLRuxPopUpElement;
        new (): HTMLRuxPopUpElement;
    };
    interface HTMLRuxProgressElement extends Components.RuxProgress, HTMLStencilElement {
    }
    var HTMLRuxProgressElement: {
        prototype: HTMLRuxProgressElement;
        new (): HTMLRuxProgressElement;
    };
    interface HTMLRuxPushButtonElement extends Components.RuxPushButton, HTMLStencilElement {
    }
    var HTMLRuxPushButtonElement: {
        prototype: HTMLRuxPushButtonElement;
        new (): HTMLRuxPushButtonElement;
    };
    interface HTMLRuxRadioElement extends Components.RuxRadio, HTMLStencilElement {
    }
    var HTMLRuxRadioElement: {
        prototype: HTMLRuxRadioElement;
        new (): HTMLRuxRadioElement;
    };
    interface HTMLRuxRadioGroupElement extends Components.RuxRadioGroup, HTMLStencilElement {
    }
    var HTMLRuxRadioGroupElement: {
        prototype: HTMLRuxRadioGroupElement;
        new (): HTMLRuxRadioGroupElement;
    };
    interface HTMLRuxRulerElement extends Components.RuxRuler, HTMLStencilElement {
    }
    var HTMLRuxRulerElement: {
        prototype: HTMLRuxRulerElement;
        new (): HTMLRuxRulerElement;
    };
    interface HTMLRuxSegmentedButtonElement extends Components.RuxSegmentedButton, HTMLStencilElement {
    }
    var HTMLRuxSegmentedButtonElement: {
        prototype: HTMLRuxSegmentedButtonElement;
        new (): HTMLRuxSegmentedButtonElement;
    };
    interface HTMLRuxSelectElement extends Components.RuxSelect, HTMLStencilElement {
    }
    var HTMLRuxSelectElement: {
        prototype: HTMLRuxSelectElement;
        new (): HTMLRuxSelectElement;
    };
    interface HTMLRuxSliderElement extends Components.RuxSlider, HTMLStencilElement {
    }
    var HTMLRuxSliderElement: {
        prototype: HTMLRuxSliderElement;
        new (): HTMLRuxSliderElement;
    };
    interface HTMLRuxStatusElement extends Components.RuxStatus, HTMLStencilElement {
    }
    var HTMLRuxStatusElement: {
        prototype: HTMLRuxStatusElement;
        new (): HTMLRuxStatusElement;
    };
    interface HTMLRuxSwitchElement extends Components.RuxSwitch, HTMLStencilElement {
    }
    var HTMLRuxSwitchElement: {
        prototype: HTMLRuxSwitchElement;
        new (): HTMLRuxSwitchElement;
    };
    interface HTMLRuxTabElement extends Components.RuxTab, HTMLStencilElement {
    }
    var HTMLRuxTabElement: {
        prototype: HTMLRuxTabElement;
        new (): HTMLRuxTabElement;
    };
    interface HTMLRuxTabPanelElement extends Components.RuxTabPanel, HTMLStencilElement {
    }
    var HTMLRuxTabPanelElement: {
        prototype: HTMLRuxTabPanelElement;
        new (): HTMLRuxTabPanelElement;
    };
    interface HTMLRuxTabPanelsElement extends Components.RuxTabPanels, HTMLStencilElement {
    }
    var HTMLRuxTabPanelsElement: {
        prototype: HTMLRuxTabPanelsElement;
        new (): HTMLRuxTabPanelsElement;
    };
    interface HTMLRuxTableElement extends Components.RuxTable, HTMLStencilElement {
    }
    var HTMLRuxTableElement: {
        prototype: HTMLRuxTableElement;
        new (): HTMLRuxTableElement;
    };
    interface HTMLRuxTableBodyElement extends Components.RuxTableBody, HTMLStencilElement {
    }
    var HTMLRuxTableBodyElement: {
        prototype: HTMLRuxTableBodyElement;
        new (): HTMLRuxTableBodyElement;
    };
    interface HTMLRuxTableCellElement extends Components.RuxTableCell, HTMLStencilElement {
    }
    var HTMLRuxTableCellElement: {
        prototype: HTMLRuxTableCellElement;
        new (): HTMLRuxTableCellElement;
    };
    interface HTMLRuxTableHeaderElement extends Components.RuxTableHeader, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderElement: {
        prototype: HTMLRuxTableHeaderElement;
        new (): HTMLRuxTableHeaderElement;
    };
    interface HTMLRuxTableHeaderCellElement extends Components.RuxTableHeaderCell, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderCellElement: {
        prototype: HTMLRuxTableHeaderCellElement;
        new (): HTMLRuxTableHeaderCellElement;
    };
    interface HTMLRuxTableHeaderRowElement extends Components.RuxTableHeaderRow, HTMLStencilElement {
    }
    var HTMLRuxTableHeaderRowElement: {
        prototype: HTMLRuxTableHeaderRowElement;
        new (): HTMLRuxTableHeaderRowElement;
    };
    interface HTMLRuxTableRowElement extends Components.RuxTableRow, HTMLStencilElement {
    }
    var HTMLRuxTableRowElement: {
        prototype: HTMLRuxTableRowElement;
        new (): HTMLRuxTableRowElement;
    };
    interface HTMLRuxTabsElement extends Components.RuxTabs, HTMLStencilElement {
    }
    var HTMLRuxTabsElement: {
        prototype: HTMLRuxTabsElement;
        new (): HTMLRuxTabsElement;
    };
    interface HTMLRuxTagElement extends Components.RuxTag, HTMLStencilElement {
    }
    var HTMLRuxTagElement: {
        prototype: HTMLRuxTagElement;
        new (): HTMLRuxTagElement;
    };
    interface HTMLRuxTextareaElement extends Components.RuxTextarea, HTMLStencilElement {
    }
    var HTMLRuxTextareaElement: {
        prototype: HTMLRuxTextareaElement;
        new (): HTMLRuxTextareaElement;
    };
    interface HTMLRuxTimeRegionElement extends Components.RuxTimeRegion, HTMLStencilElement {
    }
    var HTMLRuxTimeRegionElement: {
        prototype: HTMLRuxTimeRegionElement;
        new (): HTMLRuxTimeRegionElement;
    };
    interface HTMLRuxTimelineElement extends Components.RuxTimeline, HTMLStencilElement {
    }
    var HTMLRuxTimelineElement: {
        prototype: HTMLRuxTimelineElement;
        new (): HTMLRuxTimelineElement;
    };
    interface HTMLRuxTooltipElement extends Components.RuxTooltip, HTMLStencilElement {
    }
    var HTMLRuxTooltipElement: {
        prototype: HTMLRuxTooltipElement;
        new (): HTMLRuxTooltipElement;
    };
    interface HTMLRuxTrackElement extends Components.RuxTrack, HTMLStencilElement {
    }
    var HTMLRuxTrackElement: {
        prototype: HTMLRuxTrackElement;
        new (): HTMLRuxTrackElement;
    };
    interface HTMLRuxTreeElement extends Components.RuxTree, HTMLStencilElement {
    }
    var HTMLRuxTreeElement: {
        prototype: HTMLRuxTreeElement;
        new (): HTMLRuxTreeElement;
    };
    interface HTMLRuxTreeNodeElement extends Components.RuxTreeNode, HTMLStencilElement {
    }
    var HTMLRuxTreeNodeElement: {
        prototype: HTMLRuxTreeNodeElement;
        new (): HTMLRuxTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "rux-accordion": HTMLRuxAccordionElement;
        "rux-accordion-item": HTMLRuxAccordionItemElement;
        "rux-button": HTMLRuxButtonElement;
        "rux-button-group": HTMLRuxButtonGroupElement;
        "rux-card": HTMLRuxCardElement;
        "rux-checkbox": HTMLRuxCheckboxElement;
        "rux-checkbox-group": HTMLRuxCheckboxGroupElement;
        "rux-classification-marking": HTMLRuxClassificationMarkingElement;
        "rux-clock": HTMLRuxClockElement;
        "rux-container": HTMLRuxContainerElement;
        "rux-datetime": HTMLRuxDatetimeElement;
        "rux-dialog": HTMLRuxDialogElement;
        "rux-global-status-bar": HTMLRuxGlobalStatusBarElement;
        "rux-icon": HTMLRuxIconElement;
        "rux-indeterminate-progress": HTMLRuxIndeterminateProgressElement;
        "rux-input": HTMLRuxInputElement;
        "rux-log": HTMLRuxLogElement;
        "rux-menu": HTMLRuxMenuElement;
        "rux-menu-item": HTMLRuxMenuItemElement;
        "rux-menu-item-divider": HTMLRuxMenuItemDividerElement;
        "rux-monitoring-icon": HTMLRuxMonitoringIconElement;
        "rux-monitoring-progress-icon": HTMLRuxMonitoringProgressIconElement;
        "rux-notification": HTMLRuxNotificationElement;
        "rux-option": HTMLRuxOptionElement;
        "rux-option-group": HTMLRuxOptionGroupElement;
        "rux-pop-up": HTMLRuxPopUpElement;
        "rux-progress": HTMLRuxProgressElement;
        "rux-push-button": HTMLRuxPushButtonElement;
        "rux-radio": HTMLRuxRadioElement;
        "rux-radio-group": HTMLRuxRadioGroupElement;
        "rux-ruler": HTMLRuxRulerElement;
        "rux-segmented-button": HTMLRuxSegmentedButtonElement;
        "rux-select": HTMLRuxSelectElement;
        "rux-slider": HTMLRuxSliderElement;
        "rux-status": HTMLRuxStatusElement;
        "rux-switch": HTMLRuxSwitchElement;
        "rux-tab": HTMLRuxTabElement;
        "rux-tab-panel": HTMLRuxTabPanelElement;
        "rux-tab-panels": HTMLRuxTabPanelsElement;
        "rux-table": HTMLRuxTableElement;
        "rux-table-body": HTMLRuxTableBodyElement;
        "rux-table-cell": HTMLRuxTableCellElement;
        "rux-table-header": HTMLRuxTableHeaderElement;
        "rux-table-header-cell": HTMLRuxTableHeaderCellElement;
        "rux-table-header-row": HTMLRuxTableHeaderRowElement;
        "rux-table-row": HTMLRuxTableRowElement;
        "rux-tabs": HTMLRuxTabsElement;
        "rux-tag": HTMLRuxTagElement;
        "rux-textarea": HTMLRuxTextareaElement;
        "rux-time-region": HTMLRuxTimeRegionElement;
        "rux-timeline": HTMLRuxTimelineElement;
        "rux-tooltip": HTMLRuxTooltipElement;
        "rux-track": HTMLRuxTrackElement;
        "rux-tree": HTMLRuxTreeElement;
        "rux-tree-node": HTMLRuxTreeNodeElement;
    }
}
declare namespace LocalJSX {
    interface RuxAccordion {
        /**
          * If present, sets a disabled state on the accordion, indicating that no part of it can be manipulated by user action.
         */
        "disabled"?: boolean;
        /**
          * ***** toggles disallow muiltiple - default false ********
         */
        "disallowMultiple"?: boolean;
    }
    interface RuxAccordionItem {
        /**
          * If present, sets a disabled state on this accordion item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * If present, sets the initial state on this accordion item to open, displaying the accordion content.
         */
        "expanded"?: boolean;
        /**
          * Fired when an element has expanded
         */
        "onRuxexpanded"?: (event: RuxAccordionItemCustomEvent<any>) => void;
    }
    interface RuxButton {
        /**
          * Changes button style from solid to borderless by setting the rux-button--borderless class
         */
        "borderless"?: boolean;
        /**
          * Toggles disabled attribute on the button
         */
        "disabled"?: boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * Changes button style from solid to secondary by setting the rux-button--secondary class
         */
        "secondary"?: boolean;
        /**
          * Changes size of a button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The button type. Use 'submit' to submit native form data.
         */
        "type"?: 'submit' | 'button';
    }
    interface RuxButtonGroup {
        /**
          * The horizontal alignment of buttons within the group
         */
        "hAlign"?: 'left' | 'center' | 'right';
    }
    interface RuxCard {
    }
    interface RuxCheckbox {
        /**
          * Toggles checked state of a checkbox
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox via HTML disabled attribute. Checkbox takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Toggles indeterminate state of a checkbox. The indeterminate property does not exist in HTML, but can be set in JS. [HTML Checkbox & Indeterminate State](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate)
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxCheckboxCustomEvent<any>) => void;
        /**
          * The checkbox value
         */
        "value"?: string;
    }
    interface RuxCheckboxGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Checkbox Group as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the checkbox group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Marks that a selection from the checkbox group is requried.
         */
        "required"?: boolean;
    }
    interface RuxClassificationMarking {
        /**
          * Defines which classification marking will be displayed.
         */
        "classification"?: Classification;
        /**
          * Allows additional text labels to be added to the marking
         */
        "label"?: string;
        /**
          * Declares the marking as a `tag` rather than the default banner style
         */
        "tag"?: boolean;
    }
    interface RuxClock {
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax) displays a timestamp labeled "AOS" next to the standard clock.
         */
        "aos"?: string;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), sets the time and date of the clock.
         */
        "dateIn"?: string;
        /**
          * Hides the day of the year.
         */
        "hideDate"?: boolean;
        /**
          * Hides all of the labels.
         */
        "hideLabels"?: boolean;
        /**
          * Hides the timezone in the main 24-hour clock. Timezone does not display on AOS/LOS.
         */
        "hideTimezone"?: boolean;
        /**
          * When supplied with a valid [date string or value](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#syntax), displays a timestamp labeled "LOS" next to the standard clock.
         */
        "los"?: string;
        /**
          * Applies a smaller clock style.
         */
        "small"?: boolean;
        "static"?: boolean;
        /**
          * Accepts the [IANA timezone string format](https://www.iana.org/time-zones) such as `'America/Los_Angeles'` or any single-character designation for a [military timezones](https://en.wikipedia.org/wiki/List_of_military_time_zones) (`'A'` through `'Z'`, excluding `'J'`), both case-insensitive. If no value for timezone is provided, the clock will use `'UTC'`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxContainer {
    }
    interface RuxDatetime {
        /**
          * The date time to be formatted
         */
        "date"?: Date | string;
        /**
          * Format options for day
         */
        "day"?: 'numeric' | '2-digit';
        /**
          * Format options for era
         */
        "era"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for hour
         */
        "hour"?: 'numeric' | '2-digit';
        /**
          * Display date in 12 hour time.
         */
        "hour12"?: boolean;
        /**
          * The locale
         */
        "locale"?: string;
        /**
          * Format options for minute
         */
        "minute"?: 'numeric' | '2-digit';
        /**
          * Format options for month
         */
        "month"?: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long';
        /**
          * Format options for second
         */
        "second"?: 'numeric' | '2-digit';
        /**
          * Format options for Timezone
         */
        "timeZone"?: string;
        /**
          * Format options for Timezone name
         */
        "timeZoneName"?: 'short' | 'long';
        /**
          * Format options for weekday
         */
        "weekday"?: 'narrow' | 'short' | 'long';
        /**
          * Format options for year
         */
        "year"?: 'numeric' | '2-digit';
    }
    interface RuxDialog {
        /**
          * Allows dialog to close when clicking off it
         */
        "clickToClose"?: boolean;
        /**
          * Text for confirmation button
         */
        "confirmText"?: string;
        /**
          * Text for close button
         */
        "denyText"?: string;
        /**
          * Dialog header title
         */
        "header"?: string;
        /**
          * Dialog body message
         */
        "message"?: string;
        /**
          * Event that is fired when dialog closes. If dialog is closed by clicking on the default confirm or deny buttons (when no footer slot is provided), then true or false will be emitted respectively on the event.detail.
         */
        "onRuxdialogclosed"?: (event: RuxDialogCustomEvent<boolean | null>) => void;
        /**
          * Event that is fired when dialog opens
         */
        "onRuxdialogopened"?: (event: RuxDialogCustomEvent<void>) => void;
        /**
          * Shows and hides dialog
         */
        "open"?: boolean;
    }
    interface RuxGlobalStatusBar {
        /**
          * Sets the domain of the application to be displayed in the app-meta element
         */
        "appDomain"?: string;
        /**
          * Sets the name of the application to be displayed in the app-meta element
         */
        "appName"?: string;
        /**
          * Declares what text will render and whether the app-state component will be shown in the app-meta slot
         */
        "appState"?: string;
        /**
          * Declares the color of the the app-state component background
         */
        "appStateColor"?: 'tag1' | 'tag2' | 'tag3' | 'tag4';
        /**
          * Sets the version of the application to be displayed in the app-meta element
         */
        "appVersion"?: string;
        /**
          * Declares whether the menu-icon will be shown in the left-side slot
         */
        "includeIcon"?: boolean;
        /**
          * Sets the icon to be displayed in the default rux-icon component
         */
        "menuIcon"?: string;
        /**
          * Declares what text will render and whether the username component will be shown in the app-meta slot
         */
        "username"?: string;
    }
    interface RuxIcon {
        /**
          * The icon name
         */
        "icon": string;
        /**
          * The size of the icon. Can be 'extra-small', 'small', 'normal', 'large', 'auto' or any custom value ('30px', '1rem', '3.321em')
         */
        "size"?: | 'extra-small'
        | 'small'
        | 'normal'
        | 'large'
        | 'auto'
        | string;
    }
    interface RuxIndeterminateProgress {
    }
    interface RuxInput {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Input Field as invalid.
         */
        "invalid"?: boolean;
        /**
          * The input label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input max attribute
         */
        "max"?: string;
        /**
          * The input min attribute
         */
        "min"?: string;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when an element has gained focus - [HTMLElement/focus_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event)
         */
        "onRuxfocus"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxInputCustomEvent<any>) => void;
        /**
          * The input placeholder text
         */
        "placeholder"?: string;
        /**
          * The inputs readonly attribute
         */
        "readonly"?: boolean;
        /**
          * Sets the input as required
         */
        "required"?: boolean;
        /**
          * Control the padding around the input field
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input's spellcheck attribute
         */
        "spellcheck"?: boolean;
        /**
          * The input step attribute
         */
        "step"?: string;
        /**
          * The input type
         */
        "type"?: | 'text'
        | 'number'
        | 'email'
        | 'url'
        | 'search'
        | 'password'
        | 'date'
        | 'datetime-local'
        | 'time'
        | 'tel';
        /**
          * The input value
         */
        "value"?: string;
    }
    interface RuxLog {
        /**
          * An array of objects to display as log
         */
        "data"?: LogRow[];
        /**
          * A string to filter the array to return only the children whose `message` property contains a case-insensitive substring match.
         */
        "filter"?: string;
        /**
          * Accepts [IANA timezone string format](https://www.iana.org/time-zones) such as `America/Los_Angeles`. Default timezone is `UTC`. See [`toLocaleString()` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString#Parameters) for more details.
         */
        "timezone"?: string;
    }
    interface RuxMenu {
        /**
          * Emits when a rux-menu-item is selected. Emits the rux-menu-item selected in the event detail.
         */
        "onRuxmenuselected"?: (event: RuxMenuCustomEvent<any>) => void;
    }
    interface RuxMenuItem {
        /**
          * sets the menu item as disabled
         */
        "disabled"?: boolean;
        /**
          * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
         */
        "download"?: string | undefined;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * sets the menu item as selected
         */
        "selected"?: boolean;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * the value returned when item is selected.
         */
        "value"?: string;
    }
    interface RuxMenuItemDivider {
    }
    interface RuxMonitoringIcon {
        /**
          * Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Displays a label below the icon
         */
        "label": string;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and uses `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Styles the icon according to the Astro Status colors. Valid options are the Astro statuses `critical`, `serious`, `caution`, `normal`, `standby`, and `off`.
         */
        "status"?: Status;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxMonitoringProgressIcon {
        /**
          * Displays a label below the icon
         */
        "label"?: string;
        /**
          * Sets the maximum value for the progress range. When progress is this number, it reads 100%. When it is halfway between min and max, it will read 50%.
         */
        "max"?: number;
        /**
          * Sets the minimum value for the progress range. When progress is this number, it reads 0%. When it is halfway between min and max, it will read 50%.
         */
        "min"?: number;
        /**
          * If provided and greater than `0`, displays an outlined number badge at the bottom right of the icon. Numbers above `9999` are abbreviated to `'10K'` or `'100K'` for numbers in the thousands, `'1.5M'` for millions, `'1.5B'` for billions, and `'∞'` for one trillion or higher.
         */
        "notifications"?: number;
        /**
          * Displays this value as a percentage of where it lies between min and max in the center of the donut graph and styles a proportional segment of the graph. Progress can be positive or negative (the later useful for countdowns). The progress value must exist within the thresholds specified in the range property below, and must be an integer. If a non-integer value is passed in, progress will default to 0. If progress ever becomes less than min or greater than max, it will be set to equal min or max respectively.
         */
        "progress"?: number;
        /**
          * Items in this Array define thresholds for changing the status style of the progress icon. For each item in the Array, the icon will be styled with the given status while the progress value is less than or equal to the Array item’s threshold and greater than the next smallest item‘s threshold. Both progress and the Array items’ threshold values can be positive or negative. If no min is specified, the component assumes the Array's first status threshold begins at 0.
         */
        "range": Array<RangeItem>;
        /**
          * Displays a smaller label underneath the icon label
         */
        "sublabel"?: string;
    }
    interface RuxNotification {
        /**
          * If provided, the banner will automatically close after this amount of time. Accepts value either in milliseconds or seconds (which will be converted to milliseconds internally), between `2000` and `10000`, or `2` and `10`, respectively. Any number provided outside of the `2000`-`10000` range will be ignored in favor of the default 2000ms delay. <br>If `closeAfter` is not passed or if it is given an undefined or `null` value, the banner will stay open until the user closes it.
         */
        "closeAfter"?: number;
        /**
          * Prevents the user from dismissing the notification. Hides the `actions` slot.
         */
        "hideClose"?: boolean;
        /**
          * Message for the notification banner.
         */
        "message"?: string;
        /**
          * Fires when the notification banner is closed
         */
        "onRuxclosed"?: (event: RuxNotificationCustomEvent<boolean>) => void;
        /**
          * Set to true to display the Banner and begin countdown to close (if a close-after Number value is provided).
         */
        "open"?: boolean;
        /**
          * Changes the size of the banner to a small variant.
         */
        "small"?: boolean;
        /**
          * The background color. Possible values include 'off', 'standby', 'normal', 'caution', 'serious' and 'critical'. See [Astro UXDS Status System](https://astrouxds.com/patterns/status-system/).
         */
        "status"?: Status;
    }
    interface RuxOption {
        /**
          * Sets the option as disabled
         */
        "disabled"?: boolean;
        /**
          * The option label
         */
        "label": string;
        "onRux-option-changed"?: (event: RuxOptionCustomEvent<void>) => void;
        /**
          * The option value
         */
        "value": string;
    }
    interface RuxOptionGroup {
        /**
          * The option group label
         */
        "label"?: string;
        "onRux-option-group-changed"?: (event: RuxOptionGroupCustomEvent<void>) => void;
    }
    interface RuxPopUp {
        /**
          * When provided, will close the pop-up when a single selection is made.
         */
        "closeOnSelect"?: boolean;
        /**
          * Turns autoUpdate on or off which makes the pop-up move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate"?: boolean;
        /**
          * watches for trigger movements and replace the popup if movement is detected.
         */
        "enableAnimationFrame"?: boolean;
        /**
          * Emits when the pop up has closed.
         */
        "onRuxpopupclosed"?: (event: RuxPopUpCustomEvent<any>) => void;
        /**
          * Emits when the pop up has opened
         */
        "onRuxpopupopened"?: (event: RuxPopUpCustomEvent<any>) => void;
        /**
          * Determines if the pop up is open or closed
         */
        "open"?: boolean;
        /**
          * The placement of the pop up relative to it's slotted trigger element. Defaults to auto.
         */
        "placement"?: ExtendedPlacement;
        /**
          * The position strategy of the popup, either absolute or fixed.
         */
        "strategy"?: 'absolute' | 'fixed';
    }
    interface RuxProgress {
        /**
          * Hides the progress label
         */
        "hideLabel"?: boolean;
        /**
          * For progress bars where progress bars have a maximum value greater or less than 100
         */
        "max"?: number;
        /**
          * Current progress value between 0 and 100 (or the max, if defined below).
         */
        "value"?: number;
    }
    interface RuxPushButton {
        /**
          * Checks the push button via HTML `checked` attribute. Push button takes on a distinct "enabled" or "selected" visual state.
         */
        "checked"?: boolean;
        /**
          * Disables the push button via HTML `disabled` attribute. Button takes on a distinct disabled visual state. Cursor uses the `not-allowed` system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * For a [button style guide, see the Button section in Astro UXDS Guidelines](https://astrouxds.com/components/button) Displays an Astro icon matching this string. For a [full list of available icons, see the Icons section in Astro UXDS Guidelines](https://astrouxds.com/ui-components/icons-and-symbols)
         */
        "icon"?: string;
        /**
          * Hides slotted text from the button by setting rux-button--icon-only class
         */
        "iconOnly"?: boolean;
        /**
          * The label of the push button.
         */
        "label"?: string;
        /**
          * The name of the push button.
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxPushButtonCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user and emits the value on the event.detail - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxchange"?: (event: RuxPushButtonCustomEvent<any>) => void;
        /**
          * Changes size of a push button from medium to small or large by setting sizing classes rux-button--small rux-button--large
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the push button.
         */
        "value"?: string;
    }
    interface RuxRadio {
        /**
          * Toggles checked state of a radio
         */
        "checked"?: boolean;
        /**
          * Disables the radio via HTML disabled attribute. Radio takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The radio label text. For HTML content, use the default slot instead.
         */
        "label"?: string;
        /**
          * The radio name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxRadioCustomEvent<any>) => void;
        /**
          * The radio value
         */
        "value"?: string;
    }
    interface RuxRadioGroup {
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Radio Group as invalid.
         */
        "invalid"?: boolean;
        /**
          * The label of the radio group. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The name of the radio group - submitted with form data. Must match the name of the radios in the group.
         */
        "name"?: string;
        /**
          * Fired when the value of the input changes and emits that value on the event.detail. - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxRadioGroupCustomEvent<any>) => void;
        /**
          * Marks that a selection from the radio-group is requried.
         */
        "required"?: boolean;
        /**
          * The value of the current selected radio in the group. Changing this will also mark that radio as checked in the UI.
         */
        "value"?: any | null;
    }
    interface RuxRuler {
        "end"?: string;
        "interval"?: any;
        "start"?: string;
        "timezone"?: string;
    }
    interface RuxSegmentedButton {
        /**
          * Items in this Array are the individual button segments.
         */
        "data"?: SegmentedButton[];
        /**
          * Sets the disabled attribute.
         */
        "disabled"?: boolean;
        /**
          * Fires when the value property has changed and emits that value on the event.detail.
         */
        "onRuxchange"?: (event: RuxSegmentedButtonCustomEvent<any>) => void;
        /**
          * When passed in on load, this selects the first button segment with a matching label. When the selected segment changes, this property updates with the currently selected value, which reflects back to the component attribute. If no button segment label matches this string, then no segment is selected. This value takes priority over setting selected boolean property on the items in the data array.
         */
        "selected"?: string;
        /**
          * Changes size of segmented button from small to medium or large.
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface RuxSelect {
        /**
          * Disables the select menu via HTML disabled attribute. Select menu takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * Id for the Select Input
         */
        "inputId"?: string;
        /**
          * Presentational only. Renders the Select Menu as invalid.
         */
        "invalid"?: boolean;
        /**
          * The select label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Id for the Label
         */
        "labelId"?: string;
        /**
          * Enables multiselect
         */
        "multiple"?: boolean;
        /**
          * Sets the Name of the Input Element
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSelectCustomEvent<any>) => void;
        /**
          * Event Emitted when the Value of the Select is Changed
         */
        "onRuxchange"?: (event: RuxSelectCustomEvent<void>) => void;
        /**
          * Sets the field as required
         */
        "required"?: boolean;
        /**
          * The size of rux-select
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The value of the selected option. If multiple is true, this is an array.
         */
        "value"?: string | string[];
    }
    interface RuxSlider {
        /**
          * Shows tick marks and labels in the order provided and aligns evenly based on the length.
         */
        "axisLabels"?: string[];
        /**
          * Determines if the slider is disabled.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The help or explanation text
         */
        "helpText"?: string;
        /**
          * The slider label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * Max value of slider.
         */
        "max"?: number;
        /**
          * Min value of the slider.
         */
        "min"?: number;
        /**
          * Name of the Input Field for Form Submission
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Fired when the element's value is altered by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxchange"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxinput"?: (event: RuxSliderCustomEvent<any>) => void;
        /**
          * Step amount of slider value.
         */
        "step"?: number;
        /**
          * Hides labels and only shows tick marks if axis-labels is provided.
         */
        "ticksOnly"?: boolean;
        /**
          * Current value of the slider. The default value is halfway between the specified minimum and maximum. - [HTMLElement/input_type_range>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range)
         */
        "value"?: number;
    }
    interface RuxStatus {
        /**
          * Sets the status symbol, valid options are critical, serious, caution, normal, standby and off
         */
        "status"?: Status;
    }
    interface RuxSwitch {
        /**
          * Toggles checked state of a switch
         */
        "checked"?: boolean;
        /**
          * Disables the switch via HTML disabled attribute. Switch takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The switch label. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The switch name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes and emits that value on the event.detail. - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxSwitchCustomEvent<any>) => void;
        /**
          * The switch value
         */
        "value"?: string;
    }
    interface RuxTab {
        /**
          * If present, sets a disabled state on this tab item, indicating it cannot be selected by user action.
         */
        "disabled"?: boolean;
        /**
          * Fires when a tab is selected
         */
        "onRuxtabselected"?: (event: RuxTabCustomEvent<any>) => void;
        /**
          * If present, overrides which tab is selected on load / mount. By default, the first <rux-tab> item is selected.
         */
        "selected"?: boolean;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTabPanel {
    }
    interface RuxTabPanels {
        /**
          * Emits a list of the Tab Panels on the event.detail which have been passed in
         */
        "onRuxregisterpanels"?: (event: RuxTabPanelsCustomEvent<HTMLRuxTabPanelsElement[]>) => void;
    }
    interface RuxTable {
    }
    interface RuxTableBody {
    }
    interface RuxTableCell {
    }
    interface RuxTableHeader {
    }
    interface RuxTableHeaderCell {
    }
    interface RuxTableHeaderRow {
    }
    interface RuxTableRow {
        /**
          * Changes the background color of the row. Can be applied to multiple rows at once.
         */
        "selected"?: boolean;
    }
    interface RuxTabs {
        /**
          * Fires whenever a new tab is selected, and emits the selected tab on the event.detail.
         */
        "onRuxselected"?: (event: RuxTabsCustomEvent<any>) => void;
        /**
          * If passed or set to true, displays the tabs in a smaller style, suitable for limited-space uses.
         */
        "small"?: boolean;
    }
    interface RuxTag {
        /**
          * Used to display a status of pass, fail, or unknown. If no status is provided or the provided status is not an accepted status type, the default is unknown.
         */
        "status"?: StatusTags;
    }
    interface RuxTextarea {
        /**
          * Disables the button via HTML disabled attribute. Button takes on a distinct visual state. Cursor uses the not-allowed system replacement and all keyboard and mouse events are ignored.
         */
        "disabled"?: boolean;
        /**
          * The validation error text
         */
        "errorText"?: string;
        /**
          * The  or explanation text
         */
        "helpText"?: string;
        /**
          * Presentational only. Renders the Textarea as invalid.
         */
        "invalid"?: boolean;
        /**
          * The textarea label text. For HTML content, use the `label` slot instead.
         */
        "label"?: string;
        /**
          * The input maxLength attribute
         */
        "maxLength"?: string;
        /**
          * The input minLength attribute
         */
        "minLength"?: string;
        /**
          * The input name
         */
        "name"?: string;
        /**
          * Fired when an element has lost focus - [HTMLElement/blur_event](https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event)
         */
        "onRuxblur"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * Fired when the value of the input changes - [HTMLElement/input_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
         */
        "onRuxchange"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * Fired when an alteration to the input's value is committed by the user - [HTMLElement/change_event](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
         */
        "onRuxinput"?: (event: RuxTextareaCustomEvent<any>) => void;
        /**
          * The textarea placeholder text
         */
        "placeholder"?: string;
        /**
          * Sets the input as disabled
         */
        "required"?: boolean;
        /**
          * The input rows attribute
         */
        "rows"?: number;
        /**
          * Styles the input element size between small, medium and large. The default styling is medium.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * The input value
         */
        "value"?: string;
    }
    interface RuxTimeRegion {
        /**
          * The end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end"?: string;
        /**
          * Optionally hide the bottom right timestamp.
         */
        "hideTimestamp"?: boolean;
        "onRuxtimeregionchange"?: (event: RuxTimeRegionCustomEvent<any>) => void;
        /**
          * Visually indicates a partial time regions. Partial time regions are time regions that start or end outside of the current range of the timeline.
         */
        "partial"?: 'none' | 'start' | 'end' | 'ongoing';
        /**
          * Visually displays the selected state
         */
        "selected"?: boolean;
        /**
          * The start date. Must be an ISO string "2021-02-02T05:00:00Z".
         */
        "start"?: string;
        /**
          * Short hand attribute for displaying a Status icon and appropriate border color.
         */
        "status"?: Status;
        "timezone"?: string;
    }
    interface RuxTimeline {
        /**
          * The timeline's end date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "end"?: string;
        /**
          * The timeline's date time interval
         */
        "interval"?: 'hour' | 'day';
        /**
          * The timeline's playhead date time. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "playhead"?: string;
        /**
          * The timeline's start date. Must be an ISO string "2021-02-02T05:00:00Z"
         */
        "start"?: string;
        /**
          * Controls the timezone that the timeline is localized to. Must be an IANA time zone name ("America/New_York") or an offset string.
         */
        "timezone"?: string;
        /**
          * The timeline's zoom level.
         */
        "zoom"?: number;
    }
    interface RuxTooltip {
        /**
          * How long it takes the tooltip to appear in milliseconds, default = 800, Overrides the css custom property --delay.
         */
        "delay"?: number;
        /**
          * Turns disableAutoUpdate on or off which makes the tooltip move to stay in view based on scroll. Defaults to false.
         */
        "disableAutoUpdate"?: boolean;
        /**
          * The tooltip's content.
         */
        "message"?: string;
        /**
          * Pixel offset from trigger, default = 8
         */
        "offset"?: number;
        /**
          * Emits when the tooltip has closed.
         */
        "onRuxtooltipclosed"?: (event: RuxTooltipCustomEvent<any>) => void;
        /**
          * Emits when the tooltip has opened
         */
        "onRuxtooltipopened"?: (event: RuxTooltipCustomEvent<any>) => void;
        /**
          * Whether or not the tooltip is open
         */
        "open"?: boolean;
        /**
          * The placement of the tooltip relative to it's slotted trigger element. Defaults to auto.
         */
        "placement"?: ExtendedPlacement;
        /**
          * The position strategy of the tooltip, either absolute or fixed.
         */
        "strategy"?: 'absolute' | 'fixed';
    }
    interface RuxTrack {
        "columns"?: number;
        "end"?: string;
        "interval"?: any;
        "start"?: string;
        "timezone"?: string;
        "width"?: number;
    }
    interface RuxTree {
    }
    interface RuxTreeNode {
        /**
          * Sets the expanded state
         */
        "expanded"?: boolean;
        /**
          * Fires when the user collapses a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodecollapsed"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Fires when the user expands a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodeexpanded"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Fires when the user selects a tree node and emits the node's id on the event.detail.
         */
        "onRuxtreenodeselected"?: (event: RuxTreeNodeCustomEvent<string>) => void;
        /**
          * Sets the selected state
         */
        "selected"?: boolean;
    }
    interface IntrinsicElements {
        "rux-accordion": RuxAccordion;
        "rux-accordion-item": RuxAccordionItem;
        "rux-breadcrumb": RuxBreadcrumb;
        "rux-breadcrumb-item": RuxBreadcrumbItem;
        "rux-button": RuxButton;
        "rux-button-group": RuxButtonGroup;
        "rux-card": RuxCard;
        "rux-checkbox": RuxCheckbox;
        "rux-checkbox-group": RuxCheckboxGroup;
        "rux-classification-marking": RuxClassificationMarking;
        "rux-clock": RuxClock;
        "rux-container": RuxContainer;
        "rux-datetime": RuxDatetime;
        "rux-dialog": RuxDialog;
        "rux-global-status-bar": RuxGlobalStatusBar;
        "rux-icon": RuxIcon;
        "rux-indeterminate-progress": RuxIndeterminateProgress;
        "rux-input": RuxInput;
        "rux-log": RuxLog;
        "rux-menu": RuxMenu;
        "rux-menu-item": RuxMenuItem;
        "rux-menu-item-divider": RuxMenuItemDivider;
        "rux-monitoring-icon": RuxMonitoringIcon;
        "rux-monitoring-progress-icon": RuxMonitoringProgressIcon;
        "rux-notification": RuxNotification;
        "rux-option": RuxOption;
        "rux-option-group": RuxOptionGroup;
        "rux-pop-up": RuxPopUp;
        "rux-progress": RuxProgress;
        "rux-push-button": RuxPushButton;
        "rux-radio": RuxRadio;
        "rux-radio-group": RuxRadioGroup;
        "rux-ruler": RuxRuler;
        "rux-segmented-button": RuxSegmentedButton;
        "rux-select": RuxSelect;
        "rux-slider": RuxSlider;
        "rux-status": RuxStatus;
        "rux-switch": RuxSwitch;
        "rux-tab": RuxTab;
        "rux-tab-panel": RuxTabPanel;
        "rux-tab-panels": RuxTabPanels;
        "rux-table": RuxTable;
        "rux-table-body": RuxTableBody;
        "rux-table-cell": RuxTableCell;
        "rux-table-header": RuxTableHeader;
        "rux-table-header-cell": RuxTableHeaderCell;
        "rux-table-header-row": RuxTableHeaderRow;
        "rux-table-row": RuxTableRow;
        "rux-tabs": RuxTabs;
        "rux-tag": RuxTag;
        "rux-textarea": RuxTextarea;
        "rux-time-region": RuxTimeRegion;
        "rux-timeline": RuxTimeline;
        "rux-tooltip": RuxTooltip;
        "rux-track": RuxTrack;
        "rux-tree": RuxTree;
        "rux-tree-node": RuxTreeNode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rux-accordion": LocalJSX.RuxAccordion & JSXBase.HTMLAttributes<HTMLRuxAccordionElement>;
            "rux-accordion-item": LocalJSX.RuxAccordionItem & JSXBase.HTMLAttributes<HTMLRuxAccordionItemElement>;
            "rux-breadcrumb": LocalJSX.RuxBreadcrumb & JSXBase.HTMLAttributes<HTMLRuxBreadcrumbElement>;
            "rux-breadcrumb-item": LocalJSX.RuxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLRuxBreadcrumbItemElement>;
            "rux-button": LocalJSX.RuxButton & JSXBase.HTMLAttributes<HTMLRuxButtonElement>;
            "rux-button-group": LocalJSX.RuxButtonGroup & JSXBase.HTMLAttributes<HTMLRuxButtonGroupElement>;
            "rux-card": LocalJSX.RuxCard & JSXBase.HTMLAttributes<HTMLRuxCardElement>;
            "rux-checkbox": LocalJSX.RuxCheckbox & JSXBase.HTMLAttributes<HTMLRuxCheckboxElement>;
            "rux-checkbox-group": LocalJSX.RuxCheckboxGroup & JSXBase.HTMLAttributes<HTMLRuxCheckboxGroupElement>;
            "rux-classification-marking": LocalJSX.RuxClassificationMarking & JSXBase.HTMLAttributes<HTMLRuxClassificationMarkingElement>;
            "rux-clock": LocalJSX.RuxClock & JSXBase.HTMLAttributes<HTMLRuxClockElement>;
            "rux-container": LocalJSX.RuxContainer & JSXBase.HTMLAttributes<HTMLRuxContainerElement>;
            "rux-datetime": LocalJSX.RuxDatetime & JSXBase.HTMLAttributes<HTMLRuxDatetimeElement>;
            "rux-dialog": LocalJSX.RuxDialog & JSXBase.HTMLAttributes<HTMLRuxDialogElement>;
            "rux-global-status-bar": LocalJSX.RuxGlobalStatusBar & JSXBase.HTMLAttributes<HTMLRuxGlobalStatusBarElement>;
            "rux-icon": LocalJSX.RuxIcon & JSXBase.HTMLAttributes<HTMLRuxIconElement>;
            "rux-indeterminate-progress": LocalJSX.RuxIndeterminateProgress & JSXBase.HTMLAttributes<HTMLRuxIndeterminateProgressElement>;
            "rux-input": LocalJSX.RuxInput & JSXBase.HTMLAttributes<HTMLRuxInputElement>;
            "rux-log": LocalJSX.RuxLog & JSXBase.HTMLAttributes<HTMLRuxLogElement>;
            "rux-menu": LocalJSX.RuxMenu & JSXBase.HTMLAttributes<HTMLRuxMenuElement>;
            "rux-menu-item": LocalJSX.RuxMenuItem & JSXBase.HTMLAttributes<HTMLRuxMenuItemElement>;
            "rux-menu-item-divider": LocalJSX.RuxMenuItemDivider & JSXBase.HTMLAttributes<HTMLRuxMenuItemDividerElement>;
            "rux-monitoring-icon": LocalJSX.RuxMonitoringIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringIconElement>;
            "rux-monitoring-progress-icon": LocalJSX.RuxMonitoringProgressIcon & JSXBase.HTMLAttributes<HTMLRuxMonitoringProgressIconElement>;
            "rux-notification": LocalJSX.RuxNotification & JSXBase.HTMLAttributes<HTMLRuxNotificationElement>;
            "rux-option": LocalJSX.RuxOption & JSXBase.HTMLAttributes<HTMLRuxOptionElement>;
            "rux-option-group": LocalJSX.RuxOptionGroup & JSXBase.HTMLAttributes<HTMLRuxOptionGroupElement>;
            "rux-pop-up": LocalJSX.RuxPopUp & JSXBase.HTMLAttributes<HTMLRuxPopUpElement>;
            "rux-progress": LocalJSX.RuxProgress & JSXBase.HTMLAttributes<HTMLRuxProgressElement>;
            "rux-push-button": LocalJSX.RuxPushButton & JSXBase.HTMLAttributes<HTMLRuxPushButtonElement>;
            "rux-radio": LocalJSX.RuxRadio & JSXBase.HTMLAttributes<HTMLRuxRadioElement>;
            "rux-radio-group": LocalJSX.RuxRadioGroup & JSXBase.HTMLAttributes<HTMLRuxRadioGroupElement>;
            "rux-ruler": LocalJSX.RuxRuler & JSXBase.HTMLAttributes<HTMLRuxRulerElement>;
            "rux-segmented-button": LocalJSX.RuxSegmentedButton & JSXBase.HTMLAttributes<HTMLRuxSegmentedButtonElement>;
            "rux-select": LocalJSX.RuxSelect & JSXBase.HTMLAttributes<HTMLRuxSelectElement>;
            "rux-slider": LocalJSX.RuxSlider & JSXBase.HTMLAttributes<HTMLRuxSliderElement>;
            "rux-status": LocalJSX.RuxStatus & JSXBase.HTMLAttributes<HTMLRuxStatusElement>;
            "rux-switch": LocalJSX.RuxSwitch & JSXBase.HTMLAttributes<HTMLRuxSwitchElement>;
            "rux-tab": LocalJSX.RuxTab & JSXBase.HTMLAttributes<HTMLRuxTabElement>;
            "rux-tab-panel": LocalJSX.RuxTabPanel & JSXBase.HTMLAttributes<HTMLRuxTabPanelElement>;
            "rux-tab-panels": LocalJSX.RuxTabPanels & JSXBase.HTMLAttributes<HTMLRuxTabPanelsElement>;
            "rux-table": LocalJSX.RuxTable & JSXBase.HTMLAttributes<HTMLRuxTableElement>;
            "rux-table-body": LocalJSX.RuxTableBody & JSXBase.HTMLAttributes<HTMLRuxTableBodyElement>;
            "rux-table-cell": LocalJSX.RuxTableCell & JSXBase.HTMLAttributes<HTMLRuxTableCellElement>;
            "rux-table-header": LocalJSX.RuxTableHeader & JSXBase.HTMLAttributes<HTMLRuxTableHeaderElement>;
            "rux-table-header-cell": LocalJSX.RuxTableHeaderCell & JSXBase.HTMLAttributes<HTMLRuxTableHeaderCellElement>;
            "rux-table-header-row": LocalJSX.RuxTableHeaderRow & JSXBase.HTMLAttributes<HTMLRuxTableHeaderRowElement>;
            "rux-table-row": LocalJSX.RuxTableRow & JSXBase.HTMLAttributes<HTMLRuxTableRowElement>;
            "rux-tabs": LocalJSX.RuxTabs & JSXBase.HTMLAttributes<HTMLRuxTabsElement>;
            "rux-tag": LocalJSX.RuxTag & JSXBase.HTMLAttributes<HTMLRuxTagElement>;
            "rux-textarea": LocalJSX.RuxTextarea & JSXBase.HTMLAttributes<HTMLRuxTextareaElement>;
            "rux-time-region": LocalJSX.RuxTimeRegion & JSXBase.HTMLAttributes<HTMLRuxTimeRegionElement>;
            "rux-timeline": LocalJSX.RuxTimeline & JSXBase.HTMLAttributes<HTMLRuxTimelineElement>;
            "rux-tooltip": LocalJSX.RuxTooltip & JSXBase.HTMLAttributes<HTMLRuxTooltipElement>;
            "rux-track": LocalJSX.RuxTrack & JSXBase.HTMLAttributes<HTMLRuxTrackElement>;
            "rux-tree": LocalJSX.RuxTree & JSXBase.HTMLAttributes<HTMLRuxTreeElement>;
            "rux-tree-node": LocalJSX.RuxTreeNode & JSXBase.HTMLAttributes<HTMLRuxTreeNodeElement>;
        }
    }
}
